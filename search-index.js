var N = null;var searchIndex = {};
searchIndex["bitcrypto"]={"doc":"","items":[[8,"Digest","bitcrypto","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2 family of digest functions.",N,N],[10,"input","","Provide message data.",0,N],[10,"result","","Retrieve the digest result. This method may be called multiple times.",0,N],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more data.",0,N],[10,"output_bits","","Get the output size in bits.",0,[[["self"]],["usize"]]],[11,"output_bytes","","Get the output size in bytes.",0,[[["self"]],["usize"]]],[10,"block_size","","Get the block size in bytes.",0,[[["self"]],["usize"]]],[11,"input_str","","Convenience function that feeds a string into a digest.",0,N],[11,"result_str","","Convenience function that retrieves the result of a digest as a String in hexadecimal format.",0,[[["self"]],["string"]]],[3,"DHash160","","",N,N],[3,"DHash256","","",N,N],[5,"ripemd160","","RIPEMD160",N,N],[5,"sha1","","SHA-1",N,N],[5,"sha256","","SHA-256",N,N],[5,"dhash160","","SHA-256 and RIPEMD160",N,N],[5,"dhash256","","Double SHA-256",N,N],[5,"siphash24","","SipHash-2-4",N,N],[5,"checksum","","Data checksum",N,N],[11,"default","","",1,[[],["self"]]],[11,"new","","",1,[[],["self"]]],[11,"input","","",1,N],[11,"result","","",1,N],[11,"reset","","",1,[[["self"]]]],[11,"output_bits","","",1,[[["self"]],["usize"]]],[11,"block_size","","",1,[[["self"]],["usize"]]],[11,"default","","",2,[[],["self"]]],[11,"new","","",2,[[],["self"]]],[11,"finish","","",2,[[["self"]],["h256"]]],[11,"input","","",2,N],[11,"result","","",2,N],[11,"reset","","",2,[[["self"]]]],[11,"output_bits","","",2,[[["self"]],["usize"]]],[11,"block_size","","",2,[[["self"]],["usize"]]]],"paths":[[8,"Digest"],[3,"DHash160"],[3,"DHash256"]]};
searchIndex["chain"]={"doc":"","items":[[0,"hash","chain","Fixed-size hashes",N,N],[3,"H32","chain::hash","",N,N],[3,"H48","","",N,N],[3,"H96","","",N,N],[3,"H160","","",N,N],[3,"H256","","",N,N],[3,"H264","","",N,N],[3,"H512","","",N,N],[3,"H520","","",N,N],[0,"bytes","chain","Wrapper around `Vec<u8>`",N,N],[3,"Bytes","chain::bytes","Wrapper around `Vec<u8>`",N,N],[3,"TaggedBytes","","Wrapper around `Vec<u8>` which represent associated type",N,N],[0,"uint","chain::bigint","Big unsigned integer types.",N,N],[4,"FromDecStrErr","chain::bigint::uint","Conversion from decimal string error",N,N],[13,"InvalidCharacter","","Char not from range 0-9",0,N],[13,"InvalidLength","","Value does not fit into type",0,N],[8,"Uint","","Large, fixed-length unsigned integer type.",N,N],[10,"zero","","Returns new instance equalling zero.",1,[[],["self"]]],[10,"one","","Returns new instance equalling one.",1,[[],["self"]]],[10,"max_value","","Returns the largest value that can be represented by this integer type.",1,[[],["self"]]],[10,"from_dec_str","","Convert from a decimal string.",1,[[["str"]],["result",["fromdecstrerr"]]]],[10,"low_u32","","Conversion to u32",1,[[["self"]],["u32"]]],[10,"low_u64","","Conversion to u64",1,[[["self"]],["u64"]]],[10,"as_u32","","Conversion to u32 with overflow checking",1,[[["self"]],["u32"]]],[10,"as_u64","","Conversion to u64 with overflow checking",1,[[["self"]],["u64"]]],[10,"bits","","Return the least number of bits needed to represent the number",1,[[["self"]],["usize"]]],[10,"bit","","Return if specific bit is set",1,[[["self"],["usize"]],["bool"]]],[10,"byte","","Return single byte",1,[[["self"],["usize"]],["u8"]]],[10,"to_big_endian","","Convert to the sequence of bytes with a big endian",1,N],[10,"to_little_endian","","Convert to the sequence of bytes with a little endian",1,N],[10,"to_hex","","Convert to a non-zero-prefixed hex representation (not prefixed by `0x`). ",1,[[["self"]],["string"]]],[10,"exp10","","Create `Uint(10**n)`",1,[[["usize"]],["self"]]],[10,"pow","","Return eponentation `self**other`. Panic on overflow.",1,[[["self"],["self"]],["self"]]],[10,"overflowing_pow","","Return wrapped eponentation `self**other` and flag if there was an overflow",1,N],[10,"overflowing_add","","Add this `Uint` to other returning result and possible overflow",1,N],[10,"overflowing_sub","","Subtract another `Uint` from this returning result and possible overflow",1,N],[10,"overflowing_mul","","Multiple this `Uint` with other returning result and possible overflow",1,N],[10,"overflowing_div","","Divide this `Uint` by other returning result and possible overflow",1,N],[10,"overflowing_rem","","Returns reminder of division of this `Uint` by other and possible overflow",1,N],[10,"overflowing_neg","","Returns negation of this `Uint` and overflow (always true)",1,N],[10,"is_zero","","Returns",1,[[["self"]],["bool"]]],[3,"U512","","Little-endian large integer type",N,N],[12,"0","","",2,N],[3,"U256","","Little-endian large integer type",N,N],[12,"0","","",3,N],[3,"U128","","Little-endian large integer type",N,N],[12,"0","","",4,N],[0,"compact","chain","Compact representation of `U256`",N,N],[3,"Compact","chain::compact","Compact representation of `U256`",N,N],[3,"Block","chain","",N,N],[12,"block_header","","",5,N],[12,"transactions","","",5,N],[3,"BlockHeader","","",N,N],[12,"version","","",6,N],[12,"previous_header_hash","","",6,N],[12,"merkle_root_hash","","",6,N],[12,"time","","",6,N],[12,"bits","","",6,N],[12,"nonce","","",6,N],[3,"Transaction","","",N,N],[12,"version","","",7,N],[12,"inputs","","",7,N],[12,"outputs","","",7,N],[12,"lock_time","","",7,N],[3,"TransactionInput","","",N,N],[12,"previous_output","","",8,N],[12,"script_sig","","",8,N],[12,"sequence","","",8,N],[12,"script_witness","","",8,N],[3,"TransactionOutput","","",N,N],[12,"value","","",9,N],[12,"script_pubkey","","",9,N],[3,"OutPoint","","",N,N],[12,"hash","","",10,N],[12,"index","","",10,N],[3,"HashedData","","",N,N],[12,"size","","",11,N],[12,"hash","","",11,N],[12,"data","","",11,N],[3,"IndexedBlock","","",N,N],[12,"header","","",12,N],[12,"transactions","","",12,N],[3,"IndexedBlockHeader","","",N,N],[12,"hash","","",13,N],[12,"raw","","",13,N],[3,"IndexedTransaction","","",N,N],[12,"hash","","",14,N],[12,"raw","","",14,N],[5,"merkle_root","","Calculates the root of the merkle tree https://en.bitcoin.it/wiki/Protocol_documentation#Merkle_Trees",N,N],[5,"merkle_node_hash","","Calculate merkle tree node hash",N,[[["t"],["t"]],["h256"]]],[0,"constants","","",N,N],[17,"SEQUENCE_LOCKTIME_DISABLE_FLAG","chain::constants","",N,N],[17,"SEQUENCE_FINAL","","",N,N],[17,"SEQUENCE_LOCKTIME_TYPE_FLAG","","",N,N],[17,"SEQUENCE_LOCKTIME_MASK","","",N,N],[17,"LOCKTIME_THRESHOLD","","Threshold for `nLockTime`: below this value it is interpreted as block number, otherwise as UNIX timestamp.",N,N],[17,"SATOSHIS_IN_COIN","","Number of Satoshis in single coin",N,N],[11,"fmt","chain","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["block"]],["bool"]]],[11,"ne","","",5,[[["self"],["block"]],["bool"]]],[11,"clone","","",5,[[["self"]],["block"]]],[11,"from","","",5,[[["str"]],["self"]]],[11,"h256","","",5,[[["self"]],["h256"]]],[11,"new","","",5,[[["blockheader"],["vec",["transaction"]]],["self"]]],[11,"merkle_root","","Returns block's merkle root.",5,[[["self"]],["h256"]]],[11,"witness_merkle_root","","Returns block's witness merkle root.",5,[[["self"]],["h256"]]],[11,"transactions","","",5,N],[11,"header","","",5,[[["self"]],["blockheader"]]],[11,"hash","","",5,[[["self"]],["h256"]]],[11,"eq","","",6,[[["self"],["blockheader"]],["bool"]]],[11,"ne","","",6,[[["self"],["blockheader"]],["bool"]]],[11,"clone","","",6,[[["self"]],["blockheader"]]],[11,"hash","","",6,[[["self"]],["h256"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"from","","",6,[[["str"]],["self"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["outpoint"]],["bool"]]],[11,"ne","","",10,[[["self"],["outpoint"]],["bool"]]],[11,"clone","","",10,[[["self"]],["outpoint"]]],[11,"default","","",10,[[],["outpoint"]]],[11,"null","","",10,[[],["self"]]],[11,"is_null","","",10,[[["self"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["transactioninput"]],["bool"]]],[11,"ne","","",8,[[["self"],["transactioninput"]],["bool"]]],[11,"default","","",8,[[],["transactioninput"]]],[11,"clone","","",8,[[["self"]],["transactioninput"]]],[11,"coinbase","","",8,[[["bytes"]],["self"]]],[11,"is_final","","",8,[[["self"]],["bool"]]],[11,"has_witness","","",8,[[["self"]],["bool"]]],[11,"heap_size_of_children","","",8,[[["self"]],["usize"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["transactionoutput"]],["bool"]]],[11,"ne","","",9,[[["self"],["transactionoutput"]],["bool"]]],[11,"clone","","",9,[[["self"]],["transactionoutput"]]],[11,"default","","",9,[[],["self"]]],[11,"heap_size_of_children","","",9,[[["self"]],["usize"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["transaction"]],["bool"]]],[11,"ne","","",7,[[["self"],["transaction"]],["bool"]]],[11,"default","","",7,[[],["transaction"]]],[11,"clone","","",7,[[["self"]],["transaction"]]],[11,"from","","",7,[[["str"]],["self"]]],[11,"heap_size_of_children","","",7,[[["self"]],["usize"]]],[11,"hash","","",7,[[["self"]],["h256"]]],[11,"witness_hash","","",7,[[["self"]],["h256"]]],[11,"inputs","","",7,N],[11,"outputs","","",7,N],[11,"is_empty","","",7,[[["self"]],["bool"]]],[11,"is_null","","",7,[[["self"]],["bool"]]],[11,"is_coinbase","","",7,[[["self"]],["bool"]]],[11,"is_final","","",7,[[["self"]],["bool"]]],[11,"is_final_in_block","","",7,[[["self"],["u32"],["u32"]],["bool"]]],[11,"has_witness","","",7,[[["self"]],["bool"]]],[11,"total_spends","","",7,[[["self"]],["u64"]]],[11,"serialize","","",8,[[["self"],["stream"]]]],[11,"deserialize","","",8,[[["reader"]],["result",["error"]]]],[11,"serialize","","",7,[[["self"],["stream"]]]],[11,"deserialize","","",7,[[["reader"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["indexedblock"]]],[11,"from","","",12,[[["block"]],["self"]]],[11,"eq","","",12,[[["self"],["self"]],["bool"]]],[11,"new","","",12,[[["indexedblockheader"],["vec",["indexedtransaction"]]],["self"]]],[11,"hash","","",12,[[["self"]],["h256"]]],[11,"to_raw_block","","",12,[[["self"]],["block"]]],[11,"size","","",12,[[["self"]],["usize"]]],[11,"size_with_witness","","",12,[[["self"]],["usize"]]],[11,"merkle_root","","",12,[[["self"]],["h256"]]],[11,"witness_merkle_root","","",12,[[["self"]],["h256"]]],[11,"is_final","","",12,[[["self"],["u32"]],["bool"]]],[11,"from","","",12,[[["str"]],["self"]]],[11,"clone","","",13,[[["self"]],["indexedblockheader"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"from","","",13,[[["blockheader"]],["self"]]],[11,"new","","",13,[[["h256"],["blockheader"]],["self"]]],[11,"eq","","",13,[[["self"],["self"]],["bool"]]],[11,"deserialize","","",13,[[["reader"]],["result",["readererror"]]]],[11,"default","","",14,[[],["indexedtransaction"]]],[11,"clone","","",14,[[["self"]],["indexedtransaction"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"from","","",14,[[["t"]],["self"]]],[11,"new","","",14,[[["h256"],["transaction"]],["self"]]],[11,"eq","","",14,[[["self"],["self"]],["bool"]]],[11,"deserialize","","",14,[[["reader"]],["result",["readererror"]]]],[6,"ShortTransactionID","","",N,N],[8,"RepresentH256","","",N,N],[10,"h256","","",15,[[["self"]],["h256"]]],[8,"ReadAndHash","","",N,N],[10,"read_and_hash","","",16,[[["self"]],["result",["hasheddata","readererror"]]]],[11,"take","chain::hash","",17,N],[11,"reversed","","",17,[[["self"]],["h32"]]],[11,"size","","",17,[[],["usize"]]],[11,"is_zero","","",17,[[["self"]],["bool"]]],[11,"clone","chain::bytes","",18,[[["self"]],["bytes"]]],[11,"clone","chain::hash","",17,[[["self"]],["h32"]]],[11,"clone","","",19,[[["self"]],["h48"]]],[11,"clone","chain::bytes","",20,[[["self"]],["taggedbytes"]]],[11,"clone","chain::hash","",21,[[["self"]],["h520"]]],[11,"clone","chain::compact","",22,[[["self"]],["compact"]]],[11,"clone","chain::hash","",23,[[["self"]],["h264"]]],[11,"clone","","",24,[[["self"]],["h512"]]],[11,"clone","","",25,[[["self"]],["h256"]]],[11,"clone","","",26,[[["self"]],["h96"]]],[11,"clone","","",27,[[["self"]],["h160"]]],[11,"fmt","chain::bytes","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","chain::compact","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","chain::hash","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",26,[[["self"],["h96"]],["option",["ordering"]]]],[11,"partial_cmp","","",21,[[["self"],["h520"]],["option",["ordering"]]]],[11,"partial_cmp","","",27,[[["self"],["h160"]],["option",["ordering"]]]],[11,"partial_cmp","","",17,[[["self"],["h32"]],["option",["ordering"]]]],[11,"partial_cmp","","",25,[[["self"],["h256"]],["option",["ordering"]]]],[11,"partial_cmp","","",24,[[["self"],["h512"]],["option",["ordering"]]]],[11,"partial_cmp","","",19,[[["self"],["h48"]],["option",["ordering"]]]],[11,"partial_cmp","","",23,[[["self"],["h264"]],["option",["ordering"]]]],[11,"from_str","","",25,[[["str"]],["result",["h256"]]]],[11,"from_str","","",19,[[["str"]],["result",["h48"]]]],[11,"from_str","","",23,[[["str"]],["result",["h264"]]]],[11,"from_str","","",17,[[["str"]],["result",["h32"]]]],[11,"from_str","","",26,[[["str"]],["result",["h96"]]]],[11,"from_str","chain::bytes","",18,[[["str"]],["result",["bytes"]]]],[11,"from_str","chain::hash","",21,[[["str"]],["result",["h520"]]]],[11,"from_str","","",27,[[["str"]],["result",["h160"]]]],[11,"from_str","","",24,[[["str"]],["result",["h512"]]]],[11,"deref_mut","","",27,N],[11,"deref_mut","","",25,N],[11,"deref_mut","","",19,N],[11,"deref_mut","","",17,N],[11,"deref_mut","","",23,N],[11,"deref_mut","","",21,N],[11,"deref_mut","chain::bytes","",20,N],[11,"deref_mut","","",18,N],[11,"deref_mut","chain::hash","",24,N],[11,"deref_mut","","",26,N],[11,"default","","",27,[[],["h160"]]],[11,"default","","",21,[[],["h520"]]],[11,"default","","",23,[[],["h264"]]],[11,"default","","",19,[[],["h48"]]],[11,"default","","",17,[[],["h32"]]],[11,"default","","",25,[[],["h256"]]],[11,"default","chain::bytes","",18,[[],["bytes"]]],[11,"default","","",20,[[],["taggedbytes"]]],[11,"default","chain::hash","",26,[[],["h96"]]],[11,"default","","",24,[[],["h512"]]],[11,"write","chain::bytes","",18,N],[11,"flush","","",18,[[["self"]],["result",["error"]]]],[11,"hash","chain::hash","",17,N],[11,"hash","","",19,N],[11,"hash","","",24,N],[11,"hash","","",21,N],[11,"hash","","",23,N],[11,"hash","chain::bytes","",18,N],[11,"hash","chain::hash","",26,N],[11,"hash","","",27,N],[11,"hash","","",25,N],[11,"as_mut","chain::bytes","",18,N],[11,"as_mut","","",20,N],[11,"deref","chain::hash","",24,N],[11,"deref","chain::bytes","",20,N],[11,"deref","chain::hash","",17,N],[11,"deref","","",27,N],[11,"deref","","",23,N],[11,"deref","","",26,N],[11,"deref","","",25,N],[11,"deref","","",21,N],[11,"deref","chain::bytes","",18,N],[11,"deref","chain::hash","",19,N],[11,"heap_size_of_children","","",21,[[["self"]],["usize"]]],[11,"heap_size_of_children","chain::bytes","",18,[[["self"]],["usize"]]],[11,"heap_size_of_children","chain::hash","",24,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",25,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",26,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",23,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",19,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",17,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",27,[[["self"]],["usize"]]],[11,"as_ref","chain::bytes","",20,N],[11,"as_ref","chain::hash","",24,[[["self"]],["h512"]]],[11,"as_ref","","",23,[[["self"]],["h264"]]],[11,"as_ref","","",27,[[["self"]],["h160"]]],[11,"as_ref","","",21,[[["self"]],["h520"]]],[11,"as_ref","","",19,[[["self"]],["h48"]]],[11,"as_ref","chain::bytes","",18,N],[11,"as_ref","chain::hash","",17,[[["self"]],["h32"]]],[11,"as_ref","","",25,[[["self"]],["h256"]]],[11,"as_ref","","",26,[[["self"]],["h96"]]],[11,"from","","",21,[[["str"]],["h520"]]],[11,"from","chain::bytes","",18,N],[11,"from","chain::hash","",24,N],[11,"from","","",24,[[["str"]],["h512"]]],[11,"from","chain::bytes","",18,[[["vec",["u8"]]],["bytes"]]],[11,"from","chain::hash","",23,[[["u8"]],["h264"]]],[11,"from","","",26,[[["u8"]],["h96"]]],[11,"from","","",25,[[["str"]],["h256"]]],[11,"from","","",17,N],[11,"from","chain::compact","",22,[[["u32"]],["compact"]]],[11,"from","chain::hash","",26,N],[11,"from","chain::compact","",22,[[["u256"]],["compact"]]],[11,"from","chain::hash","",17,[[["u8"]],["h32"]]],[11,"from","","",23,N],[11,"from","","",19,[[["u8"]],["h48"]]],[11,"from","","",24,[[["u8"]],["h512"]]],[11,"from","","",23,N],[11,"from","","",17,N],[11,"from","","",21,[[["u8"]],["h520"]]],[11,"from","","",19,N],[11,"from","chain::bigint::uint","",3,[[["compact"]],["u256"]]],[11,"from","chain::hash","",21,N],[11,"from","","",25,N],[11,"from","","",26,N],[11,"from","","",17,[[["str"]],["h32"]]],[11,"from","","",26,[[["str"]],["h96"]]],[11,"from","chain::bytes","",18,[[["str"]],["bytes"]]],[11,"from","chain::hash","",19,N],[11,"from","","",25,[[["u8"]],["h256"]]],[11,"from","","",27,N],[11,"from","","",19,[[["str"]],["h48"]]],[11,"from","","",27,N],[11,"from","","",23,[[["str"]],["h264"]]],[11,"from","","",27,[[["u8"]],["h160"]]],[11,"from","","",21,N],[11,"from","","",27,[[["str"]],["h160"]]],[11,"from","","",24,N],[11,"from","","",25,N],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",27,[[["self"],["h160"]],["bool"]]],[11,"eq","","",23,[[["self"],["h264"]],["bool"]]],[11,"eq","chain::compact","",22,[[["self"],["compact"]],["bool"]]],[11,"ne","","",22,[[["self"],["compact"]],["bool"]]],[11,"eq","chain::hash","",24,[[["self"],["h512"]],["bool"]]],[11,"eq","chain::bytes","",20,[[["self"],["taggedbytes"]],["bool"]]],[11,"ne","","",20,[[["self"],["taggedbytes"]],["bool"]]],[11,"eq","","",18,[[["self"],["bytes"]],["bool"]]],[11,"ne","","",18,[[["self"],["bytes"]],["bool"]]],[11,"eq","chain::hash","",17,[[["self"],["h32"]],["bool"]]],[11,"eq","","",25,[[["self"],["h256"]],["bool"]]],[11,"eq","","",26,[[["self"],["h96"]],["bool"]]],[11,"eq","","",21,[[["self"],["h520"]],["bool"]]],[11,"eq","","",19,[[["self"],["h48"]],["bool"]]],[11,"add","chain::bigint::uint","",2,[[["self"],["u512"]],["u512"]]],[11,"add","","",3,[[["self"],["u256"]],["u256"]]],[11,"add","","",4,[[["self"],["u128"]],["u128"]]],[11,"clone","","",3,[[["self"]],["u256"]]],[11,"clone","","",2,[[["self"]],["u512"]]],[11,"clone","","",4,[[["self"]],["u128"]]],[11,"bitand","","",2,[[["self"],["u512"]],["u512"]]],[11,"bitand","","",3,[[["self"],["u256"]],["u256"]]],[11,"bitand","","",4,[[["self"],["u128"]],["u128"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",4,[[["self"],["u128"]],["option",["ordering"]]]],[11,"partial_cmp","","",2,[[["self"],["u512"]],["option",["ordering"]]]],[11,"partial_cmp","","",3,[[["self"],["u256"]],["option",["ordering"]]]],[11,"sub","","",2,[[["self"],["u512"]],["u512"]]],[11,"sub","","",4,[[["self"],["u128"]],["u128"]]],[11,"sub","","",3,[[["self"],["u256"]],["u256"]]],[11,"cmp","","",2,[[["self"],["u512"]],["ordering"]]],[11,"cmp","","",4,[[["self"],["u128"]],["ordering"]]],[11,"cmp","","",3,[[["self"],["u256"]],["ordering"]]],[11,"bitor","","",2,[[["self"],["u512"]],["u512"]]],[11,"bitor","","",3,[[["self"],["u256"]],["u256"]]],[11,"bitor","","",4,[[["self"],["u128"]],["u128"]]],[11,"from_str","","",3,[[["str"]],["result",["u256"]]]],[11,"from_str","","",4,[[["str"]],["result",["u128"]]]],[11,"from_str","","",2,[[["str"]],["result",["u512"]]]],[11,"shr","","",4,[[["self"],["usize"]],["u128"]]],[11,"shr","","",2,[[["self"],["usize"]],["u512"]]],[11,"shr","","",3,[[["self"],["usize"]],["u256"]]],[11,"default","","",4,[[],["u128"]]],[11,"default","","",3,[[],["u256"]]],[11,"default","","",2,[[],["u512"]]],[11,"rem","","",4,[[["self"],["u128"]],["u128"]]],[11,"rem","","",2,[[["self"],["u512"]],["u512"]]],[11,"rem","","",3,[[["self"],["u256"]],["u256"]]],[11,"from_dec_str","","",4,[[["str"]],["result",["u128","fromdecstrerr"]]]],[11,"low_u32","","",4,[[["self"]],["u32"]]],[11,"low_u64","","",4,[[["self"]],["u64"]]],[11,"as_u32","","Conversion to u32 with overflow checking",4,[[["self"]],["u32"]]],[11,"as_u64","","Conversion to u64 with overflow checking",4,[[["self"]],["u64"]]],[11,"is_zero","","",4,[[["self"]],["bool"]]],[11,"bits","","Return the least number of bits needed to represent the number",4,[[["self"]],["usize"]]],[11,"bit","","",4,[[["self"],["usize"]],["bool"]]],[11,"byte","","",4,[[["self"],["usize"]],["u8"]]],[11,"to_big_endian","","",4,N],[11,"to_little_endian","","",4,N],[11,"to_hex","","",4,[[["self"]],["string"]]],[11,"exp10","","",4,[[["usize"]],["u128"]]],[11,"zero","","",4,[[],["u128"]]],[11,"one","","",4,[[],["u128"]]],[11,"max_value","","",4,[[],["u128"]]],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",4,[[["self"],["u128"]],["u128"]]],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",4,N],[11,"overflowing_add","","Optimized instructions",4,N],[11,"overflowing_sub","","",4,N],[11,"overflowing_mul","","",4,N],[11,"overflowing_div","","",4,N],[11,"overflowing_rem","","",4,N],[11,"overflowing_neg","","",4,N],[11,"from_dec_str","","",3,[[["str"]],["result",["u256","fromdecstrerr"]]]],[11,"low_u32","","",3,[[["self"]],["u32"]]],[11,"low_u64","","",3,[[["self"]],["u64"]]],[11,"as_u32","","Conversion to u32 with overflow checking",3,[[["self"]],["u32"]]],[11,"as_u64","","Conversion to u64 with overflow checking",3,[[["self"]],["u64"]]],[11,"is_zero","","",3,[[["self"]],["bool"]]],[11,"bits","","Return the least number of bits needed to represent the number",3,[[["self"]],["usize"]]],[11,"bit","","",3,[[["self"],["usize"]],["bool"]]],[11,"byte","","",3,[[["self"],["usize"]],["u8"]]],[11,"to_big_endian","","",3,N],[11,"to_little_endian","","",3,N],[11,"to_hex","","",3,[[["self"]],["string"]]],[11,"exp10","","",3,[[["usize"]],["u256"]]],[11,"zero","","",3,[[],["u256"]]],[11,"one","","",3,[[],["u256"]]],[11,"max_value","","",3,[[],["u256"]]],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",3,[[["self"],["u256"]],["u256"]]],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",3,N],[11,"overflowing_add","","Optimized instructions",3,N],[11,"overflowing_sub","","",3,N],[11,"overflowing_mul","","",3,N],[11,"overflowing_div","","",3,N],[11,"overflowing_rem","","",3,N],[11,"overflowing_neg","","",3,N],[11,"from_dec_str","","",2,[[["str"]],["result",["u512","fromdecstrerr"]]]],[11,"low_u32","","",2,[[["self"]],["u32"]]],[11,"low_u64","","",2,[[["self"]],["u64"]]],[11,"as_u32","","Conversion to u32 with overflow checking",2,[[["self"]],["u32"]]],[11,"as_u64","","Conversion to u64 with overflow checking",2,[[["self"]],["u64"]]],[11,"is_zero","","",2,[[["self"]],["bool"]]],[11,"bits","","Return the least number of bits needed to represent the number",2,[[["self"]],["usize"]]],[11,"bit","","",2,[[["self"],["usize"]],["bool"]]],[11,"byte","","",2,[[["self"],["usize"]],["u8"]]],[11,"to_big_endian","","",2,N],[11,"to_little_endian","","",2,N],[11,"to_hex","","",2,[[["self"]],["string"]]],[11,"exp10","","",2,[[["usize"]],["u512"]]],[11,"zero","","",2,[[],["u512"]]],[11,"one","","",2,[[],["u512"]]],[11,"max_value","","",2,[[],["u512"]]],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",2,[[["self"],["u512"]],["u512"]]],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",2,N],[11,"overflowing_add","","Optimized instructions",2,N],[11,"overflowing_sub","","",2,N],[11,"overflowing_mul","","",2,N],[11,"overflowing_div","","",2,N],[11,"overflowing_rem","","",2,N],[11,"overflowing_neg","","",2,N],[11,"hash","","",4,N],[11,"hash","","",3,N],[11,"hash","","",2,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"mul","","",4,[[["self"],["u128"]],["u128"]]],[11,"mul","","",2,[[["self"],["u512"]],["u512"]]],[11,"mul","","",3,[[["self"],["u256"]],["u256"]]],[11,"bitxor","","",3,[[["self"],["u256"]],["u256"]]],[11,"bitxor","","",4,[[["self"],["u128"]],["u128"]]],[11,"bitxor","","",2,[[["self"],["u512"]],["u512"]]],[11,"heap_size_of_children","","",4,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",3,[[["self"]],["usize"]]],[11,"from","","",2,[[["i32"]],["u512"]]],[11,"from","","",3,[[["u128"]],["u256"]]],[11,"from","","",4,[[["u512"]],["u128"]]],[11,"from","","",3,[[["u64"]],["u256"]]],[11,"from","","",2,[[["str"]],["u512"]]],[11,"from","","",4,[[["i16"]],["u128"]]],[11,"from","","",2,[[["u16"]],["u512"]]],[11,"from","","",2,[[["usize"]],["u512"]]],[11,"from","","",2,[[["i16"]],["u512"]]],[11,"from","","",2,[[["u64"]],["u512"]]],[11,"from","","",4,[[["usize"]],["u128"]]],[11,"from","","",3,[[["i64"]],["u256"]]],[11,"from","","",4,[[["i8"]],["u128"]]],[11,"from","","",2,[[["u256"]],["u512"]]],[11,"from","","",2,[[["i8"]],["u512"]]],[11,"from","","",2,[[["i64"]],["u512"]]],[11,"from","","",3,N],[11,"from","","",4,N],[11,"from","","",3,[[["u512"]],["u256"]]],[11,"from","","",3,[[["u16"]],["u256"]]],[11,"from","","",3,[[["isize"]],["u256"]]],[11,"from","","",2,[[["isize"]],["u512"]]],[11,"from","","",4,[[["u256"]],["u128"]]],[11,"from","","",3,[[["u8"]],["u256"]]],[11,"from","","",4,[[["str"]],["u128"]]],[11,"from","","",4,[[["i32"]],["u128"]]],[11,"from","","",3,[[["u512"]],["u256"]]],[11,"from","","",2,[[["u8"]],["u512"]]],[11,"from","","",2,[[["u128"]],["u512"]]],[11,"from","","",3,[[["str"]],["u256"]]],[11,"from","","",3,[[["i32"]],["u256"]]],[11,"from","","",4,[[["u32"]],["u128"]]],[11,"from","","",3,[[["usize"]],["u256"]]],[11,"from","","",2,N],[11,"from","","",3,[[["i16"]],["u256"]]],[11,"from","","",4,[[["u64"]],["u128"]]],[11,"from","","",2,[[["u256"]],["u512"]]],[11,"from","","",2,[[["u32"]],["u512"]]],[11,"from","","",4,[[["u8"]],["u128"]]],[11,"from","","",3,[[["i8"]],["u256"]]],[11,"from","","",4,[[["i64"]],["u128"]]],[11,"from","","",4,[[["isize"]],["u128"]]],[11,"from","","",4,[[["u16"]],["u128"]]],[11,"from","","",3,[[["u32"]],["u256"]]],[11,"div","","",4,[[["self"],["u128"]],["u128"]]],[11,"div","","",2,[[["self"],["u512"]],["u512"]]],[11,"div","","",3,[[["self"],["u256"]],["u256"]]],[11,"shl","","",4,[[["self"],["usize"]],["u128"]]],[11,"shl","","",3,[[["self"],["usize"]],["u256"]]],[11,"shl","","",2,[[["self"],["usize"]],["u512"]]],[11,"not","","",3,[[["self"]],["u256"]]],[11,"not","","",2,[[["self"]],["u512"]]],[11,"not","","",4,[[["self"]],["u128"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",3,[[["self"],["u256"]],["bool"]]],[11,"ne","","",3,[[["self"],["u256"]],["bool"]]],[11,"eq","","",2,[[["self"],["u512"]],["bool"]]],[11,"ne","","",2,[[["self"],["u512"]],["bool"]]],[11,"eq","","",0,[[["self"],["fromdecstrerr"]],["bool"]]],[11,"eq","","",4,[[["self"],["u128"]],["bool"]]],[11,"ne","","",4,[[["self"],["u128"]],["bool"]]],[11,"serialize","chain::hash","",24,N],[11,"serialized_size","","",24,[[["self"]],["usize"]]],[11,"serialize","chain::compact","",22,N],[11,"serialize","chain::hash","",19,N],[11,"serialized_size","","",19,[[["self"]],["usize"]]],[11,"serialize","chain::bytes","",18,N],[11,"serialized_size","","",18,[[["self"]],["usize"]]],[11,"serialize","chain::hash","",23,N],[11,"serialized_size","","",23,[[["self"]],["usize"]]],[11,"serialize","","",17,N],[11,"serialized_size","","",17,[[["self"]],["usize"]]],[11,"serialize","","",25,N],[11,"serialized_size","","",25,[[["self"]],["usize"]]],[11,"serialize","","",27,N],[11,"serialized_size","","",27,[[["self"]],["usize"]]],[11,"serialize","","",21,N],[11,"serialized_size","","",21,[[["self"]],["usize"]]],[11,"serialize","","",26,N],[11,"serialized_size","","",26,[[["self"]],["usize"]]],[11,"deserialize","","",21,[[["reader"]],["result",["h520","error"]]]],[11,"deserialize","","",19,[[["reader"]],["result",["h48","error"]]]],[11,"deserialize","","",25,[[["reader"]],["result",["h256","error"]]]],[11,"deserialize","","",26,[[["reader"]],["result",["h96","error"]]]],[11,"deserialize","","",27,[[["reader"]],["result",["h160","error"]]]],[11,"deserialize","chain::bytes","",18,[[["reader"]],["result",["bytes","error"]]]],[11,"deserialize","chain::hash","",23,[[["reader"]],["result",["h264","error"]]]],[11,"deserialize","","",17,[[["reader"]],["result",["h32","error"]]]],[11,"deserialize","chain::compact","",22,[[["reader"]],["result",["compact","error"]]]],[11,"deserialize","chain::hash","",24,[[["reader"]],["result",["h512","error"]]]],[11,"take","","",19,N],[11,"reversed","","",19,[[["self"]],["h48"]]],[11,"size","","",19,[[],["usize"]]],[11,"is_zero","","",19,[[["self"]],["bool"]]],[11,"take","","",26,N],[11,"reversed","","",26,[[["self"]],["h96"]]],[11,"size","","",26,[[],["usize"]]],[11,"is_zero","","",26,[[["self"]],["bool"]]],[11,"take","","",27,N],[11,"reversed","","",27,[[["self"]],["h160"]]],[11,"size","","",27,[[],["usize"]]],[11,"is_zero","","",27,[[["self"]],["bool"]]],[11,"from_reversed_str","","",25,[[["str"]],["h256"]]],[11,"to_reversed_str","","",25,[[["self"]],["string"]]],[11,"take","","",25,N],[11,"reversed","","",25,[[["self"]],["h256"]]],[11,"size","","",25,[[],["usize"]]],[11,"is_zero","","",25,[[["self"]],["bool"]]],[11,"take","","",23,N],[11,"reversed","","",23,[[["self"]],["h264"]]],[11,"size","","",23,[[],["usize"]]],[11,"is_zero","","",23,[[["self"]],["bool"]]],[11,"take","","",24,N],[11,"reversed","","",24,[[["self"]],["h512"]]],[11,"size","","",24,[[],["usize"]]],[11,"is_zero","","",24,[[["self"]],["bool"]]],[11,"take","","",21,N],[11,"reversed","","",21,[[["self"]],["h520"]]],[11,"size","","",21,[[],["usize"]]],[11,"is_zero","","",21,[[["self"]],["bool"]]],[11,"new","chain::bytes","",18,[[],["bytes"]]],[11,"new_with_len","","",18,[[["usize"]],["bytes"]]],[11,"take","","",18,[[["self"]],["vec",["u8"]]]],[11,"len","","",18,[[["self"]],["usize"]]],[11,"append","","",18,N],[11,"split_off","","",18,[[["self"],["usize"]],["bytes"]]],[11,"new","","",20,[[["bytes"]],["taggedbytes"]]],[11,"into_raw","","",20,[[["self"]],["bytes"]]],[11,"full_mul","chain::bigint::uint","Multiplies two 256-bit integers to produce full 512-bit integer No overflow possible",3,[[["self"],["u256"]],["u512"]]],[11,"new","chain::compact","",22,[[["u32"]],["compact"]]],[11,"max_value","","",22,[[],["compact"]]],[11,"to_u256","","Computes the target [0, T] that a blockhash must land in to be valid Returns value in error, if there is an overflow or its negative value",22,[[["self"]],["result",["u256","u256"]]]],[11,"from_u256","","",22,[[["u256"]],["compact"]]],[11,"to_f64","","",22,[[["self"]],["f64"]]]],"paths":[[4,"FromDecStrErr"],[8,"Uint"],[3,"U512"],[3,"U256"],[3,"U128"],[3,"Block"],[3,"BlockHeader"],[3,"Transaction"],[3,"TransactionInput"],[3,"TransactionOutput"],[3,"OutPoint"],[3,"HashedData"],[3,"IndexedBlock"],[3,"IndexedBlockHeader"],[3,"IndexedTransaction"],[8,"RepresentH256"],[8,"ReadAndHash"],[3,"H32"],[3,"Bytes"],[3,"H48"],[3,"TaggedBytes"],[3,"H520"],[3,"Compact"],[3,"H264"],[3,"H512"],[3,"H256"],[3,"H96"],[3,"H160"]]};
searchIndex["db"]={"doc":"","items":[[0,"hash","db","Fixed-size hashes",N,N],[3,"H32","db::hash","",N,N],[3,"H48","","",N,N],[3,"H96","","",N,N],[3,"H160","","",N,N],[3,"H256","","",N,N],[3,"H264","","",N,N],[3,"H512","","",N,N],[3,"H520","","",N,N],[0,"bytes","db","Wrapper around `Vec<u8>`",N,N],[3,"Bytes","db::bytes","Wrapper around `Vec<u8>`",N,N],[3,"TaggedBytes","","Wrapper around `Vec<u8>` which represent associated type",N,N],[3,"BlockChainDatabase","db","",N,N],[3,"ForkChainDatabase","","",N,N],[0,"kv","","",N,N],[3,"CacheDatabase","db::kv","",N,N],[3,"DiskDatabase","","Key-Value database.",N,N],[3,"DatabaseConfig","","Database configuration",N,N],[12,"max_open_files","","Max number of open files.",0,N],[12,"cache_sizes","","Cache sizes (in MiB) for specific columns.",0,N],[12,"bloom_filters","","Specific number of bloom filter bits, if any",0,N],[12,"compaction","","Compaction profile",0,N],[12,"columns","","Set number of columns",0,N],[12,"wal","","Should we keep WAL enabled?",0,N],[3,"CompactionProfile","","Compaction profile for the database settings",N,N],[12,"initial_file_size","","L0-L1 target file size",1,N],[12,"file_size_multiplier","","L2-LN target file size multiplier",1,N],[12,"write_rate_limit","","rate limiter for background flushes and compactions, bytes/sec, if any",1,N],[3,"MemoryDatabase","","",N,N],[3,"SharedMemoryDatabase","","",N,N],[3,"OverlayDatabase","","",N,N],[3,"AutoFlushingOverlayDatabase","","",N,N],[3,"RawTransaction","","",N,N],[12,"operations","","",2,N],[3,"Transaction","","",N,N],[12,"operations","","",3,N],[3,"RawKeyValue","","",N,N],[12,"location","","",4,N],[12,"key","","",4,N],[12,"value","","",4,N],[3,"RawKey","","",N,N],[12,"location","","",5,N],[12,"key","","",5,N],[4,"RawOperation","","",N,N],[13,"Insert","","",6,N],[13,"Delete","","",6,N],[4,"Operation","","",N,N],[13,"Insert","","",7,N],[13,"Delete","","",7,N],[4,"Location","","",N,N],[13,"DB","","",8,N],[13,"Column","","",8,N],[4,"KeyState","","",N,N],[13,"Insert","","",9,N],[13,"Delete","","",9,N],[13,"Unknown","","",9,N],[4,"Key","","",N,N],[13,"Meta","","",10,N],[13,"BlockHash","","",10,N],[13,"BlockHeader","","",10,N],[13,"BlockTransactions","","",10,N],[13,"Transaction","","",10,N],[13,"TransactionMeta","","",10,N],[13,"BlockNumber","","",10,N],[13,"Configuration","","",10,N],[4,"Value","","",N,N],[13,"Meta","","",11,N],[13,"BlockHash","","",11,N],[13,"BlockHeader","","",11,N],[13,"BlockTransactions","","",11,N],[13,"Transaction","","",11,N],[13,"TransactionMeta","","",11,N],[13,"BlockNumber","","",11,N],[13,"Configuration","","",11,N],[4,"KeyValue","","",N,N],[13,"Meta","","",12,N],[13,"BlockHash","","",12,N],[13,"BlockHeader","","",12,N],[13,"BlockTransactions","","",12,N],[13,"Transaction","","",12,N],[13,"TransactionMeta","","",12,N],[13,"BlockNumber","","",12,N],[13,"Configuration","","",12,N],[11,"new","","",13,[[["t"]],["self"]]],[11,"write","","",13,[[["self"],["transaction"]],["result",["string"]]]],[11,"get","","",13,[[["self"],["key"]],["result",["keystate","string"]]]],[11,"clone","","",1,[[["self"]],["compactionprofile"]]],[11,"eq","","",1,[[["self"],["compactionprofile"]],["bool"]]],[11,"ne","","",1,[[["self"],["compactionprofile"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","Default profile suitable for most storage",1,[[],["compactionprofile"]]],[11,"ssd","","Default profile suitable for SSD storage",1,[[],["compactionprofile"]]],[11,"hdd","","Slow HDD compaction profile",1,[[],["compactionprofile"]]],[11,"clone","","",0,[[["self"]],["databaseconfig"]]],[11,"with_columns","","Create new `DatabaseConfig` with default parameters and specified set of columns. Note that cache sizes must be explicitly set.",0,[[["option",["u32"]]],["self"]]],[11,"set_cache","","Set the column cache size in MiB.",0,[[["self"],["option",["u32"]],["usize"]]]],[11,"default","","",0,[[],["databaseconfig"]]],[11,"write","","",14,[[["self"],["transaction"]],["result",["string"]]]],[11,"get","","",14,[[["self"],["key"]],["result",["keystate","string"]]]],[11,"open_default","","Open database with default settings.",14,[[["p"]],["result",["database","string"]]]],[11,"open","","Open database file. Creates if it does not exist.",14,[[["databaseconfig"],["p"]],["result",["database","string"]]]],[11,"write","","Commit transaction to database.",14,[[["self"],["rawtransaction"]],["result",["string"]]]],[11,"get","","Get value by key.",14,[[["self"],["rawkey"]],["result",["option","string"]]]],[11,"close","","Close the database",14,[[["self"]]]],[11,"iter","","",14,[[["self"],["location"]],["databaseiterator"]]],[11,"default","","",15,[[],["memorydatabase"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"drain_transaction","","",15,[[["self"]],["transaction"]]],[11,"write","","",15,[[["self"],["transaction"]],["result",["string"]]]],[11,"get","","",15,[[["self"],["key"]],["result",["keystate","string"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"default","","",16,[[],["self"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"write","","",16,[[["self"],["transaction"]],["result",["string"]]]],[11,"get","","",16,[[["self"],["key"]],["result",["keystate","string"]]]],[11,"new","","",17,[[["t"]],["self"]]],[11,"flush","","",17,[[["self"]],["result",["string"]]]],[11,"write","","",17,[[["self"],["transaction"]],["result",["string"]]]],[11,"get","","",17,[[["self"],["key"]],["result",["keystate","string"]]]],[11,"new","","",18,[[["t"],["usize"]],["self"]]],[11,"write","","",18,[[["self"],["transaction"]],["result",["string"]]]],[11,"get","","",18,[[["self"],["key"]],["result",["keystate","string"]]]],[11,"drop","","",18,[[["self"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["value"]]],[11,"for_key","","",11,N],[11,"as_meta","","",11,[[["self"]],["option",["bytes"]]]],[11,"as_block_hash","","",11,[[["self"]],["option",["h256"]]]],[11,"as_block_header","","",11,[[["self"]],["option",["blockheader"]]]],[11,"as_block_transactions","","",11,[[["self"]],["option",["list"]]]],[11,"as_transaction","","",11,[[["self"]],["option",["chaintransaction"]]]],[11,"as_transaction_meta","","",11,[[["self"]],["option",["transactionmeta"]]]],[11,"as_block_number","","",11,[[["self"]],["option",["u32"]]]],[11,"as_configuration","","",11,[[["self"]],["option",["bytes"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["keystate"]]],[11,"default","","",9,[[],["self"]]],[11,"map","","",9,[[["self"],["f"]],["keystate"]]],[11,"into_option","","",9,[[["self"]],["option"]]],[11,"into_operation","","",9,[[["self"],["k"],["i"],["d"]],["option",["operation"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["self"]]],[11,"new","","",3,[[],["self"]]],[11,"insert","","",3,[[["self"],["keyvalue"]]]],[11,"delete","","",3,[[["self"],["key"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["location"]],["bool"]]],[11,"ne","","",8,[[["self"],["location"]],["bool"]]],[11,"hash","","",8,N],[11,"clone","","",8,[[["self"]],["location"]]],[11,"from","","",8,[[["u32"]],["location"]]],[11,"from","","",4,[[["keyvalue"]],["self"]]],[11,"new","","",5,[[["location"],["b"]],["self"]]],[11,"from","","",5,[[["key"]],["self"]]],[11,"from","","",6,[[["operation"]],["self"]]],[11,"from","","",2,[[["transaction"]],["self"]]],[11,"default","","",2,[[],["self"]]],[11,"new","","",2,[[],["rawtransaction"]]],[11,"insert_raw","","",2,N],[11,"delete_raw","","",2,N],[17,"COL_COUNT","","",N,N],[17,"COL_META","","",N,N],[17,"COL_BLOCK_HASHES","","",N,N],[17,"COL_BLOCK_HEADERS","","",N,N],[17,"COL_BLOCK_TRANSACTIONS","","",N,N],[17,"COL_TRANSACTIONS","","",N,N],[17,"COL_TRANSACTIONS_META","","",N,N],[17,"COL_BLOCK_NUMBERS","","",N,N],[8,"KeyValueDatabase","","",N,N],[10,"write","","",19,[[["self"],["transaction"]],["result",["string"]]]],[10,"get","","",19,[[["self"],["key"]],["result",["keystate","string"]]]],[11,"store","db","",20,[[["self"]],["store"]]],[11,"flush","","",20,[[["self"]],["result",["error"]]]],[11,"open_at_path","","",21,[[["p"],["usize"]],["result",["error"]]]],[11,"init_test_chain","","",21,[[["vec",["indexedblock"]]],["self"]]],[11,"open_with_cache","","",21,[[["t"]],["self"]]],[11,"open","","",21,[[["t"]],["self"]]],[11,"best_block","","",21,[[["self"]],["bestblock"]]],[11,"fork","","",21,[[["self"],["sidechainorigin"]],["result",["forkchaindatabase","error"]]]],[11,"switch_to_fork","","",21,[[["self"],["forkchaindatabase"]],["result",["error"]]]],[11,"block_origin","","",21,[[["self"],["indexedblockheader"]],["result",["blockorigin","error"]]]],[11,"insert","","",21,[[["self"],["indexedblock"]],["result",["error"]]]],[11,"canonize","","Marks block as a new best block. Block must be already inserted into db, and it's parent must be current best block. Updates meta data.",21,[[["self"],["h256"]],["result",["error"]]]],[11,"decanonize","","",21,[[["self"]],["result",["h256","error"]]]],[11,"block_header_bytes","","",21,[[["self"],["blockref"]],["option",["bytes"]]]],[11,"block_header","","",21,[[["self"],["blockref"]],["option",["blockheader"]]]],[11,"block_number","","",21,[[["self"],["h256"]],["option",["u32"]]]],[11,"block_hash","","",21,[[["self"],["u32"]],["option",["h256"]]]],[11,"block","","",21,[[["self"],["blockref"]],["option",["block"]]]],[11,"contains_block","","",21,[[["self"],["blockref"]],["bool"]]],[11,"block_transaction_hashes","","",21,[[["self"],["blockref"]],["vec",["h256"]]]],[11,"block_transactions","","",21,[[["self"],["blockref"]],["vec",["transaction"]]]],[11,"indexed_block_header","","",21,[[["self"],["blockref"]],["option",["indexedblockheader"]]]],[11,"indexed_block","","",21,[[["self"],["blockref"]],["option",["indexedblock"]]]],[11,"indexed_block_transactions","","",21,[[["self"],["blockref"]],["vec",["indexedtransaction"]]]],[11,"transaction_meta","","",21,[[["self"],["h256"]],["option",["transactionmeta"]]]],[11,"transaction_bytes","","",21,[[["self"],["h256"]],["option",["bytes"]]]],[11,"transaction","","",21,[[["self"],["h256"]],["option",["transaction"]]]],[11,"transaction_output","","",21,[[["self"],["outpoint"],["usize"]],["option",["transactionoutput"]]]],[11,"is_spent","","",21,[[["self"],["outpoint"]],["bool"]]],[11,"insert","","",21,[[["self"],["indexedblock"]],["result",["error"]]]],[11,"rollback_best","","",21,[[["self"]],["result",["h256","error"]]]],[11,"canonize","","",21,[[["self"],["h256"]],["result",["error"]]]],[11,"decanonize","","",21,[[["self"]],["result",["h256","error"]]]],[11,"block_origin","","",21,[[["self"],["indexedblockheader"]],["result",["blockorigin","error"]]]],[11,"fork","","",21,[[["self"],["sidechainorigin"]],["result",["box","error"]]]],[11,"switch_to_fork","","",21,[[["self"],["box",["forkchain"]]],["result",["error"]]]],[11,"as_store","","",21,[[["self"]],["store"]]],[11,"best_block","","",21,[[["self"]],["bestblock"]]],[11,"best_header","","get best header",21,[[["self"]],["blockheader"]]],[11,"difficulty","","get blockchain difficulty",21,[[["self"]],["f64"]]],[11,"consensus_fork","","",21,[[["self"]],["result",["option","error"]]]],[11,"set_consensus_fork","","",21,[[["self"],["str"]],["result",["error"]]]],[11,"take","db::hash","",22,N],[11,"reversed","","",22,[[["self"]],["h32"]]],[11,"size","","",22,[[],["usize"]]],[11,"is_zero","","",22,[[["self"]],["bool"]]],[11,"clone","db::bytes","",23,[[["self"]],["bytes"]]],[11,"clone","db::hash","",22,[[["self"]],["h32"]]],[11,"clone","","",24,[[["self"]],["h48"]]],[11,"clone","db::bytes","",25,[[["self"]],["taggedbytes"]]],[11,"clone","db::hash","",26,[[["self"]],["h520"]]],[11,"clone","","",27,[[["self"]],["h264"]]],[11,"clone","","",28,[[["self"]],["h512"]]],[11,"clone","","",29,[[["self"]],["h256"]]],[11,"clone","","",30,[[["self"]],["h96"]]],[11,"clone","","",31,[[["self"]],["h160"]]],[11,"fmt","db::bytes","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","db::hash","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",30,[[["self"],["h96"]],["option",["ordering"]]]],[11,"partial_cmp","","",26,[[["self"],["h520"]],["option",["ordering"]]]],[11,"partial_cmp","","",31,[[["self"],["h160"]],["option",["ordering"]]]],[11,"partial_cmp","","",22,[[["self"],["h32"]],["option",["ordering"]]]],[11,"partial_cmp","","",29,[[["self"],["h256"]],["option",["ordering"]]]],[11,"partial_cmp","","",28,[[["self"],["h512"]],["option",["ordering"]]]],[11,"partial_cmp","","",24,[[["self"],["h48"]],["option",["ordering"]]]],[11,"partial_cmp","","",27,[[["self"],["h264"]],["option",["ordering"]]]],[11,"from_str","","",29,[[["str"]],["result",["h256"]]]],[11,"from_str","","",24,[[["str"]],["result",["h48"]]]],[11,"from_str","","",27,[[["str"]],["result",["h264"]]]],[11,"from_str","","",22,[[["str"]],["result",["h32"]]]],[11,"from_str","","",30,[[["str"]],["result",["h96"]]]],[11,"from_str","db::bytes","",23,[[["str"]],["result",["bytes"]]]],[11,"from_str","db::hash","",26,[[["str"]],["result",["h520"]]]],[11,"from_str","","",31,[[["str"]],["result",["h160"]]]],[11,"from_str","","",28,[[["str"]],["result",["h512"]]]],[11,"deref_mut","","",31,N],[11,"deref_mut","","",29,N],[11,"deref_mut","","",24,N],[11,"deref_mut","","",22,N],[11,"deref_mut","","",27,N],[11,"deref_mut","","",26,N],[11,"deref_mut","db::bytes","",25,N],[11,"deref_mut","","",23,N],[11,"deref_mut","db::hash","",28,N],[11,"deref_mut","","",30,N],[11,"default","","",31,[[],["h160"]]],[11,"default","","",26,[[],["h520"]]],[11,"default","","",27,[[],["h264"]]],[11,"default","","",24,[[],["h48"]]],[11,"default","","",22,[[],["h32"]]],[11,"default","","",29,[[],["h256"]]],[11,"default","db::bytes","",23,[[],["bytes"]]],[11,"default","","",25,[[],["taggedbytes"]]],[11,"default","db::hash","",30,[[],["h96"]]],[11,"default","","",28,[[],["h512"]]],[11,"write","db::bytes","",23,N],[11,"flush","","",23,[[["self"]],["result",["error"]]]],[11,"hash","db::hash","",22,N],[11,"hash","","",24,N],[11,"hash","","",28,N],[11,"hash","","",26,N],[11,"hash","","",27,N],[11,"hash","db::bytes","",23,N],[11,"hash","db::hash","",30,N],[11,"hash","","",31,N],[11,"hash","","",29,N],[11,"as_mut","db::bytes","",23,N],[11,"as_mut","","",25,N],[11,"deref","db::hash","",28,N],[11,"deref","db::bytes","",25,N],[11,"deref","db::hash","",22,N],[11,"deref","","",31,N],[11,"deref","","",27,N],[11,"deref","","",30,N],[11,"deref","","",29,N],[11,"deref","","",26,N],[11,"deref","db::bytes","",23,N],[11,"deref","db::hash","",24,N],[11,"heap_size_of_children","","",26,[[["self"]],["usize"]]],[11,"heap_size_of_children","db::bytes","",23,[[["self"]],["usize"]]],[11,"heap_size_of_children","db::hash","",28,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",29,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",30,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",27,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",24,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",22,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",31,[[["self"]],["usize"]]],[11,"as_ref","db::bytes","",25,N],[11,"as_ref","db::hash","",28,[[["self"]],["h512"]]],[11,"as_ref","","",27,[[["self"]],["h264"]]],[11,"as_ref","","",31,[[["self"]],["h160"]]],[11,"as_ref","","",26,[[["self"]],["h520"]]],[11,"as_ref","","",24,[[["self"]],["h48"]]],[11,"as_ref","db::bytes","",23,N],[11,"as_ref","db::hash","",22,[[["self"]],["h32"]]],[11,"as_ref","","",29,[[["self"]],["h256"]]],[11,"as_ref","","",30,[[["self"]],["h96"]]],[11,"from","","",26,[[["str"]],["h520"]]],[11,"from","db::bytes","",23,N],[11,"from","db::hash","",28,N],[11,"from","","",28,[[["str"]],["h512"]]],[11,"from","db::bytes","",23,[[["vec",["u8"]]],["bytes"]]],[11,"from","db::hash","",27,[[["u8"]],["h264"]]],[11,"from","","",30,[[["u8"]],["h96"]]],[11,"from","","",29,[[["str"]],["h256"]]],[11,"from","","",22,N],[11,"from","","",30,N],[11,"from","","",22,[[["u8"]],["h32"]]],[11,"from","","",27,N],[11,"from","","",24,[[["u8"]],["h48"]]],[11,"from","","",28,[[["u8"]],["h512"]]],[11,"from","","",27,N],[11,"from","","",22,N],[11,"from","","",26,[[["u8"]],["h520"]]],[11,"from","","",24,N],[11,"from","","",26,N],[11,"from","","",29,N],[11,"from","","",30,N],[11,"from","","",22,[[["str"]],["h32"]]],[11,"from","","",30,[[["str"]],["h96"]]],[11,"from","db::bytes","",23,[[["str"]],["bytes"]]],[11,"from","db::hash","",24,N],[11,"from","","",29,[[["u8"]],["h256"]]],[11,"from","","",31,N],[11,"from","","",24,[[["str"]],["h48"]]],[11,"from","","",31,N],[11,"from","","",27,[[["str"]],["h264"]]],[11,"from","","",31,[[["u8"]],["h160"]]],[11,"from","","",26,N],[11,"from","","",31,[[["str"]],["h160"]]],[11,"from","","",28,N],[11,"from","","",29,N],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",31,[[["self"],["h160"]],["bool"]]],[11,"eq","","",27,[[["self"],["h264"]],["bool"]]],[11,"eq","","",28,[[["self"],["h512"]],["bool"]]],[11,"eq","db::bytes","",25,[[["self"],["taggedbytes"]],["bool"]]],[11,"ne","","",25,[[["self"],["taggedbytes"]],["bool"]]],[11,"eq","","",23,[[["self"],["bytes"]],["bool"]]],[11,"ne","","",23,[[["self"],["bytes"]],["bool"]]],[11,"eq","db::hash","",22,[[["self"],["h32"]],["bool"]]],[11,"eq","","",29,[[["self"],["h256"]],["bool"]]],[11,"eq","","",30,[[["self"],["h96"]],["bool"]]],[11,"eq","","",26,[[["self"],["h520"]],["bool"]]],[11,"eq","","",24,[[["self"],["h48"]],["bool"]]],[11,"serialize","","",28,N],[11,"serialized_size","","",28,[[["self"]],["usize"]]],[11,"serialize","","",24,N],[11,"serialized_size","","",24,[[["self"]],["usize"]]],[11,"serialize","db::bytes","",23,N],[11,"serialized_size","","",23,[[["self"]],["usize"]]],[11,"serialize","db::hash","",27,N],[11,"serialized_size","","",27,[[["self"]],["usize"]]],[11,"serialize","","",22,N],[11,"serialized_size","","",22,[[["self"]],["usize"]]],[11,"serialize","","",29,N],[11,"serialized_size","","",29,[[["self"]],["usize"]]],[11,"serialize","","",31,N],[11,"serialized_size","","",31,[[["self"]],["usize"]]],[11,"serialize","","",26,N],[11,"serialized_size","","",26,[[["self"]],["usize"]]],[11,"serialize","","",30,N],[11,"serialized_size","","",30,[[["self"]],["usize"]]],[11,"deserialize","","",26,[[["reader"]],["result",["h520","error"]]]],[11,"deserialize","","",24,[[["reader"]],["result",["h48","error"]]]],[11,"deserialize","","",29,[[["reader"]],["result",["h256","error"]]]],[11,"deserialize","","",30,[[["reader"]],["result",["h96","error"]]]],[11,"deserialize","","",31,[[["reader"]],["result",["h160","error"]]]],[11,"deserialize","db::bytes","",23,[[["reader"]],["result",["bytes","error"]]]],[11,"deserialize","db::hash","",27,[[["reader"]],["result",["h264","error"]]]],[11,"deserialize","","",22,[[["reader"]],["result",["h32","error"]]]],[11,"deserialize","","",28,[[["reader"]],["result",["h512","error"]]]],[11,"take","","",24,N],[11,"reversed","","",24,[[["self"]],["h48"]]],[11,"size","","",24,[[],["usize"]]],[11,"is_zero","","",24,[[["self"]],["bool"]]],[11,"take","","",30,N],[11,"reversed","","",30,[[["self"]],["h96"]]],[11,"size","","",30,[[],["usize"]]],[11,"is_zero","","",30,[[["self"]],["bool"]]],[11,"take","","",31,N],[11,"reversed","","",31,[[["self"]],["h160"]]],[11,"size","","",31,[[],["usize"]]],[11,"is_zero","","",31,[[["self"]],["bool"]]],[11,"from_reversed_str","","",29,[[["str"]],["h256"]]],[11,"to_reversed_str","","",29,[[["self"]],["string"]]],[11,"take","","",29,N],[11,"reversed","","",29,[[["self"]],["h256"]]],[11,"size","","",29,[[],["usize"]]],[11,"is_zero","","",29,[[["self"]],["bool"]]],[11,"take","","",27,N],[11,"reversed","","",27,[[["self"]],["h264"]]],[11,"size","","",27,[[],["usize"]]],[11,"is_zero","","",27,[[["self"]],["bool"]]],[11,"take","","",28,N],[11,"reversed","","",28,[[["self"]],["h512"]]],[11,"size","","",28,[[],["usize"]]],[11,"is_zero","","",28,[[["self"]],["bool"]]],[11,"take","","",26,N],[11,"reversed","","",26,[[["self"]],["h520"]]],[11,"size","","",26,[[],["usize"]]],[11,"is_zero","","",26,[[["self"]],["bool"]]],[11,"new","db::bytes","",23,[[],["bytes"]]],[11,"new_with_len","","",23,[[["usize"]],["bytes"]]],[11,"take","","",23,[[["self"]],["vec",["u8"]]]],[11,"len","","",23,[[["self"]],["usize"]]],[11,"append","","",23,N],[11,"split_off","","",23,[[["self"],["usize"]],["bytes"]]],[11,"new","","",25,[[["bytes"]],["taggedbytes"]]],[11,"into_raw","","",25,[[["self"]],["bytes"]]]],"paths":[[3,"DatabaseConfig"],[3,"CompactionProfile"],[3,"RawTransaction"],[3,"Transaction"],[3,"RawKeyValue"],[3,"RawKey"],[4,"RawOperation"],[4,"Operation"],[4,"Location"],[4,"KeyState"],[4,"Key"],[4,"Value"],[4,"KeyValue"],[3,"CacheDatabase"],[3,"DiskDatabase"],[3,"MemoryDatabase"],[3,"SharedMemoryDatabase"],[3,"OverlayDatabase"],[3,"AutoFlushingOverlayDatabase"],[8,"KeyValueDatabase"],[3,"ForkChainDatabase"],[3,"BlockChainDatabase"],[3,"H32"],[3,"Bytes"],[3,"H48"],[3,"TaggedBytes"],[3,"H520"],[3,"H264"],[3,"H512"],[3,"H256"],[3,"H96"],[3,"H160"]]};
searchIndex["import"]={"doc":"Bitcoind blockchain database importer","items":[[0,"hash","import","Fixed-size hashes",N,N],[3,"H32","import::hash","",N,N],[3,"H48","","",N,N],[3,"H96","","",N,N],[3,"H160","","",N,N],[3,"H256","","",N,N],[3,"H264","","",N,N],[3,"H512","","",N,N],[3,"H520","","",N,N],[0,"bytes","import","Wrapper around `Vec<u8>`",N,N],[3,"Bytes","import::bytes","Wrapper around `Vec<u8>`",N,N],[3,"TaggedBytes","","Wrapper around `Vec<u8>` which represent associated type",N,N],[3,"BlkDir","import","Bitcoind database blocks iterator",N,N],[5,"open_blk_dir","","Creates iterator over bitcoind database blocks",N,[[["p"]],["result",["blkdir","error"]]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"take","import::hash","",1,N],[11,"reversed","","",1,[[["self"]],["h32"]]],[11,"size","","",1,[[],["usize"]]],[11,"is_zero","","",1,[[["self"]],["bool"]]],[11,"clone","import::bytes","",2,[[["self"]],["bytes"]]],[11,"clone","import::hash","",1,[[["self"]],["h32"]]],[11,"clone","","",3,[[["self"]],["h48"]]],[11,"clone","import::bytes","",4,[[["self"]],["taggedbytes"]]],[11,"clone","import::hash","",5,[[["self"]],["h520"]]],[11,"clone","","",6,[[["self"]],["h264"]]],[11,"clone","","",7,[[["self"]],["h512"]]],[11,"clone","","",8,[[["self"]],["h256"]]],[11,"clone","","",9,[[["self"]],["h96"]]],[11,"clone","","",10,[[["self"]],["h160"]]],[11,"fmt","import::bytes","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","import::hash","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",9,[[["self"],["h96"]],["option",["ordering"]]]],[11,"partial_cmp","","",5,[[["self"],["h520"]],["option",["ordering"]]]],[11,"partial_cmp","","",10,[[["self"],["h160"]],["option",["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["h32"]],["option",["ordering"]]]],[11,"partial_cmp","","",8,[[["self"],["h256"]],["option",["ordering"]]]],[11,"partial_cmp","","",7,[[["self"],["h512"]],["option",["ordering"]]]],[11,"partial_cmp","","",3,[[["self"],["h48"]],["option",["ordering"]]]],[11,"partial_cmp","","",6,[[["self"],["h264"]],["option",["ordering"]]]],[11,"from_str","","",8,[[["str"]],["result",["h256"]]]],[11,"from_str","","",3,[[["str"]],["result",["h48"]]]],[11,"from_str","","",6,[[["str"]],["result",["h264"]]]],[11,"from_str","","",1,[[["str"]],["result",["h32"]]]],[11,"from_str","","",9,[[["str"]],["result",["h96"]]]],[11,"from_str","import::bytes","",2,[[["str"]],["result",["bytes"]]]],[11,"from_str","import::hash","",5,[[["str"]],["result",["h520"]]]],[11,"from_str","","",10,[[["str"]],["result",["h160"]]]],[11,"from_str","","",7,[[["str"]],["result",["h512"]]]],[11,"deref_mut","","",10,N],[11,"deref_mut","","",8,N],[11,"deref_mut","","",3,N],[11,"deref_mut","","",1,N],[11,"deref_mut","","",6,N],[11,"deref_mut","","",5,N],[11,"deref_mut","import::bytes","",4,N],[11,"deref_mut","","",2,N],[11,"deref_mut","import::hash","",7,N],[11,"deref_mut","","",9,N],[11,"default","","",10,[[],["h160"]]],[11,"default","","",5,[[],["h520"]]],[11,"default","","",6,[[],["h264"]]],[11,"default","","",3,[[],["h48"]]],[11,"default","","",1,[[],["h32"]]],[11,"default","","",8,[[],["h256"]]],[11,"default","import::bytes","",2,[[],["bytes"]]],[11,"default","","",4,[[],["taggedbytes"]]],[11,"default","import::hash","",9,[[],["h96"]]],[11,"default","","",7,[[],["h512"]]],[11,"write","import::bytes","",2,N],[11,"flush","","",2,[[["self"]],["result",["error"]]]],[11,"hash","import::hash","",1,N],[11,"hash","","",3,N],[11,"hash","","",7,N],[11,"hash","","",5,N],[11,"hash","","",6,N],[11,"hash","import::bytes","",2,N],[11,"hash","import::hash","",9,N],[11,"hash","","",10,N],[11,"hash","","",8,N],[11,"as_mut","import::bytes","",2,N],[11,"as_mut","","",4,N],[11,"deref","import::hash","",7,N],[11,"deref","import::bytes","",4,N],[11,"deref","import::hash","",1,N],[11,"deref","","",10,N],[11,"deref","","",6,N],[11,"deref","","",9,N],[11,"deref","","",8,N],[11,"deref","","",5,N],[11,"deref","import::bytes","",2,N],[11,"deref","import::hash","",3,N],[11,"heap_size_of_children","","",5,[[["self"]],["usize"]]],[11,"heap_size_of_children","import::bytes","",2,[[["self"]],["usize"]]],[11,"heap_size_of_children","import::hash","",7,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",8,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",9,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",6,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",3,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",1,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",10,[[["self"]],["usize"]]],[11,"as_ref","import::bytes","",4,N],[11,"as_ref","import::hash","",7,[[["self"]],["h512"]]],[11,"as_ref","","",6,[[["self"]],["h264"]]],[11,"as_ref","","",10,[[["self"]],["h160"]]],[11,"as_ref","","",5,[[["self"]],["h520"]]],[11,"as_ref","","",3,[[["self"]],["h48"]]],[11,"as_ref","import::bytes","",2,N],[11,"as_ref","import::hash","",1,[[["self"]],["h32"]]],[11,"as_ref","","",8,[[["self"]],["h256"]]],[11,"as_ref","","",9,[[["self"]],["h96"]]],[11,"from","","",5,[[["str"]],["h520"]]],[11,"from","import::bytes","",2,N],[11,"from","import::hash","",7,N],[11,"from","","",7,[[["str"]],["h512"]]],[11,"from","import::bytes","",2,[[["vec",["u8"]]],["bytes"]]],[11,"from","import::hash","",6,[[["u8"]],["h264"]]],[11,"from","","",9,[[["u8"]],["h96"]]],[11,"from","","",8,[[["str"]],["h256"]]],[11,"from","","",1,N],[11,"from","","",9,N],[11,"from","","",1,[[["u8"]],["h32"]]],[11,"from","","",6,N],[11,"from","","",3,[[["u8"]],["h48"]]],[11,"from","","",7,[[["u8"]],["h512"]]],[11,"from","","",6,N],[11,"from","","",1,N],[11,"from","","",5,[[["u8"]],["h520"]]],[11,"from","","",3,N],[11,"from","","",5,N],[11,"from","","",8,N],[11,"from","","",9,N],[11,"from","","",1,[[["str"]],["h32"]]],[11,"from","","",9,[[["str"]],["h96"]]],[11,"from","import::bytes","",2,[[["str"]],["bytes"]]],[11,"from","import::hash","",3,N],[11,"from","","",8,[[["u8"]],["h256"]]],[11,"from","","",10,N],[11,"from","","",3,[[["str"]],["h48"]]],[11,"from","","",10,N],[11,"from","","",6,[[["str"]],["h264"]]],[11,"from","","",10,[[["u8"]],["h160"]]],[11,"from","","",5,N],[11,"from","","",10,[[["str"]],["h160"]]],[11,"from","","",7,N],[11,"from","","",8,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",10,[[["self"],["h160"]],["bool"]]],[11,"eq","","",6,[[["self"],["h264"]],["bool"]]],[11,"eq","","",7,[[["self"],["h512"]],["bool"]]],[11,"eq","import::bytes","",4,[[["self"],["taggedbytes"]],["bool"]]],[11,"ne","","",4,[[["self"],["taggedbytes"]],["bool"]]],[11,"eq","","",2,[[["self"],["bytes"]],["bool"]]],[11,"ne","","",2,[[["self"],["bytes"]],["bool"]]],[11,"eq","import::hash","",1,[[["self"],["h32"]],["bool"]]],[11,"eq","","",8,[[["self"],["h256"]],["bool"]]],[11,"eq","","",9,[[["self"],["h96"]],["bool"]]],[11,"eq","","",5,[[["self"],["h520"]],["bool"]]],[11,"eq","","",3,[[["self"],["h48"]],["bool"]]],[11,"serialize","","",7,N],[11,"serialized_size","","",7,[[["self"]],["usize"]]],[11,"serialize","","",3,N],[11,"serialized_size","","",3,[[["self"]],["usize"]]],[11,"serialize","import::bytes","",2,N],[11,"serialized_size","","",2,[[["self"]],["usize"]]],[11,"serialize","import::hash","",6,N],[11,"serialized_size","","",6,[[["self"]],["usize"]]],[11,"serialize","","",1,N],[11,"serialized_size","","",1,[[["self"]],["usize"]]],[11,"serialize","","",8,N],[11,"serialized_size","","",8,[[["self"]],["usize"]]],[11,"serialize","","",10,N],[11,"serialized_size","","",10,[[["self"]],["usize"]]],[11,"serialize","","",5,N],[11,"serialized_size","","",5,[[["self"]],["usize"]]],[11,"serialize","","",9,N],[11,"serialized_size","","",9,[[["self"]],["usize"]]],[11,"deserialize","","",5,[[["reader"]],["result",["h520","error"]]]],[11,"deserialize","","",3,[[["reader"]],["result",["h48","error"]]]],[11,"deserialize","","",8,[[["reader"]],["result",["h256","error"]]]],[11,"deserialize","","",9,[[["reader"]],["result",["h96","error"]]]],[11,"deserialize","","",10,[[["reader"]],["result",["h160","error"]]]],[11,"deserialize","import::bytes","",2,[[["reader"]],["result",["bytes","error"]]]],[11,"deserialize","import::hash","",6,[[["reader"]],["result",["h264","error"]]]],[11,"deserialize","","",1,[[["reader"]],["result",["h32","error"]]]],[11,"deserialize","","",7,[[["reader"]],["result",["h512","error"]]]],[11,"take","","",3,N],[11,"reversed","","",3,[[["self"]],["h48"]]],[11,"size","","",3,[[],["usize"]]],[11,"is_zero","","",3,[[["self"]],["bool"]]],[11,"take","","",9,N],[11,"reversed","","",9,[[["self"]],["h96"]]],[11,"size","","",9,[[],["usize"]]],[11,"is_zero","","",9,[[["self"]],["bool"]]],[11,"take","","",10,N],[11,"reversed","","",10,[[["self"]],["h160"]]],[11,"size","","",10,[[],["usize"]]],[11,"is_zero","","",10,[[["self"]],["bool"]]],[11,"from_reversed_str","","",8,[[["str"]],["h256"]]],[11,"to_reversed_str","","",8,[[["self"]],["string"]]],[11,"take","","",8,N],[11,"reversed","","",8,[[["self"]],["h256"]]],[11,"size","","",8,[[],["usize"]]],[11,"is_zero","","",8,[[["self"]],["bool"]]],[11,"take","","",6,N],[11,"reversed","","",6,[[["self"]],["h264"]]],[11,"size","","",6,[[],["usize"]]],[11,"is_zero","","",6,[[["self"]],["bool"]]],[11,"take","","",7,N],[11,"reversed","","",7,[[["self"]],["h512"]]],[11,"size","","",7,[[],["usize"]]],[11,"is_zero","","",7,[[["self"]],["bool"]]],[11,"take","","",5,N],[11,"reversed","","",5,[[["self"]],["h520"]]],[11,"size","","",5,[[],["usize"]]],[11,"is_zero","","",5,[[["self"]],["bool"]]],[11,"new","import::bytes","",2,[[],["bytes"]]],[11,"new_with_len","","",2,[[["usize"]],["bytes"]]],[11,"take","","",2,[[["self"]],["vec",["u8"]]]],[11,"len","","",2,[[["self"]],["usize"]]],[11,"append","","",2,N],[11,"split_off","","",2,[[["self"],["usize"]],["bytes"]]],[11,"new","","",4,[[["bytes"]],["taggedbytes"]]],[11,"into_raw","","",4,[[["self"]],["bytes"]]]],"paths":[[3,"BlkDir"],[3,"H32"],[3,"Bytes"],[3,"H48"],[3,"TaggedBytes"],[3,"H520"],[3,"H264"],[3,"H512"],[3,"H256"],[3,"H96"],[3,"H160"]]};
searchIndex["keys"]={"doc":"Bitcoin keys.","items":[[0,"hash","keys","Fixed-size hashes",N,N],[3,"H32","keys::hash","",N,N],[3,"H48","","",N,N],[3,"H96","","",N,N],[3,"H160","","",N,N],[3,"H256","","",N,N],[3,"H264","","",N,N],[3,"H512","","",N,N],[3,"H520","","",N,N],[0,"bytes","keys","Wrapper around `Vec<u8>`",N,N],[3,"Bytes","keys::bytes","Wrapper around `Vec<u8>`",N,N],[3,"TaggedBytes","","Wrapper around `Vec<u8>` which represent associated type",N,N],[3,"Address","keys","`AddressHash` with network identifier and format type",N,N],[12,"kind","","The type of the address.",0,N],[12,"network","","The network of the address.",0,N],[12,"hash","","Public key hash.",0,N],[3,"KeyPair","","",N,N],[3,"Private","","Secret with additional network identifier and format type",N,N],[12,"network","","The network on which this key should be used.",1,N],[12,"secret","","ECDSA key.",1,N],[12,"compressed","","True if this private key represents a compressed address.",1,N],[3,"Signature","","",N,N],[3,"CompactSignature","","",N,N],[3,"SECP256K1","","",N,N],[4,"Type","","There are two address formats currently in use. https://bitcoin.org/en/developer-reference#address-conversion",N,N],[13,"P2PKH","","Pay to PubKey Hash Common P2PKH which begin with the number 1, eg: 1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2. https://bitcoin.org/en/glossary/p2pkh-address",2,N],[13,"P2SH","","Pay to Script Hash Newer P2SH type starting with the number 3, eg: 3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy. https://bitcoin.org/en/glossary/p2sh-address",2,N],[4,"Error","","",N,N],[13,"InvalidPublic","","",3,N],[13,"InvalidSecret","","",3,N],[13,"InvalidMessage","","",3,N],[13,"InvalidSignature","","",3,N],[13,"InvalidNetwork","","",3,N],[13,"InvalidChecksum","","",3,N],[13,"InvalidPrivate","","",3,N],[13,"InvalidAddress","","",3,N],[13,"FailedKeyGeneration","","",3,N],[4,"Public","","Secret public key",N,N],[13,"Normal","","Normal version of public key",4,N],[13,"Compressed","","Compressed version of public key",4,N],[4,"Network","","",N,N],[13,"Mainnet","","",5,N],[13,"Testnet","","",5,N],[0,"generator","","",N,N],[3,"Random","keys::generator","",N,N],[8,"Generator","","",N,N],[10,"generate","","",6,[[["self"]],["result",["keypair","error"]]]],[11,"new","","",7,[[["network"]],["self"]]],[11,"generate","","",7,[[["self"]],["result",["keypair","error"]]]],[11,"fmt","keys","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["type"]],["bool"]]],[11,"clone","","",2,[[["self"]],["type"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["address"]],["bool"]]],[11,"ne","","",0,[[["self"],["address"]],["bool"]]],[11,"clone","","",0,[[["self"]],["address"]]],[11,"layout","","",0,N],[11,"from_layout","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result",["error"]]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"private","","",8,[[["self"]],["private"]]],[11,"public","","",8,[[["self"]],["public"]]],[11,"from_private","","",8,[[["private"]],["result",["keypair","error"]]]],[11,"from_keypair","","",8,[[["secretkey"],["publickey"],["network"]],["self"]]],[11,"address","","",8,[[["self"]],["address"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["error"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from","","",3,[[["secperror"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["network"]],["bool"]]],[11,"clone","","",5,[[["self"]],["network"]]],[11,"eq","","",1,[[["self"],["private"]],["bool"]]],[11,"ne","","",1,[[["self"],["private"]],["bool"]]],[11,"sign","","",1,[[["self"],["message"]],["result",["signature","error"]]]],[11,"sign_compact","","",1,[[["self"],["message"]],["result",["compactsignature","error"]]]],[11,"layout","","",1,N],[11,"from_layout","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",1,[[["str"]],["result",["error"]]]],[11,"from","","",1,[[["str"]],["self"]]],[11,"from_slice","","",4,N],[11,"address_hash","","",4,[[["self"]],["addresshash"]]],[11,"verify","","",4,[[["self"],["message"],["signature"]],["result",["bool","error"]]]],[11,"recover_compact","","",4,[[["message"],["compactsignature"]],["result",["error"]]]],[11,"deref","","",4,N],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["signature"]],["bool"]]],[11,"ne","","",9,[[["self"],["signature"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"deref","","",9,N],[11,"from_str","","",9,[[["str"]],["result",["error"]]]],[11,"from","","",9,[[["str"]],["self"]]],[11,"from","","",9,[[["vec",["u8"]]],["self"]]],[11,"check_low_s","","",9,[[["self"]],["bool"]]],[11,"from","","",9,N],[11,"eq","","",10,[[["self"],["compactsignature"]],["bool"]]],[11,"ne","","",10,[[["self"],["compactsignature"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"deref","","",10,N],[11,"from_str","","",10,[[["str"]],["result",["error"]]]],[11,"from","","",10,[[["str"]],["self"]]],[11,"from","","",10,[[["h520"]],["self"]]],[6,"AddressHash","","20 bytes long hash derived from public `ripemd160(sha256(public))`",N,N],[6,"Secret","","32 bytes long secret key",N,N],[6,"Message","","32 bytes long signable message",N,N],[8,"DisplayLayout","","",N,N],[16,"Target","","",11,N],[10,"layout","","",11,N],[10,"from_layout","","",11,N],[11,"deref","","",12,[[["self"]],["secp256k1"]]],[11,"initialize","","",12,[[["self"]]]],[11,"take","keys::hash","",13,N],[11,"reversed","","",13,[[["self"]],["h32"]]],[11,"size","","",13,[[],["usize"]]],[11,"is_zero","","",13,[[["self"]],["bool"]]],[11,"clone","keys::bytes","",14,[[["self"]],["bytes"]]],[11,"clone","keys::hash","",13,[[["self"]],["h32"]]],[11,"clone","","",15,[[["self"]],["h48"]]],[11,"clone","keys::bytes","",16,[[["self"]],["taggedbytes"]]],[11,"clone","keys::hash","",17,[[["self"]],["h520"]]],[11,"clone","","",18,[[["self"]],["h264"]]],[11,"clone","","",19,[[["self"]],["h512"]]],[11,"clone","","",20,[[["self"]],["h256"]]],[11,"clone","","",21,[[["self"]],["h96"]]],[11,"clone","","",22,[[["self"]],["h160"]]],[11,"fmt","keys::bytes","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","keys::hash","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",21,[[["self"],["h96"]],["option",["ordering"]]]],[11,"partial_cmp","","",17,[[["self"],["h520"]],["option",["ordering"]]]],[11,"partial_cmp","","",22,[[["self"],["h160"]],["option",["ordering"]]]],[11,"partial_cmp","","",13,[[["self"],["h32"]],["option",["ordering"]]]],[11,"partial_cmp","","",20,[[["self"],["h256"]],["option",["ordering"]]]],[11,"partial_cmp","","",19,[[["self"],["h512"]],["option",["ordering"]]]],[11,"partial_cmp","","",15,[[["self"],["h48"]],["option",["ordering"]]]],[11,"partial_cmp","","",18,[[["self"],["h264"]],["option",["ordering"]]]],[11,"from_str","","",20,[[["str"]],["result",["h256"]]]],[11,"from_str","","",15,[[["str"]],["result",["h48"]]]],[11,"from_str","","",18,[[["str"]],["result",["h264"]]]],[11,"from_str","","",13,[[["str"]],["result",["h32"]]]],[11,"from_str","","",21,[[["str"]],["result",["h96"]]]],[11,"from_str","keys::bytes","",14,[[["str"]],["result",["bytes"]]]],[11,"from_str","keys::hash","",17,[[["str"]],["result",["h520"]]]],[11,"from_str","","",22,[[["str"]],["result",["h160"]]]],[11,"from_str","","",19,[[["str"]],["result",["h512"]]]],[11,"deref_mut","","",22,N],[11,"deref_mut","","",20,N],[11,"deref_mut","","",15,N],[11,"deref_mut","","",13,N],[11,"deref_mut","","",18,N],[11,"deref_mut","","",17,N],[11,"deref_mut","keys::bytes","",16,N],[11,"deref_mut","","",14,N],[11,"deref_mut","keys::hash","",19,N],[11,"deref_mut","","",21,N],[11,"default","","",22,[[],["h160"]]],[11,"default","","",17,[[],["h520"]]],[11,"default","","",18,[[],["h264"]]],[11,"default","","",15,[[],["h48"]]],[11,"default","","",13,[[],["h32"]]],[11,"default","","",20,[[],["h256"]]],[11,"default","keys::bytes","",14,[[],["bytes"]]],[11,"default","","",16,[[],["taggedbytes"]]],[11,"default","keys::hash","",21,[[],["h96"]]],[11,"default","","",19,[[],["h512"]]],[11,"write","keys::bytes","",14,N],[11,"flush","","",14,[[["self"]],["result",["error"]]]],[11,"hash","keys::hash","",13,N],[11,"hash","","",15,N],[11,"hash","","",19,N],[11,"hash","","",17,N],[11,"hash","","",18,N],[11,"hash","keys::bytes","",14,N],[11,"hash","keys::hash","",21,N],[11,"hash","","",22,N],[11,"hash","","",20,N],[11,"as_mut","keys::bytes","",14,N],[11,"as_mut","","",16,N],[11,"deref","keys::hash","",19,N],[11,"deref","keys::bytes","",16,N],[11,"deref","keys::hash","",13,N],[11,"deref","","",22,N],[11,"deref","","",18,N],[11,"deref","","",21,N],[11,"deref","","",20,N],[11,"deref","","",17,N],[11,"deref","keys::bytes","",14,N],[11,"deref","keys::hash","",15,N],[11,"heap_size_of_children","","",17,[[["self"]],["usize"]]],[11,"heap_size_of_children","keys::bytes","",14,[[["self"]],["usize"]]],[11,"heap_size_of_children","keys::hash","",19,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",20,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",21,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",18,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",15,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",13,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",22,[[["self"]],["usize"]]],[11,"as_ref","keys::bytes","",16,N],[11,"as_ref","keys::hash","",19,[[["self"]],["h512"]]],[11,"as_ref","","",18,[[["self"]],["h264"]]],[11,"as_ref","","",22,[[["self"]],["h160"]]],[11,"as_ref","","",17,[[["self"]],["h520"]]],[11,"as_ref","","",15,[[["self"]],["h48"]]],[11,"as_ref","keys::bytes","",14,N],[11,"as_ref","keys::hash","",13,[[["self"]],["h32"]]],[11,"as_ref","","",20,[[["self"]],["h256"]]],[11,"as_ref","","",21,[[["self"]],["h96"]]],[11,"from","","",17,[[["str"]],["h520"]]],[11,"from","keys::bytes","",14,N],[11,"from","keys::hash","",19,N],[11,"from","","",19,[[["str"]],["h512"]]],[11,"from","keys::bytes","",14,[[["vec",["u8"]]],["bytes"]]],[11,"from","keys::hash","",18,[[["u8"]],["h264"]]],[11,"from","","",21,[[["u8"]],["h96"]]],[11,"from","","",20,[[["str"]],["h256"]]],[11,"from","","",13,N],[11,"from","","",21,N],[11,"from","","",13,[[["u8"]],["h32"]]],[11,"from","","",18,N],[11,"from","","",15,[[["u8"]],["h48"]]],[11,"from","","",19,[[["u8"]],["h512"]]],[11,"from","","",18,N],[11,"from","","",13,N],[11,"from","","",17,[[["u8"]],["h520"]]],[11,"from","","",15,N],[11,"from","","",17,N],[11,"from","","",20,N],[11,"from","","",21,N],[11,"from","","",13,[[["str"]],["h32"]]],[11,"from","","",21,[[["str"]],["h96"]]],[11,"from","keys::bytes","",14,[[["str"]],["bytes"]]],[11,"from","keys::hash","",15,N],[11,"from","","",20,[[["u8"]],["h256"]]],[11,"from","","",22,N],[11,"from","","",15,[[["str"]],["h48"]]],[11,"from","","",22,N],[11,"from","","",18,[[["str"]],["h264"]]],[11,"from","","",22,[[["u8"]],["h160"]]],[11,"from","","",17,N],[11,"from","","",22,[[["str"]],["h160"]]],[11,"from","","",19,N],[11,"from","","",20,N],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",22,[[["self"],["h160"]],["bool"]]],[11,"eq","","",18,[[["self"],["h264"]],["bool"]]],[11,"eq","","",19,[[["self"],["h512"]],["bool"]]],[11,"eq","keys::bytes","",16,[[["self"],["taggedbytes"]],["bool"]]],[11,"ne","","",16,[[["self"],["taggedbytes"]],["bool"]]],[11,"eq","","",14,[[["self"],["bytes"]],["bool"]]],[11,"ne","","",14,[[["self"],["bytes"]],["bool"]]],[11,"eq","keys::hash","",13,[[["self"],["h32"]],["bool"]]],[11,"eq","","",20,[[["self"],["h256"]],["bool"]]],[11,"eq","","",21,[[["self"],["h96"]],["bool"]]],[11,"eq","","",17,[[["self"],["h520"]],["bool"]]],[11,"eq","","",15,[[["self"],["h48"]],["bool"]]],[11,"take","","",15,N],[11,"reversed","","",15,[[["self"]],["h48"]]],[11,"size","","",15,[[],["usize"]]],[11,"is_zero","","",15,[[["self"]],["bool"]]],[11,"take","","",21,N],[11,"reversed","","",21,[[["self"]],["h96"]]],[11,"size","","",21,[[],["usize"]]],[11,"is_zero","","",21,[[["self"]],["bool"]]],[11,"take","","",22,N],[11,"reversed","","",22,[[["self"]],["h160"]]],[11,"size","","",22,[[],["usize"]]],[11,"is_zero","","",22,[[["self"]],["bool"]]],[11,"from_reversed_str","","",20,[[["str"]],["h256"]]],[11,"to_reversed_str","","",20,[[["self"]],["string"]]],[11,"take","","",20,N],[11,"reversed","","",20,[[["self"]],["h256"]]],[11,"size","","",20,[[],["usize"]]],[11,"is_zero","","",20,[[["self"]],["bool"]]],[11,"take","","",18,N],[11,"reversed","","",18,[[["self"]],["h264"]]],[11,"size","","",18,[[],["usize"]]],[11,"is_zero","","",18,[[["self"]],["bool"]]],[11,"take","","",19,N],[11,"reversed","","",19,[[["self"]],["h512"]]],[11,"size","","",19,[[],["usize"]]],[11,"is_zero","","",19,[[["self"]],["bool"]]],[11,"take","","",17,N],[11,"reversed","","",17,[[["self"]],["h520"]]],[11,"size","","",17,[[],["usize"]]],[11,"is_zero","","",17,[[["self"]],["bool"]]],[11,"new","keys::bytes","",14,[[],["bytes"]]],[11,"new_with_len","","",14,[[["usize"]],["bytes"]]],[11,"take","","",14,[[["self"]],["vec",["u8"]]]],[11,"len","","",14,[[["self"]],["usize"]]],[11,"append","","",14,N],[11,"split_off","","",14,[[["self"],["usize"]],["bytes"]]],[11,"new","","",16,[[["bytes"]],["taggedbytes"]]],[11,"into_raw","","",16,[[["self"]],["bytes"]]]],"paths":[[3,"Address"],[3,"Private"],[4,"Type"],[4,"Error"],[4,"Public"],[4,"Network"],[8,"Generator"],[3,"Random"],[3,"KeyPair"],[3,"Signature"],[3,"CompactSignature"],[8,"DisplayLayout"],[3,"SECP256K1"],[3,"H32"],[3,"Bytes"],[3,"H48"],[3,"TaggedBytes"],[3,"H520"],[3,"H264"],[3,"H512"],[3,"H256"],[3,"H96"],[3,"H160"]]};
searchIndex["message"]={"doc":"","items":[[0,"hash","message","Fixed-size hashes",N,N],[3,"H32","message::hash","",N,N],[3,"H48","","",N,N],[3,"H96","","",N,N],[3,"H160","","",N,N],[3,"H256","","",N,N],[3,"H264","","",N,N],[3,"H512","","",N,N],[3,"H520","","",N,N],[0,"bytes","message","Wrapper around `Vec<u8>`",N,N],[3,"Bytes","message::bytes","Wrapper around `Vec<u8>`",N,N],[3,"TaggedBytes","","Wrapper around `Vec<u8>` which represent associated type",N,N],[3,"Command","message","",N,N],[3,"Services","","",N,N],[3,"Message","","",N,N],[3,"MessageHeader","","",N,N],[12,"magic","","",0,N],[12,"command","","",0,N],[12,"len","","",0,N],[12,"checksum","","",0,N],[4,"Error","","",N,N],[13,"Deserialize","","Deserialization failed.",1,N],[13,"InvalidCommand","","Command has wrong format or is unsupported.",1,N],[13,"InvalidMagic","","Network magic comes from different network.",1,N],[13,"InvalidChecksum","","Invalid checksum.",1,N],[13,"InvalidVersion","","Invalid version.",1,N],[5,"to_raw_message","","",N,[[["magic"],["command"],["bytes"]],["bytes"]]],[5,"serialize_payload","","",N,[[["t"],["u32"]],["messageresult",["bytes"]]]],[5,"deserialize_payload","","",N,N],[0,"common","","",N,N],[3,"NetAddress","message::common","",N,N],[12,"services","","",2,N],[12,"address","","",2,N],[12,"port","","",2,N],[3,"BlockHeaderAndIDs","","",N,N],[12,"header","","",3,N],[12,"nonce","","",3,N],[12,"short_ids","","",3,N],[12,"prefilled_transactions","","",3,N],[3,"BlockTransactions","","",N,N],[12,"blockhash","","",4,N],[12,"transactions","","",4,N],[3,"BlockTransactionsRequest","","",N,N],[12,"blockhash","","",5,N],[12,"indexes","","",5,N],[3,"Command","","",N,N],[3,"InventoryVector","","",N,N],[12,"inv_type","","",6,N],[12,"hash","","",6,N],[3,"IpAddress","","",N,N],[3,"Port","","",N,N],[3,"PrefilledTransaction","","",N,N],[12,"index","","",7,N],[12,"transaction","","",7,N],[3,"Services","","",N,N],[4,"InventoryType","","",N,N],[13,"Error","","",8,N],[13,"MessageTx","","",8,N],[13,"MessageBlock","","",8,N],[13,"MessageFilteredBlock","","",8,N],[13,"MessageCompactBlock","","",8,N],[13,"MessageWitnessTx","","",8,N],[13,"MessageWitnessBlock","","",8,N],[13,"MessageWitnessFilteredBlock","","",8,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"default","","",2,[[],["netaddress"]]],[11,"eq","","",2,[[["self"],["netaddress"]],["bool"]]],[11,"ne","","",2,[[["self"],["netaddress"]],["bool"]]],[11,"clone","","",2,[[["self"]],["netaddress"]]],[11,"from","","",2,[[["str"]],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["blockheaderandids"]],["bool"]]],[11,"ne","","",3,[[["self"],["blockheaderandids"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["blocktransactions"]],["bool"]]],[11,"ne","","",4,[[["self"],["blocktransactions"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["blocktransactionsrequest"]],["bool"]]],[11,"ne","","",5,[[["self"],["blocktransactionsrequest"]],["bool"]]],[11,"serialize","","",5,[[["self"],["stream"]]]],[11,"deserialize","","",5,[[["reader"]],["result",["readererror"]]]],[11,"fmt","message","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["command"]],["bool"]]],[11,"ne","","",9,[[["self"],["command"]],["bool"]]],[11,"clone","","",9,[[["self"]],["command"]]],[11,"hash","","",9,N],[11,"from_str","","",9,[[["str"]],["result"]]],[11,"from","","",9,[[["str"]],["self"]]],[11,"len","","",9,[[["self"]],["usize"]]],[11,"is_empty","","",9,[[["self"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["str"]],["bool"]]],[11,"fmt","message::common","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["inventorytype"]],["bool"]]],[11,"clone","","",8,[[["self"]],["inventorytype"]]],[11,"from_u32","","",8,[[["u32"]],["option"]]],[11,"serialize","","",8,[[["self"],["stream"]]]],[11,"deserialize","","",8,[[["reader"]],["result",["readererror"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["inventoryvector"]],["bool"]]],[11,"ne","","",6,[[["self"],["inventoryvector"]],["bool"]]],[11,"clone","","",6,[[["self"]],["inventoryvector"]]],[11,"tx","","",6,[[["h256"]],["self"]]],[11,"block","","",6,[[["h256"]],["self"]]],[11,"serialize","","",6,[[["self"],["stream"]]]],[11,"deserialize","","",6,[[["reader"]],["result",["readererror"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["ipaddress"]],["bool"]]],[11,"ne","","",10,[[["self"],["ipaddress"]],["bool"]]],[11,"clone","","",10,[[["self"]],["ipaddress"]]],[11,"default","","",10,[[],["self"]]],[11,"from","","",10,[[["ipaddr"]],["self"]]],[11,"from","","",10,[[["str"]],["self"]]],[11,"from_str","","",10,[[["str"]],["result"]]],[11,"serialize","","",10,[[["self"],["stream"]]]],[11,"deserialize","","",10,[[["reader"]],["result",["readererror"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"default","","",11,[[],["port"]]],[11,"eq","","",11,[[["self"],["port"]],["bool"]]],[11,"ne","","",11,[[["self"],["port"]],["bool"]]],[11,"clone","","",11,[[["self"]],["port"]]],[11,"from","","",11,[[["u16"]],["self"]]],[11,"serialize","","",11,[[["self"],["stream"]]]],[11,"deserialize","","",11,[[["reader"]],["result",["readererror"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["prefilledtransaction"]],["bool"]]],[11,"ne","","",7,[[["self"],["prefilledtransaction"]],["bool"]]],[11,"serialize","","",7,[[["self"],["stream"]]]],[11,"deserialize","","",7,[[["reader"]],["result",["readererror"]]]],[11,"fmt","message","",12,[[["self"],["formatter"]],["result"]]],[11,"default","","",12,[[],["services"]]],[11,"eq","","",12,[[["self"],["services"]],["bool"]]],[11,"ne","","",12,[[["self"],["services"]],["bool"]]],[11,"clone","","",12,[[["self"]],["services"]]],[11,"from","","",12,[[["u64"]],["self"]]],[11,"network","","",12,[[["self"]],["bool"]]],[11,"with_network","","",12,[[["self"],["bool"]],["self"]]],[11,"getutxo","","",12,[[["self"]],["bool"]]],[11,"with_getutxo","","",12,[[["self"],["bool"]],["self"]]],[11,"bloom","","",12,[[["self"]],["bool"]]],[11,"with_bloom","","",12,[[["self"],["bool"]],["self"]]],[11,"witness","","",12,[[["self"]],["bool"]]],[11,"with_witness","","",12,[[["self"],["bool"]],["self"]]],[11,"xthin","","",12,[[["self"]],["bool"]]],[11,"with_xthin","","",12,[[["self"],["bool"]],["self"]]],[11,"bitcoin_cash","","",12,[[["self"]],["bool"]]],[11,"with_bitcoin_cash","","",12,[[["self"],["bool"]],["self"]]],[11,"includes","","",12,[[["self"],["self"]],["bool"]]],[11,"new","","",13,[[["magic"],["u32"],["t"]],["messageresult"]]],[11,"with_flags","","",13,[[["magic"],["u32"],["t"],["u32"]],["messageresult"]]],[11,"len","","",13,[[["self"]],["usize"]]],[11,"as_ref","","",13,N],[11,"from","message::bytes","",14,[[["message"]],["self"]]],[11,"fmt","message","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["messageheader"]],["bool"]]],[11,"ne","","",0,[[["self"],["messageheader"]],["bool"]]],[11,"for_data","","",0,N],[11,"deserialize","","",0,N],[11,"serialize","","",0,[[["self"],["stream"]]]],[0,"types","","",N,N],[3,"Block","message::types","",N,N],[12,"block","","",15,N],[3,"BlockTxn","","",N,N],[12,"request","","",16,N],[3,"CompactBlock","","",N,N],[12,"header","","",17,N],[3,"FeeFilter","","",N,N],[12,"fee_rate","","",18,N],[3,"FilterLoad","","",N,N],[12,"filter","","",19,N],[12,"hash_functions","","",19,N],[12,"tweak","","",19,N],[12,"flags","","",19,N],[3,"FilterClear","","",N,N],[3,"FilterAdd","","",N,N],[12,"data","","",20,N],[3,"GetAddr","","",N,N],[3,"GetBlocks","","",N,N],[12,"version","","",21,N],[12,"block_locator_hashes","","",21,N],[12,"hash_stop","","",21,N],[3,"GetBlockTxn","","",N,N],[12,"request","","",22,N],[3,"GetData","","",N,N],[12,"inventory","","",23,N],[3,"GetHeaders","","",N,N],[12,"version","","",24,N],[12,"block_locator_hashes","","",24,N],[12,"hash_stop","","",24,N],[3,"Headers","","",N,N],[12,"headers","","",25,N],[3,"Inv","","",N,N],[12,"inventory","","",26,N],[3,"MemPool","","",N,N],[3,"MerkleBlock","","",N,N],[12,"block_header","","",27,N],[12,"total_transactions","","",27,N],[12,"hashes","","",27,N],[12,"flags","","",27,N],[3,"NotFound","","",N,N],[12,"inventory","","",28,N],[3,"Ping","","",N,N],[12,"nonce","","",29,N],[3,"Pong","","",N,N],[12,"nonce","","",30,N],[3,"SendCompact","","",N,N],[12,"first","","",31,N],[12,"second","","",31,N],[3,"SendHeaders","","",N,N],[3,"Tx","","",N,N],[12,"transaction","","",32,N],[3,"Verack","","",N,N],[4,"FilterFlags","","Controls how the filter is updated after match is found.",N,N],[13,"None","","Means the filter is not adjusted when a match is found.",33,N],[13,"All","","Means if the filter matches any data element in a scriptPubKey the outpoint is serialized and inserted into the filter.",33,N],[13,"PubKeyOnly","","Means the outpoint is inserted into the filter only if a data element in the scriptPubKey is matched, and that script is of the standard \"pay to pubkey\" or \"pay to multisig\" forms.",33,N],[0,"addr","","",N,N],[3,"AddressEntry","message::types::addr","",N,N],[12,"timestamp","","",34,N],[12,"address","","",34,N],[3,"V31402","","",N,N],[12,"addresses","","",35,N],[3,"V0","","",N,N],[12,"addresses","","",36,N],[4,"Addr","","",N,N],[13,"V0","","",37,N],[13,"V31402","","",37,N],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["addr"]],["bool"]]],[11,"ne","","",37,[[["self"],["addr"]],["bool"]]],[11,"new","","",37,[[["vec",["addressentry"]]],["self"]]],[11,"version","","",37,[[],["u32"]]],[11,"command","","",37,[[],["str"]]],[11,"deserialize_payload","","",37,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",37,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["addressentry"]],["bool"]]],[11,"ne","","",34,[[["self"],["addressentry"]],["bool"]]],[11,"serialize","","",34,[[["self"],["stream"]]]],[11,"deserialize","","",34,[[["reader"]],["result",["readererror"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",35,[[["self"],["v31402"]],["bool"]]],[11,"ne","","",35,[[["self"],["v31402"]],["bool"]]],[11,"serialize","","",35,[[["self"],["stream"]]]],[11,"deserialize","","",35,[[["reader"]],["result",["readererror"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"eq","","",36,[[["self"],["v0"]],["bool"]]],[11,"ne","","",36,[[["self"],["v0"]],["bool"]]],[11,"serialize","","",36,[[["self"],["stream"]]]],[11,"deserialize","","",36,[[["reader"]],["result",["readererror"]]]],[11,"fmt","message::types","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["block"]],["bool"]]],[11,"ne","","",15,[[["self"],["block"]],["bool"]]],[11,"with_block","","",15,[[["chainblock"]],["self"]]],[11,"version","","",15,[[],["u32"]]],[11,"command","","",15,[[],["str"]]],[11,"deserialize_payload","","",15,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",15,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["blocktxn"]],["bool"]]],[11,"ne","","",16,[[["self"],["blocktxn"]],["bool"]]],[11,"version","","",16,[[],["u32"]]],[11,"command","","",16,[[],["str"]]],[11,"deserialize_payload","","",16,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",16,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["compactblock"]],["bool"]]],[11,"ne","","",17,[[["self"],["compactblock"]],["bool"]]],[11,"version","","",17,[[],["u32"]]],[11,"command","","",17,[[],["str"]]],[11,"deserialize_payload","","",17,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",17,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["feefilter"]],["bool"]]],[11,"ne","","",18,[[["self"],["feefilter"]],["bool"]]],[11,"with_fee_rate","","",18,[[["u64"]],["self"]]],[11,"version","","",18,[[],["u32"]]],[11,"command","","",18,[[],["str"]]],[11,"deserialize_payload","","",18,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",18,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["filteradd"]],["bool"]]],[11,"ne","","",20,[[["self"],["filteradd"]],["bool"]]],[11,"version","","",20,[[],["u32"]]],[11,"command","","",20,[[],["str"]]],[11,"deserialize_payload","","",20,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",20,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",38,[[["self"],["filterclear"]],["bool"]]],[11,"version","","",38,[[],["u32"]]],[11,"command","","",38,[[],["str"]]],[11,"deserialize_payload","","",38,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",38,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"eq","","",33,[[["self"],["filterflags"]],["bool"]]],[11,"clone","","",33,[[["self"]],["filterflags"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["filterload"]],["bool"]]],[11,"ne","","",19,[[["self"],["filterload"]],["bool"]]],[11,"version","","",19,[[],["u32"]]],[11,"command","","",19,[[],["str"]]],[11,"deserialize_payload","","",19,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",19,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"from_u8","","",33,[[["u8"]],["option"]]],[11,"serialize","","",33,[[["self"],["stream"]]]],[11,"deserialize","","",33,[[["reader"]],["result",["readererror"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["getaddr"]],["bool"]]],[11,"version","","",39,[[],["u32"]]],[11,"command","","",39,[[],["str"]]],[11,"deserialize_payload","","",39,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",39,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["getblocks"]],["bool"]]],[11,"ne","","",21,[[["self"],["getblocks"]],["bool"]]],[11,"version","","",21,[[],["u32"]]],[11,"command","","",21,[[],["str"]]],[11,"deserialize_payload","","",21,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",21,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["getblocktxn"]],["bool"]]],[11,"ne","","",22,[[["self"],["getblocktxn"]],["bool"]]],[11,"version","","",22,[[],["u32"]]],[11,"command","","",22,[[],["str"]]],[11,"deserialize_payload","","",22,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",22,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["getdata"]],["bool"]]],[11,"ne","","",23,[[["self"],["getdata"]],["bool"]]],[11,"with_inventory","","",23,[[["vec",["inventoryvector"]]],["self"]]],[11,"version","","",23,[[],["u32"]]],[11,"command","","",23,[[],["str"]]],[11,"deserialize_payload","","",23,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",23,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["getheaders"]],["bool"]]],[11,"ne","","",24,[[["self"],["getheaders"]],["bool"]]],[11,"with_block_locator_hashes","","",24,[[["vec",["h256"]]],["self"]]],[11,"version","","",24,[[],["u32"]]],[11,"command","","",24,[[],["str"]]],[11,"deserialize_payload","","",24,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",24,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["headers"]],["bool"]]],[11,"ne","","",25,[[["self"],["headers"]],["bool"]]],[11,"with_headers","","",25,[[["vec",["blockheader"]]],["self"]]],[11,"version","","",25,[[],["u32"]]],[11,"command","","",25,[[],["str"]]],[11,"deserialize_payload","","",25,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",25,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["inv"]],["bool"]]],[11,"ne","","",26,[[["self"],["inv"]],["bool"]]],[11,"with_inventory","","",26,[[["vec",["inventoryvector"]]],["self"]]],[11,"version","","",26,[[],["u32"]]],[11,"command","","",26,[[],["str"]]],[11,"deserialize_payload","","",26,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",26,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"eq","","",40,[[["self"],["mempool"]],["bool"]]],[11,"version","","",40,[[],["u32"]]],[11,"command","","",40,[[],["str"]]],[11,"deserialize_payload","","",40,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",40,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["merkleblock"]],["bool"]]],[11,"ne","","",27,[[["self"],["merkleblock"]],["bool"]]],[11,"version","","",27,[[],["u32"]]],[11,"command","","",27,[[],["str"]]],[11,"deserialize_payload","","",27,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",27,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["notfound"]],["bool"]]],[11,"ne","","",28,[[["self"],["notfound"]],["bool"]]],[11,"with_inventory","","",28,[[["vec",["inventoryvector"]]],["self"]]],[11,"version","","",28,[[],["u32"]]],[11,"command","","",28,[[],["str"]]],[11,"deserialize_payload","","",28,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",28,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["ping"]],["bool"]]],[11,"ne","","",29,[[["self"],["ping"]],["bool"]]],[11,"new","","",29,[[["u64"]],["self"]]],[11,"version","","",29,[[],["u32"]]],[11,"command","","",29,[[],["str"]]],[11,"deserialize_payload","","",29,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",29,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["pong"]],["bool"]]],[11,"ne","","",30,[[["self"],["pong"]],["bool"]]],[11,"new","","",30,[[["u64"]],["self"]]],[11,"version","","",30,[[],["u32"]]],[11,"command","","",30,[[],["str"]]],[11,"deserialize_payload","","",30,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",30,[[["self"],["stream"],["u32"]],["messageresult"]]],[0,"reject","","",N,N],[3,"Reject","message::types::reject","",N,N],[12,"message","","",41,N],[12,"code","","",41,N],[12,"reason","","",41,N],[4,"RejectCode","","",N,N],[13,"Malformed","","",42,N],[13,"Invalid","","",42,N],[13,"Obsolate","","",42,N],[13,"Duplicate","","",42,N],[13,"Nonstandard","","",42,N],[13,"Dust","","",42,N],[13,"InsuficientFee","","",42,N],[13,"Checkpoint","","",42,N],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"eq","","",42,[[["self"],["rejectcode"]],["bool"]]],[11,"clone","","",42,[[["self"]],["rejectcode"]]],[11,"from_u8","","",42,[[["u8"]],["option"]]],[11,"serialize","","",42,[[["self"],["stream"]]]],[11,"deserialize","","",42,[[["reader"]],["result",["readererror"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["reject"]],["bool"]]],[11,"ne","","",41,[[["self"],["reject"]],["bool"]]],[11,"version","","",41,[[],["u32"]]],[11,"command","","",41,[[],["str"]]],[11,"deserialize_payload","","",41,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",41,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","message::types","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["sendcompact"]],["bool"]]],[11,"ne","","",31,[[["self"],["sendcompact"]],["bool"]]],[11,"version","","",31,[[],["u32"]]],[11,"command","","",31,[[],["str"]]],[11,"deserialize_payload","","",31,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",31,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"eq","","",43,[[["self"],["sendheaders"]],["bool"]]],[11,"version","","",43,[[],["u32"]]],[11,"command","","",43,[[],["str"]]],[11,"deserialize_payload","","",43,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",43,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"eq","","",32,[[["self"],["tx"]],["bool"]]],[11,"ne","","",32,[[["self"],["tx"]],["bool"]]],[11,"with_transaction","","",32,[[["transaction"]],["self"]]],[11,"version","","",32,[[],["u32"]]],[11,"command","","",32,[[],["str"]]],[11,"deserialize_payload","","",32,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",32,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"eq","","",44,[[["self"],["verack"]],["bool"]]],[11,"version","","",44,[[],["u32"]]],[11,"command","","",44,[[],["str"]]],[11,"deserialize_payload","","",44,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",44,[[["self"],["stream"],["u32"]],["messageresult"]]],[0,"version","","",N,N],[3,"V0","message::types::version","",N,N],[12,"version","","",45,N],[12,"services","","",45,N],[12,"timestamp","","",45,N],[12,"receiver","","",45,N],[3,"V106","","",N,N],[12,"from","","",46,N],[12,"nonce","","",46,N],[12,"user_agent","","",46,N],[12,"start_height","","",46,N],[3,"V70001","","",N,N],[12,"relay","","",47,N],[4,"Version","","",N,N],[13,"V0","","",48,N],[13,"V106","","",48,N],[13,"V70001","","",48,N],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"eq","","",48,[[["self"],["version"]],["bool"]]],[11,"ne","","",48,[[["self"],["version"]],["bool"]]],[11,"clone","","",48,[[["self"]],["version"]]],[11,"default","","",48,[[],["version"]]],[11,"version","","",48,[[],["u32"]]],[11,"command","","",48,[[],["str"]]],[11,"deserialize_payload","","",48,[[["reader"],["u32"]],["messageresult"]]],[11,"serialize_payload","","",48,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"version","","",48,[[["self"]],["u32"]]],[11,"nonce","","",48,[[["self"]],["option",["u64"]]]],[11,"services","","",48,[[["self"]],["services"]]],[11,"relay_transactions","","",48,[[["self"]],["bool"]]],[11,"user_agent","","",48,[[["self"]],["option",["string"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"default","","",45,[[],["v0"]]],[11,"eq","","",45,[[["self"],["v0"]],["bool"]]],[11,"ne","","",45,[[["self"],["v0"]],["bool"]]],[11,"clone","","",45,[[["self"]],["v0"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"eq","","",46,[[["self"],["v106"]],["bool"]]],[11,"ne","","",46,[[["self"],["v106"]],["bool"]]],[11,"clone","","",46,[[["self"]],["v106"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","","",47,[[["self"],["v70001"]],["bool"]]],[11,"ne","","",47,[[["self"],["v70001"]],["bool"]]],[11,"clone","","",47,[[["self"]],["v70001"]]],[11,"serialize","","",45,[[["self"],["stream"]]]],[11,"deserialize","","",45,[[["reader"]],["result",["readererror"]]]],[11,"serialize","","",46,[[["self"],["stream"]]]],[11,"deserialize","","",46,[[["reader"]],["result",["readererror"]]]],[11,"serialize","","",47,[[["self"],["stream"]]]],[11,"deserialize","","",47,[[["reader"]],["result",["readererror"]]]],[11,"from","","",48,[[["str"]],["self"]]],[17,"FILTERLOAD_MAX_FILTER_LEN","message::types","",N,N],[17,"FILTERLOAD_MAX_HASH_FUNCS","","",N,N],[17,"FILTERADD_MAX_DATA_LEN","","",N,N],[17,"GETBLOCKS_MAX_RESPONSE_HASHES","","",N,N],[17,"GETDATA_MAX_INVENTORY_LEN","","",N,N],[17,"GETHEADERS_MAX_RESPONSE_HEADERS","","",N,N],[17,"HEADERS_MAX_HEADERS_LEN","","",N,N],[17,"INV_MAX_INVENTORY_LEN","","",N,N],[11,"fmt","message","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"clone","","",1,[[["self"]],["error"]]],[11,"from","","",1,[[["readererror"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]],[6,"MessageResult","","",N,N],[8,"Payload","","",N,N],[10,"version","","",49,[[],["u32"]]],[10,"command","","",49,[[],["str"]]],[10,"deserialize_payload","","",49,[[["reader"],["u32"]],["messageresult"]]],[10,"serialize_payload","","",49,[[["self"],["stream"],["u32"]],["messageresult"]]],[11,"take","message::hash","",50,N],[11,"reversed","","",50,[[["self"]],["h32"]]],[11,"size","","",50,[[],["usize"]]],[11,"is_zero","","",50,[[["self"]],["bool"]]],[11,"clone","message::bytes","",14,[[["self"]],["bytes"]]],[11,"clone","message::hash","",50,[[["self"]],["h32"]]],[11,"clone","","",51,[[["self"]],["h48"]]],[11,"clone","message::bytes","",52,[[["self"]],["taggedbytes"]]],[11,"clone","message::hash","",53,[[["self"]],["h520"]]],[11,"clone","","",54,[[["self"]],["h264"]]],[11,"clone","","",55,[[["self"]],["h512"]]],[11,"clone","","",56,[[["self"]],["h256"]]],[11,"clone","","",57,[[["self"]],["h96"]]],[11,"clone","","",58,[[["self"]],["h160"]]],[11,"fmt","message::bytes","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","message::hash","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",57,[[["self"],["h96"]],["option",["ordering"]]]],[11,"partial_cmp","","",53,[[["self"],["h520"]],["option",["ordering"]]]],[11,"partial_cmp","","",58,[[["self"],["h160"]],["option",["ordering"]]]],[11,"partial_cmp","","",50,[[["self"],["h32"]],["option",["ordering"]]]],[11,"partial_cmp","","",56,[[["self"],["h256"]],["option",["ordering"]]]],[11,"partial_cmp","","",55,[[["self"],["h512"]],["option",["ordering"]]]],[11,"partial_cmp","","",51,[[["self"],["h48"]],["option",["ordering"]]]],[11,"partial_cmp","","",54,[[["self"],["h264"]],["option",["ordering"]]]],[11,"from_str","","",56,[[["str"]],["result",["h256"]]]],[11,"from_str","","",51,[[["str"]],["result",["h48"]]]],[11,"from_str","","",54,[[["str"]],["result",["h264"]]]],[11,"from_str","","",50,[[["str"]],["result",["h32"]]]],[11,"from_str","","",57,[[["str"]],["result",["h96"]]]],[11,"from_str","message::bytes","",14,[[["str"]],["result",["bytes"]]]],[11,"from_str","message::hash","",53,[[["str"]],["result",["h520"]]]],[11,"from_str","","",58,[[["str"]],["result",["h160"]]]],[11,"from_str","","",55,[[["str"]],["result",["h512"]]]],[11,"deref_mut","","",58,N],[11,"deref_mut","","",56,N],[11,"deref_mut","","",51,N],[11,"deref_mut","","",50,N],[11,"deref_mut","","",54,N],[11,"deref_mut","","",53,N],[11,"deref_mut","message::bytes","",52,N],[11,"deref_mut","","",14,N],[11,"deref_mut","message::hash","",55,N],[11,"deref_mut","","",57,N],[11,"default","","",58,[[],["h160"]]],[11,"default","","",53,[[],["h520"]]],[11,"default","","",54,[[],["h264"]]],[11,"default","","",51,[[],["h48"]]],[11,"default","","",50,[[],["h32"]]],[11,"default","","",56,[[],["h256"]]],[11,"default","message::bytes","",14,[[],["bytes"]]],[11,"default","","",52,[[],["taggedbytes"]]],[11,"default","message::hash","",57,[[],["h96"]]],[11,"default","","",55,[[],["h512"]]],[11,"write","message::bytes","",14,N],[11,"flush","","",14,[[["self"]],["result",["error"]]]],[11,"hash","message::hash","",50,N],[11,"hash","","",51,N],[11,"hash","","",55,N],[11,"hash","","",53,N],[11,"hash","","",54,N],[11,"hash","message::bytes","",14,N],[11,"hash","message::hash","",57,N],[11,"hash","","",58,N],[11,"hash","","",56,N],[11,"as_mut","message::bytes","",14,N],[11,"as_mut","","",52,N],[11,"deref","message::hash","",55,N],[11,"deref","message::bytes","",52,N],[11,"deref","message::hash","",50,N],[11,"deref","","",58,N],[11,"deref","","",54,N],[11,"deref","","",57,N],[11,"deref","","",56,N],[11,"deref","","",53,N],[11,"deref","message::bytes","",14,N],[11,"deref","message::hash","",51,N],[11,"heap_size_of_children","","",53,[[["self"]],["usize"]]],[11,"heap_size_of_children","message::bytes","",14,[[["self"]],["usize"]]],[11,"heap_size_of_children","message::hash","",55,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",56,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",57,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",54,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",51,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",50,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",58,[[["self"]],["usize"]]],[11,"as_ref","message::bytes","",52,N],[11,"as_ref","message::hash","",55,[[["self"]],["h512"]]],[11,"as_ref","","",54,[[["self"]],["h264"]]],[11,"as_ref","","",58,[[["self"]],["h160"]]],[11,"as_ref","","",53,[[["self"]],["h520"]]],[11,"as_ref","","",51,[[["self"]],["h48"]]],[11,"as_ref","message::bytes","",14,N],[11,"as_ref","message::hash","",50,[[["self"]],["h32"]]],[11,"as_ref","","",56,[[["self"]],["h256"]]],[11,"as_ref","","",57,[[["self"]],["h96"]]],[11,"from","","",53,[[["str"]],["h520"]]],[11,"from","message::bytes","",14,N],[11,"from","message::hash","",55,N],[11,"from","","",55,[[["str"]],["h512"]]],[11,"from","message::bytes","",14,[[["vec",["u8"]]],["bytes"]]],[11,"from","message::hash","",54,[[["u8"]],["h264"]]],[11,"from","","",57,[[["u8"]],["h96"]]],[11,"from","","",56,[[["str"]],["h256"]]],[11,"from","","",50,N],[11,"from","","",57,N],[11,"from","","",50,[[["u8"]],["h32"]]],[11,"from","","",54,N],[11,"from","","",51,[[["u8"]],["h48"]]],[11,"from","","",55,[[["u8"]],["h512"]]],[11,"from","","",54,N],[11,"from","","",50,N],[11,"from","","",53,[[["u8"]],["h520"]]],[11,"from","","",51,N],[11,"from","","",53,N],[11,"from","","",56,N],[11,"from","","",57,N],[11,"from","","",50,[[["str"]],["h32"]]],[11,"from","","",57,[[["str"]],["h96"]]],[11,"from","message::bytes","",14,[[["str"]],["bytes"]]],[11,"from","message::hash","",51,N],[11,"from","","",56,[[["u8"]],["h256"]]],[11,"from","","",58,N],[11,"from","","",51,[[["str"]],["h48"]]],[11,"from","","",58,N],[11,"from","","",54,[[["str"]],["h264"]]],[11,"from","","",58,[[["u8"]],["h160"]]],[11,"from","","",53,N],[11,"from","","",58,[[["str"]],["h160"]]],[11,"from","","",55,N],[11,"from","","",56,N],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",58,[[["self"],["h160"]],["bool"]]],[11,"eq","","",54,[[["self"],["h264"]],["bool"]]],[11,"eq","","",55,[[["self"],["h512"]],["bool"]]],[11,"eq","message::bytes","",52,[[["self"],["taggedbytes"]],["bool"]]],[11,"ne","","",52,[[["self"],["taggedbytes"]],["bool"]]],[11,"eq","","",14,[[["self"],["bytes"]],["bool"]]],[11,"ne","","",14,[[["self"],["bytes"]],["bool"]]],[11,"eq","message::hash","",50,[[["self"],["h32"]],["bool"]]],[11,"eq","","",56,[[["self"],["h256"]],["bool"]]],[11,"eq","","",57,[[["self"],["h96"]],["bool"]]],[11,"eq","","",53,[[["self"],["h520"]],["bool"]]],[11,"eq","","",51,[[["self"],["h48"]],["bool"]]],[11,"serialize","","",55,N],[11,"serialized_size","","",55,[[["self"]],["usize"]]],[11,"serialize","","",51,N],[11,"serialized_size","","",51,[[["self"]],["usize"]]],[11,"serialize","message::bytes","",14,N],[11,"serialized_size","","",14,[[["self"]],["usize"]]],[11,"serialize","message::hash","",54,N],[11,"serialized_size","","",54,[[["self"]],["usize"]]],[11,"serialize","","",50,N],[11,"serialized_size","","",50,[[["self"]],["usize"]]],[11,"serialize","","",56,N],[11,"serialized_size","","",56,[[["self"]],["usize"]]],[11,"serialize","","",58,N],[11,"serialized_size","","",58,[[["self"]],["usize"]]],[11,"serialize","","",53,N],[11,"serialized_size","","",53,[[["self"]],["usize"]]],[11,"serialize","","",57,N],[11,"serialized_size","","",57,[[["self"]],["usize"]]],[11,"deserialize","","",53,[[["reader"]],["result",["h520","error"]]]],[11,"deserialize","","",51,[[["reader"]],["result",["h48","error"]]]],[11,"deserialize","","",56,[[["reader"]],["result",["h256","error"]]]],[11,"deserialize","","",57,[[["reader"]],["result",["h96","error"]]]],[11,"deserialize","","",58,[[["reader"]],["result",["h160","error"]]]],[11,"deserialize","message::bytes","",14,[[["reader"]],["result",["bytes","error"]]]],[11,"deserialize","message::hash","",54,[[["reader"]],["result",["h264","error"]]]],[11,"deserialize","","",50,[[["reader"]],["result",["h32","error"]]]],[11,"deserialize","","",55,[[["reader"]],["result",["h512","error"]]]],[11,"take","","",51,N],[11,"reversed","","",51,[[["self"]],["h48"]]],[11,"size","","",51,[[],["usize"]]],[11,"is_zero","","",51,[[["self"]],["bool"]]],[11,"take","","",57,N],[11,"reversed","","",57,[[["self"]],["h96"]]],[11,"size","","",57,[[],["usize"]]],[11,"is_zero","","",57,[[["self"]],["bool"]]],[11,"take","","",58,N],[11,"reversed","","",58,[[["self"]],["h160"]]],[11,"size","","",58,[[],["usize"]]],[11,"is_zero","","",58,[[["self"]],["bool"]]],[11,"from_reversed_str","","",56,[[["str"]],["h256"]]],[11,"to_reversed_str","","",56,[[["self"]],["string"]]],[11,"take","","",56,N],[11,"reversed","","",56,[[["self"]],["h256"]]],[11,"size","","",56,[[],["usize"]]],[11,"is_zero","","",56,[[["self"]],["bool"]]],[11,"take","","",54,N],[11,"reversed","","",54,[[["self"]],["h264"]]],[11,"size","","",54,[[],["usize"]]],[11,"is_zero","","",54,[[["self"]],["bool"]]],[11,"take","","",55,N],[11,"reversed","","",55,[[["self"]],["h512"]]],[11,"size","","",55,[[],["usize"]]],[11,"is_zero","","",55,[[["self"]],["bool"]]],[11,"take","","",53,N],[11,"reversed","","",53,[[["self"]],["h520"]]],[11,"size","","",53,[[],["usize"]]],[11,"is_zero","","",53,[[["self"]],["bool"]]],[11,"new","message::bytes","",14,[[],["bytes"]]],[11,"new_with_len","","",14,[[["usize"]],["bytes"]]],[11,"take","","",14,[[["self"]],["vec",["u8"]]]],[11,"len","","",14,[[["self"]],["usize"]]],[11,"append","","",14,N],[11,"split_off","","",14,[[["self"],["usize"]],["bytes"]]],[11,"new","","",52,[[["bytes"]],["taggedbytes"]]],[11,"into_raw","","",52,[[["self"]],["bytes"]]]],"paths":[[3,"MessageHeader"],[4,"Error"],[3,"NetAddress"],[3,"BlockHeaderAndIDs"],[3,"BlockTransactions"],[3,"BlockTransactionsRequest"],[3,"InventoryVector"],[3,"PrefilledTransaction"],[4,"InventoryType"],[3,"Command"],[3,"IpAddress"],[3,"Port"],[3,"Services"],[3,"Message"],[3,"Bytes"],[3,"Block"],[3,"BlockTxn"],[3,"CompactBlock"],[3,"FeeFilter"],[3,"FilterLoad"],[3,"FilterAdd"],[3,"GetBlocks"],[3,"GetBlockTxn"],[3,"GetData"],[3,"GetHeaders"],[3,"Headers"],[3,"Inv"],[3,"MerkleBlock"],[3,"NotFound"],[3,"Ping"],[3,"Pong"],[3,"SendCompact"],[3,"Tx"],[4,"FilterFlags"],[3,"AddressEntry"],[3,"V31402"],[3,"V0"],[4,"Addr"],[3,"FilterClear"],[3,"GetAddr"],[3,"MemPool"],[3,"Reject"],[4,"RejectCode"],[3,"SendHeaders"],[3,"Verack"],[3,"V0"],[3,"V106"],[3,"V70001"],[4,"Version"],[8,"Payload"],[3,"H32"],[3,"H48"],[3,"TaggedBytes"],[3,"H520"],[3,"H264"],[3,"H512"],[3,"H256"],[3,"H96"],[3,"H160"]]};
searchIndex["miner"]={"doc":"","items":[[3,"BlockAssembler","miner","Block assembler",N,N],[12,"max_block_size","","",0,N],[12,"max_block_sigops","","",0,N],[3,"BlockTemplate","","Block template as described in BIP0022",N,N],[12,"version","","Version",1,N],[12,"previous_header_hash","","The hash of previous block",1,N],[12,"time","","The current time as seen by the server",1,N],[12,"bits","","The compressed difficulty",1,N],[12,"height","","Block height",1,N],[12,"transactions","","Block transactions (excluding coinbase)",1,N],[12,"coinbase_value","","Total funds available for the coinbase (in Satoshis)",1,N],[12,"size_limit","","Number of bytes allowed in the block",1,N],[12,"sigop_limit","","Number of sigops allowed in the block",1,N],[3,"MemoryPool","","Transactions memory pool",N,N],[3,"HashedOutPoint","","",N,N],[3,"MemoryPoolInformation","","Information on current `MemoryPool` state",N,N],[12,"transactions_count","","Number of transactions currently in the `MemoryPool`",2,N],[12,"transactions_size_in_bytes","","Total number of bytes occupied by transactions from the `MemoryPool`",2,N],[3,"NonFinalDoubleSpendSet","","Set of transaction outputs, which can be replaced if newer transaction replaces non-final transaction in memory pool",N,N],[12,"double_spends","","Double-spend outputs (outputs of newer transaction, which are also spent by nonfinal transactions of mempool)",3,N],[12,"dependent_spends","","Outputs which also will be removed from memory pool in case of newer transaction insertion (i.e. outputs of nonfinal transactions && their descendants)",3,N],[4,"MemoryPoolOrderingStrategy","","Transactions ordering strategy",N,N],[13,"ByTimestamp","","Order transactions by the time they have entered the memory pool",4,N],[13,"ByTransactionScore","","Order transactions by their individual mining score",4,N],[13,"ByPackageScore","","Order transactions by their in-pool package mining score (score for mining this transaction + all descendants transactions)",4,N],[4,"DoubleSpendCheckResult","","Result of checking double spend with",N,N],[13,"NoDoubleSpend","","No double spend",5,N],[13,"DoubleSpend","","Input {self.1, self.2} of new transaction is already spent in previous final memory-pool transaction {self.0}",5,N],[13,"NonFinalDoubleSpend","","Some inputs of new transaction are already spent by non-final memory-pool transactions",5,N],[5,"find_solution","","Simple bitcoin cpu miner.",N,[[["blocktemplate"],["t"],["u256"]],["option",["solution"]]]],[5,"transaction_fee","","",N,[[["transactionprovider"],["transaction"]],["u64"]]],[5,"transaction_fee_rate","","",N,[[["transactionprovider"],["transaction"]],["u64"]]],[11,"create_new_block","","",0,[[["self"],["sharedstore"],["memorypool"],["u32"],["consensusparams"]],["blocktemplate"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["orderingstrategy"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["hashedoutpoint"]],["bool"]]],[11,"ne","","",7,[[["self"],["hashedoutpoint"]],["bool"]]],[11,"clone","","",7,[[["self"]],["hashedoutpoint"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["doublespendcheckresult"]],["bool"]]],[11,"ne","","",5,[[["self"],["doublespendcheckresult"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["nonfinaldoublespendset"]],["bool"]]],[11,"ne","","",3,[[["self"],["nonfinaldoublespendset"]],["bool"]]],[11,"from","","",7,[[["outpoint"]],["self"]]],[11,"hash","","",7,[[["self"],["h"]]]],[11,"default","","",6,[[],["self"]]],[11,"new","","Creates new memory pool",6,[[],["self"]]],[11,"insert_verified","","Insert verified transaction to the `MemoryPool`",6,[[["self"],["indexedtransaction"]]]],[11,"iter","","Iterator over memory pool transactions according to specified strategy",6,[[["self"],["orderingstrategy"]],["memorypooliterator"]]],[11,"remove_by_hash","","Removes single transaction by its hash. All descedants remain in the pool.",6,[[["self"],["h256"]],["option",["transaction"]]]],[11,"check_double_spend","","Checks if `transaction` spends some outputs, already spent by inpool transactions.",6,[[["self"],["transaction"]],["doublespendcheckresult"]]],[11,"remove_by_prevout","","Removes transaction (and all its descendants) which has spent given output",6,[[["self"],["outpoint"]],["option",["vec"]]]],[11,"read_by_hash","","Reads single transaction by its hash.",6,[[["self"],["h256"]],["option",["transaction"]]]],[11,"read_with_strategy","","Reads hash of the 'top' transaction from the `MemoryPool` using selected strategy. Ancestors are always returned before descendant transactions.",6,[[["self"],["orderingstrategy"]],["option",["h256"]]]],[11,"read_n_with_strategy","","Reads hashes of up to n transactions from the `MemoryPool`, using selected strategy. Ancestors are always returned before descendant transactions. Use this function with care, only if really needed (heavy memory usage)",6,[[["self"],["usize"],["orderingstrategy"]],["vec",["h256"]]]],[11,"remove_with_strategy","","Removes the 'top' transaction from the `MemoryPool` using selected strategy. Ancestors are always removed before descendant transactions.",6,[[["self"],["orderingstrategy"]],["option",["indexedtransaction"]]]],[11,"remove_n_with_strategy","","Removes up to n transactions from the `MemoryPool`, using selected strategy. Ancestors are always removed before descendant transactions.",6,[[["self"],["usize"],["orderingstrategy"]],["vec",["indexedtransaction"]]]],[11,"set_virtual_fee","","Set miner virtual fee for transaction",6,[[["self"],["h256"],["i64"]]]],[11,"get","","Get transaction by hash",6,[[["self"],["h256"]],["option",["transaction"]]]],[11,"contains","","Checks if transaction is in the mempool",6,[[["self"],["h256"]],["bool"]]],[11,"information","","Returns information on `MemoryPool` (as in GetMemPoolInfo RPC) https://bitcoin.org/en/developer-reference#getmempoolinfo",6,[[["self"]],["information"]]],[11,"get_transactions_ids","","Returns TXIDs of all transactions in `MemoryPool` (as in GetRawMemPool RPC) https://bitcoin.org/en/developer-reference#getrawmempool",6,[[["self"]],["vec",["h256"]]]],[11,"is_spent","","Returns true if output was spent",6,[[["self"],["outpoint"]],["bool"]]],[11,"transaction_bytes","","",6,[[["self"],["h256"]],["option",["bytes"]]]],[11,"transaction","","",6,[[["self"],["h256"]],["option",["transaction"]]]],[11,"transaction_output","","",6,[[["self"],["outpoint"],["usize"]],["option",["transactionoutput"]]]],[11,"is_spent","","",6,[[["self"],["outpoint"]],["bool"]]],[11,"heap_size_of_children","","",6,[[["self"]],["usize"]]]],"paths":[[3,"BlockAssembler"],[3,"BlockTemplate"],[3,"MemoryPoolInformation"],[3,"NonFinalDoubleSpendSet"],[4,"MemoryPoolOrderingStrategy"],[4,"DoubleSpendCheckResult"],[3,"MemoryPool"],[3,"HashedOutPoint"]]};
searchIndex["network"]={"doc":"","items":[[0,"hash","network","Fixed-size hashes",N,N],[3,"H32","network::hash","",N,N],[3,"H48","","",N,N],[3,"H96","","",N,N],[3,"H160","","",N,N],[3,"H256","","",N,N],[3,"H264","","",N,N],[3,"H512","","",N,N],[3,"H520","","",N,N],[0,"compact","network","Compact representation of `U256`",N,N],[3,"Compact","network::compact","Compact representation of `U256`",N,N],[3,"ConsensusParams","network","Parameters that influence chain consensus.",N,N],[12,"network","","Network.",0,N],[12,"bip16_time","","Time when BIP16 becomes active. See https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki",0,N],[12,"bip34_height","","Block height at which BIP34 becomes active. See https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki",0,N],[12,"bip65_height","","Block height at which BIP65 becomes active. See https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki",0,N],[12,"bip66_height","","Block height at which BIP65 becomes active. See https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki",0,N],[12,"fork","","Selected consensus fork.",0,N],[12,"rule_change_activation_threshold","","Version bits activation",0,N],[12,"miner_confirmation_window","","Number of blocks with the same set of rules",0,N],[12,"csv_deployment","","BIP68, BIP112, BIP113 deployment",0,N],[12,"segwit_deployment","","BIP141, BIP143, BIP147 deployment",0,N],[3,"BitcoinCashConsensusParams","","Bitcoin cash consensus parameters.",N,N],[12,"height","","Initial BCH hard fork height.",1,N],[12,"difficulty_adjustion_height","","Height of difficulty adjustment hardfork. https://reviews.bitcoinabc.org/D601",1,N],[12,"monolith_time","","Time of monolith (aka May 2018) hardfork. https://github.com/bitcoincashorg/spec/blob/4fbb0face661e293bcfafe1a2a4744dcca62e50d/may-2018-hardfork.md",1,N],[3,"Deployment","","",N,N],[12,"name","","Deployment's name",2,N],[12,"bit","","Bit",2,N],[12,"start_time","","Start time",2,N],[12,"timeout","","Timeout",2,N],[12,"activation","","Activation block number (if already activated)",2,N],[4,"ConsensusFork","","Concurrent consensus rule forks.",N,N],[13,"BitcoinCore","","No fork.",3,N],[13,"BitcoinCash","","Bitcoin Cash (aka UAHF). `u32` is height of the first block, for which new consensus rules are applied. Briefly: no SegWit + blocks up to 8MB + replay protection. Technical specification: UAHF Technical Specification - https://github.com/Bitcoin-UAHF/spec/blob/master/uahf-technical-spec.md BUIP-HF Digest for replay protected signature verification across hard forks - https://github.com/Bitcoin-UAHF/spec/blob/master/replay-protected-sighash.md",3,N],[4,"Network","","Bitcoin network",N,N],[13,"Mainnet","","The original and main network for Bitcoin transactions, where satoshis have real economic value.",4,N],[13,"Testnet","","The main bitcoin testnet.",4,N],[13,"Regtest","","Bitcoin regtest network.",4,N],[13,"Unitest","","Testnet for unittests, proof of work difficulty is almost 0",4,N],[13,"Other","","Any other network. By default behaves like bitcoin mainnet.",4,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["consensusparams"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["bitcoincashconsensusparams"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["consensusfork"]]],[11,"new","","",0,[[["network"],["consensusfork"]],["self"]]],[11,"magic","","",0,[[["self"]],["magic"]]],[11,"is_bip30_exception","","",0,[[["self"],["h256"],["u32"]],["bool"]]],[11,"absolute_maximum_block_size","","Absolute (across all forks) maximum block size. Currently is 8MB for post-HF BitcoinCash",3,[[],["usize"]]],[11,"absolute_maximum_block_sigops","","Absolute (across all forks) maximum number of sigops in single block. Currently is max(sigops) for 8MB post-HF BitcoinCash block",3,[[],["usize"]]],[11,"witness_scale_factor","","Witness scale factor (equal among all forks)",3,[[],["usize"]]],[11,"activation_height","","",3,[[["self"]],["u32"]]],[11,"max_transaction_size","","",3,[[["self"]],["usize"]]],[11,"min_block_size","","",3,[[["self"],["u32"]],["usize"]]],[11,"max_block_size","","",3,[[["self"],["u32"],["u32"]],["usize"]]],[11,"max_block_sigops","","",3,[[["self"],["u32"],["usize"]],["usize"]]],[11,"max_block_sigops_cost","","",3,[[["self"],["u32"],["usize"]],["usize"]]],[11,"max_block_weight","","",3,[[["self"],["u32"]],["usize"]]],[11,"new","","",1,[[["network"]],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["deployment"]]],[11,"matches","","",2,[[["self"],["u32"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["network"]],["bool"]]],[11,"ne","","",4,[[["self"],["network"]],["bool"]]],[11,"clone","","",4,[[["self"]],["network"]]],[11,"magic","","",4,[[["self"],["consensusfork"]],["magic"]]],[11,"max_bits","","",4,[[["self"]],["u256"]]],[11,"port","","",4,[[["self"]],["u16"]]],[11,"rpc_port","","",4,[[["self"]],["u16"]]],[11,"genesis_block","","",4,[[["self"]],["block"]]],[11,"default_verification_edge","","",4,[[["self"]],["h256"]]],[6,"Magic","","Network magic type.",N,N],[11,"take","network::hash","",5,N],[11,"reversed","","",5,[[["self"]],["h32"]]],[11,"size","","",5,[[],["usize"]]],[11,"is_zero","","",5,[[["self"]],["bool"]]],[11,"clone","","",5,[[["self"]],["h32"]]],[11,"clone","","",6,[[["self"]],["h48"]]],[11,"clone","","",7,[[["self"]],["h520"]]],[11,"clone","network::compact","",8,[[["self"]],["compact"]]],[11,"clone","network::hash","",9,[[["self"]],["h264"]]],[11,"clone","","",10,[[["self"]],["h512"]]],[11,"clone","","",11,[[["self"]],["h256"]]],[11,"clone","","",12,[[["self"]],["h96"]]],[11,"clone","","",13,[[["self"]],["h160"]]],[11,"fmt","network::compact","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","network::hash","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",12,[[["self"],["h96"]],["option",["ordering"]]]],[11,"partial_cmp","","",7,[[["self"],["h520"]],["option",["ordering"]]]],[11,"partial_cmp","","",13,[[["self"],["h160"]],["option",["ordering"]]]],[11,"partial_cmp","","",5,[[["self"],["h32"]],["option",["ordering"]]]],[11,"partial_cmp","","",11,[[["self"],["h256"]],["option",["ordering"]]]],[11,"partial_cmp","","",10,[[["self"],["h512"]],["option",["ordering"]]]],[11,"partial_cmp","","",6,[[["self"],["h48"]],["option",["ordering"]]]],[11,"partial_cmp","","",9,[[["self"],["h264"]],["option",["ordering"]]]],[11,"from_str","","",11,[[["str"]],["result",["h256"]]]],[11,"from_str","","",6,[[["str"]],["result",["h48"]]]],[11,"from_str","","",9,[[["str"]],["result",["h264"]]]],[11,"from_str","","",5,[[["str"]],["result",["h32"]]]],[11,"from_str","","",12,[[["str"]],["result",["h96"]]]],[11,"from_str","","",7,[[["str"]],["result",["h520"]]]],[11,"from_str","","",13,[[["str"]],["result",["h160"]]]],[11,"from_str","","",10,[[["str"]],["result",["h512"]]]],[11,"deref_mut","","",13,N],[11,"deref_mut","","",11,N],[11,"deref_mut","","",6,N],[11,"deref_mut","","",5,N],[11,"deref_mut","","",9,N],[11,"deref_mut","","",7,N],[11,"deref_mut","","",10,N],[11,"deref_mut","","",12,N],[11,"default","","",13,[[],["h160"]]],[11,"default","","",7,[[],["h520"]]],[11,"default","","",9,[[],["h264"]]],[11,"default","","",6,[[],["h48"]]],[11,"default","","",5,[[],["h32"]]],[11,"default","","",11,[[],["h256"]]],[11,"default","","",12,[[],["h96"]]],[11,"default","","",10,[[],["h512"]]],[11,"hash","","",5,N],[11,"hash","","",6,N],[11,"hash","","",10,N],[11,"hash","","",7,N],[11,"hash","","",9,N],[11,"hash","","",12,N],[11,"hash","","",13,N],[11,"hash","","",11,N],[11,"deref","","",10,N],[11,"deref","","",5,N],[11,"deref","","",13,N],[11,"deref","","",9,N],[11,"deref","","",12,N],[11,"deref","","",11,N],[11,"deref","","",7,N],[11,"deref","","",6,N],[11,"heap_size_of_children","","",7,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",10,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",11,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",12,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",9,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",6,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",5,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",13,[[["self"]],["usize"]]],[11,"as_ref","","",10,[[["self"]],["h512"]]],[11,"as_ref","","",9,[[["self"]],["h264"]]],[11,"as_ref","","",13,[[["self"]],["h160"]]],[11,"as_ref","","",7,[[["self"]],["h520"]]],[11,"as_ref","","",6,[[["self"]],["h48"]]],[11,"as_ref","","",5,[[["self"]],["h32"]]],[11,"as_ref","","",11,[[["self"]],["h256"]]],[11,"as_ref","","",12,[[["self"]],["h96"]]],[11,"from","","",7,[[["str"]],["h520"]]],[11,"from","","",10,N],[11,"from","","",10,[[["str"]],["h512"]]],[11,"from","","",9,[[["u8"]],["h264"]]],[11,"from","","",12,[[["u8"]],["h96"]]],[11,"from","","",11,[[["str"]],["h256"]]],[11,"from","","",5,N],[11,"from","network::compact","",8,[[["u32"]],["compact"]]],[11,"from","network::hash","",12,N],[11,"from","network::compact","",8,[[["u256"]],["compact"]]],[11,"from","network::hash","",5,[[["u8"]],["h32"]]],[11,"from","","",9,N],[11,"from","","",6,[[["u8"]],["h48"]]],[11,"from","","",10,[[["u8"]],["h512"]]],[11,"from","","",9,N],[11,"from","","",5,N],[11,"from","","",7,[[["u8"]],["h520"]]],[11,"from","","",6,N],[11,"from","","",7,N],[11,"from","","",11,N],[11,"from","","",12,N],[11,"from","","",5,[[["str"]],["h32"]]],[11,"from","","",12,[[["str"]],["h96"]]],[11,"from","","",6,N],[11,"from","","",11,[[["u8"]],["h256"]]],[11,"from","","",13,N],[11,"from","","",6,[[["str"]],["h48"]]],[11,"from","","",13,N],[11,"from","","",9,[[["str"]],["h264"]]],[11,"from","","",13,[[["u8"]],["h160"]]],[11,"from","","",7,N],[11,"from","","",13,[[["str"]],["h160"]]],[11,"from","","",10,N],[11,"from","","",11,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",13,[[["self"],["h160"]],["bool"]]],[11,"eq","","",9,[[["self"],["h264"]],["bool"]]],[11,"eq","network::compact","",8,[[["self"],["compact"]],["bool"]]],[11,"ne","","",8,[[["self"],["compact"]],["bool"]]],[11,"eq","network::hash","",10,[[["self"],["h512"]],["bool"]]],[11,"eq","","",5,[[["self"],["h32"]],["bool"]]],[11,"eq","","",11,[[["self"],["h256"]],["bool"]]],[11,"eq","","",12,[[["self"],["h96"]],["bool"]]],[11,"eq","","",7,[[["self"],["h520"]],["bool"]]],[11,"eq","","",6,[[["self"],["h48"]],["bool"]]],[11,"serialize","","",10,N],[11,"serialized_size","","",10,[[["self"]],["usize"]]],[11,"serialize","network::compact","",8,N],[11,"serialize","network::hash","",6,N],[11,"serialized_size","","",6,[[["self"]],["usize"]]],[11,"serialize","","",9,N],[11,"serialized_size","","",9,[[["self"]],["usize"]]],[11,"serialize","","",5,N],[11,"serialized_size","","",5,[[["self"]],["usize"]]],[11,"serialize","","",11,N],[11,"serialized_size","","",11,[[["self"]],["usize"]]],[11,"serialize","","",13,N],[11,"serialized_size","","",13,[[["self"]],["usize"]]],[11,"serialize","","",7,N],[11,"serialized_size","","",7,[[["self"]],["usize"]]],[11,"serialize","","",12,N],[11,"serialized_size","","",12,[[["self"]],["usize"]]],[11,"deserialize","","",7,[[["reader"]],["result",["h520","error"]]]],[11,"deserialize","","",6,[[["reader"]],["result",["h48","error"]]]],[11,"deserialize","","",11,[[["reader"]],["result",["h256","error"]]]],[11,"deserialize","","",12,[[["reader"]],["result",["h96","error"]]]],[11,"deserialize","","",13,[[["reader"]],["result",["h160","error"]]]],[11,"deserialize","","",9,[[["reader"]],["result",["h264","error"]]]],[11,"deserialize","","",5,[[["reader"]],["result",["h32","error"]]]],[11,"deserialize","network::compact","",8,[[["reader"]],["result",["compact","error"]]]],[11,"deserialize","network::hash","",10,[[["reader"]],["result",["h512","error"]]]],[11,"take","","",6,N],[11,"reversed","","",6,[[["self"]],["h48"]]],[11,"size","","",6,[[],["usize"]]],[11,"is_zero","","",6,[[["self"]],["bool"]]],[11,"take","","",12,N],[11,"reversed","","",12,[[["self"]],["h96"]]],[11,"size","","",12,[[],["usize"]]],[11,"is_zero","","",12,[[["self"]],["bool"]]],[11,"take","","",13,N],[11,"reversed","","",13,[[["self"]],["h160"]]],[11,"size","","",13,[[],["usize"]]],[11,"is_zero","","",13,[[["self"]],["bool"]]],[11,"from_reversed_str","","",11,[[["str"]],["h256"]]],[11,"to_reversed_str","","",11,[[["self"]],["string"]]],[11,"take","","",11,N],[11,"reversed","","",11,[[["self"]],["h256"]]],[11,"size","","",11,[[],["usize"]]],[11,"is_zero","","",11,[[["self"]],["bool"]]],[11,"take","","",9,N],[11,"reversed","","",9,[[["self"]],["h264"]]],[11,"size","","",9,[[],["usize"]]],[11,"is_zero","","",9,[[["self"]],["bool"]]],[11,"take","","",10,N],[11,"reversed","","",10,[[["self"]],["h512"]]],[11,"size","","",10,[[],["usize"]]],[11,"is_zero","","",10,[[["self"]],["bool"]]],[11,"take","","",7,N],[11,"reversed","","",7,[[["self"]],["h520"]]],[11,"size","","",7,[[],["usize"]]],[11,"is_zero","","",7,[[["self"]],["bool"]]],[11,"new","network::compact","",8,[[["u32"]],["compact"]]],[11,"max_value","","",8,[[],["compact"]]],[11,"to_u256","","Computes the target [0, T] that a blockhash must land in to be valid Returns value in error, if there is an overflow or its negative value",8,[[["self"]],["result",["u256","u256"]]]],[11,"from_u256","","",8,[[["u256"]],["compact"]]],[11,"to_f64","","",8,[[["self"]],["f64"]]]],"paths":[[3,"ConsensusParams"],[3,"BitcoinCashConsensusParams"],[3,"Deployment"],[4,"ConsensusFork"],[4,"Network"],[3,"H32"],[3,"H48"],[3,"H520"],[3,"Compact"],[3,"H264"],[3,"H512"],[3,"H256"],[3,"H96"],[3,"H160"]]};
searchIndex["p2p"]={"doc":"","items":[[0,"hash","p2p","Fixed-size hashes",N,N],[3,"H32","p2p::hash","",N,N],[3,"H48","","",N,N],[3,"H96","","",N,N],[3,"H160","","",N,N],[3,"H256","","",N,N],[3,"H264","","",N,N],[3,"H512","","",N,N],[3,"H520","","",N,N],[0,"bytes","p2p","Wrapper around `Vec<u8>`",N,N],[3,"Bytes","p2p::bytes","Wrapper around `Vec<u8>`",N,N],[3,"TaggedBytes","","Wrapper around `Vec<u8>` which represent associated type",N,N],[3,"Config","p2p","",N,N],[12,"threads","","Number of threads used by p2p thread pool.",0,N],[12,"inbound_connections","","Number of inbound connections.",0,N],[12,"outbound_connections","","Number of outbound connections.",0,N],[12,"connection","","Configuration for every connection.",0,N],[12,"peers","","Connect only to these nodes.",0,N],[12,"seeds","","Connect to these nodes to retrieve peer addresses, and disconnect.",0,N],[12,"node_table_path","","p2p/nodes.csv file path.",0,N],[12,"preferable_services","","Peers with this services will get a boost in node_table.",0,N],[12,"internet_protocol","","Internet protocol.",0,N],[3,"NetConfig","","",N,N],[12,"protocol_version","","",1,N],[12,"protocol_minimum","","",1,N],[12,"magic","","",1,N],[12,"local_address","","",1,N],[12,"services","","",1,N],[12,"user_agent","","",1,N],[12,"start_height","","",1,N],[12,"relay","","",1,N],[3,"P2P","","",N,N],[3,"Context","","Network context.",N,N],[3,"PeerInfo","","",N,N],[12,"id","","",2,N],[12,"address","","",2,N],[12,"user_agent","","",2,N],[12,"direction","","",2,N],[12,"version","","",2,N],[12,"version_message","","",2,N],[12,"magic","","",2,N],[4,"NodeTableError","","",N,N],[13,"AddressAlreadyAdded","","",3,N],[13,"NoAddressInTable","","",3,N],[4,"InternetProtocol","","",N,N],[13,"Any","","",4,N],[13,"IpV4","","",4,N],[13,"IpV6","","",4,N],[4,"Direction","","",N,N],[13,"Inbound","","",5,N],[13,"Outbound","","",5,N],[5,"event_loop","","",N,[[],["core"]]],[5,"forever","","",N,[[],["empty"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["config"]]],[11,"version","","",1,[[["self"],["socketaddr"]],["version"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["internetprotocol"]],["bool"]]],[11,"clone","","",4,[[["self"]],["internetprotocol"]]],[11,"default","","",4,[[],["self"]]],[11,"from_str","","",4,[[["str"]],["result"]]],[11,"is_allowed","","",4,[[["self"],["socketaddr"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["direction"]],["bool"]]],[11,"clone","","",5,[[["self"]],["direction"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["peerinfo"]],["bool"]]],[11,"ne","","",2,[[["self"],["peerinfo"]],["bool"]]],[11,"clone","","",2,[[["self"]],["peerinfo"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["config"]]],[11,"new","","Creates new context with reference to local sync node, thread pool and event loop.",6,[[["localsyncnoderef"],["cpupool"],["remote"],["config"]],["result",["box"]]]],[11,"spawn","","Spawns a future using thread pool and schedules execution of it with event loop handle.",6,[[["self"],["f"]]]],[11,"execute_after","","Schedules execution of function in future. Use wisely, it keeps used objects in memory until after it is resolved.",6,[[["self"],["duration"],["f"]]]],[11,"node_table_entries","","Returns addresses of recently active nodes. Sorted and limited to 1000.",6,[[["self"]],["vec",["node"]]]],[11,"update_node_table","","Updates node table.",6,[[["self"],["vec",["addressentry"]]]]],[11,"penalize_node","","Penalize node.",6,[[["self"],["socketaddr"]]]],[11,"add_node","","Adds node to table.",6,[[["self"],["socketaddr"]],["result",["nodetableerror"]]]],[11,"remove_node","","Removes node from table.",6,[[["self"],["socketaddr"]],["result",["nodetableerror"]]]],[11,"autoconnect","","Every 10 seconds check if we have reached maximum number of outbound connections. If not, connect to best peers.",6,[[["arc",["context"]],["handle"]]]],[11,"connect","","Connect to socket using given context.",6,[[["arc",["context"]],["socketaddr"]]]],[11,"connect_normal","","",6,[[["arc",["context"]],["socketaddr"]]]],[11,"accept_connection_future","","",6,[[["arc",["context"]],["tcpstream"],["socketaddr"],["handle"],["netconfig"]],["box",["future"]]]],[11,"accept_connection","","",6,[[["arc",["context"]],["tcpstream"],["socketaddr"],["netconfig"]]]],[11,"listen","","Starts tcp server and listens for incomming connections.",6,[[["arc",["context"]],["handle"],["netconfig"]],["result",["box","error"]]]],[11,"on_message","","Called on incomming mesage.",6,[[["arc",["context"]],["arc",["channel"]]],["iofuture",["messageresult"]]]],[11,"send_to_peer","","Send message to a channel with given peer id.",6,[[["arc",["context"]],["peerid"],["t"],["u32"]],["iofuture"]]],[11,"send_message_to_peer","","",6,[[["arc",["context"]],["peerid"],["t"]],["iofuture"]]],[11,"send","","Send message using given channel.",6,[[["arc",["context"]],["arc",["channel"]],["t"]],["iofuture"]]],[11,"close_channel","","Close channel with given peer info.",6,[[["self"],["peerid"]]]],[11,"close_channel_with_error","","Close channel with given peer info.",6,[[["self"],["peerid"],["error"]]]],[11,"create_sync_session","","",6,[[["self"],["i32"],["services"],["outboundsyncconnectionref"]],["inboundsyncconnectionref"]]],[11,"connections","","",6,[[["self"]],["connections"]]],[11,"nodes","","",6,[[["self"]],["vec",["node"]]]],[11,"drop","","",7,[[["self"]]]],[11,"new","","",7,[[["config"],["localsyncnoderef"],["handle"]],["result",["box"]]]],[11,"run","","",7,[[["self"]],["result",["box"]]]],[11,"connect","","Attempts to connect to the specified node",7,[[["self"],["socketaddr"]]]],[11,"connect_to_seednode","","",7,[[["self"],["resolver"],["str"]]]],[11,"context","","",7,[[["self"]],["arc"]]],[6,"PeerId","","",N,N],[6,"InboundSyncConnectionRef","","",N,N],[6,"OutboundSyncConnectionRef","","",N,N],[6,"LocalSyncNodeRef","","",N,N],[8,"InboundSyncConnection","","",N,N],[10,"start_sync_session","","",8,[[["self"],["string"],["version"]]]],[10,"close_session","","",8,[[["self"]]]],[10,"on_inventory","","",8,[[["self"],["inv"]]]],[10,"on_getdata","","",8,[[["self"],["getdata"]]]],[10,"on_getblocks","","",8,[[["self"],["getblocks"]]]],[10,"on_getheaders","","",8,[[["self"],["getheaders"],["u32"]]]],[10,"on_transaction","","",8,[[["self"],["tx"]]]],[10,"on_block","","",8,[[["self"],["block"]]]],[10,"on_headers","","",8,[[["self"],["headers"]]]],[10,"on_mempool","","",8,[[["self"],["mempool"]]]],[10,"on_filterload","","",8,[[["self"],["filterload"]]]],[10,"on_filteradd","","",8,[[["self"],["filteradd"]]]],[10,"on_filterclear","","",8,[[["self"],["filterclear"]]]],[10,"on_merkleblock","","",8,[[["self"],["merkleblock"]]]],[10,"on_sendheaders","","",8,[[["self"],["sendheaders"]]]],[10,"on_feefilter","","",8,[[["self"],["feefilter"]]]],[10,"on_send_compact","","",8,[[["self"],["sendcompact"]]]],[10,"on_compact_block","","",8,[[["self"],["compactblock"]]]],[10,"on_get_block_txn","","",8,[[["self"],["getblocktxn"]]]],[10,"on_block_txn","","",8,[[["self"],["blocktxn"]]]],[10,"on_notfound","","",8,[[["self"],["notfound"]]]],[8,"OutboundSyncConnection","","",N,N],[10,"send_inventory","","",9,[[["self"],["inv"]]]],[10,"send_getdata","","",9,[[["self"],["getdata"]]]],[10,"send_getblocks","","",9,[[["self"],["getblocks"]]]],[10,"send_getheaders","","",9,[[["self"],["getheaders"]]]],[10,"send_transaction","","",9,[[["self"],["tx"]]]],[10,"send_block","","",9,[[["self"],["block"]]]],[10,"send_witness_transaction","","",9,[[["self"],["tx"]]]],[10,"send_witness_block","","",9,[[["self"],["block"]]]],[10,"send_headers","","",9,[[["self"],["headers"]]]],[10,"respond_headers","","",9,[[["self"],["headers"],["u32"]]]],[10,"send_mempool","","",9,[[["self"],["mempool"]]]],[10,"send_filterload","","",9,[[["self"],["filterload"]]]],[10,"send_filteradd","","",9,[[["self"],["filteradd"]]]],[10,"send_filterclear","","",9,[[["self"],["filterclear"]]]],[10,"send_merkleblock","","",9,[[["self"],["merkleblock"]]]],[10,"send_sendheaders","","",9,[[["self"],["sendheaders"]]]],[10,"send_feefilter","","",9,[[["self"],["feefilter"]]]],[10,"send_send_compact","","",9,[[["self"],["sendcompact"]]]],[10,"send_compact_block","","",9,[[["self"],["compactblock"]]]],[10,"send_get_block_txn","","",9,[[["self"],["getblocktxn"]]]],[10,"send_block_txn","","",9,[[["self"],["blocktxn"]]]],[10,"send_notfound","","",9,[[["self"],["notfound"]]]],[10,"ignored","","",9,[[["self"],["u32"]]]],[10,"close","","",9,[[["self"]]]],[8,"LocalSyncNode","","",N,N],[10,"create_sync_session","","",10,[[["self"],["i32"],["services"],["outboundsyncconnectionref"]],["inboundsyncconnectionref"]]],[11,"take","p2p::hash","",11,N],[11,"reversed","","",11,[[["self"]],["h32"]]],[11,"size","","",11,[[],["usize"]]],[11,"is_zero","","",11,[[["self"]],["bool"]]],[11,"clone","p2p::bytes","",12,[[["self"]],["bytes"]]],[11,"clone","p2p::hash","",11,[[["self"]],["h32"]]],[11,"clone","","",13,[[["self"]],["h48"]]],[11,"clone","p2p::bytes","",14,[[["self"]],["taggedbytes"]]],[11,"clone","p2p::hash","",15,[[["self"]],["h520"]]],[11,"clone","","",16,[[["self"]],["h264"]]],[11,"clone","","",17,[[["self"]],["h512"]]],[11,"clone","","",18,[[["self"]],["h256"]]],[11,"clone","","",19,[[["self"]],["h96"]]],[11,"clone","","",20,[[["self"]],["h160"]]],[11,"fmt","p2p::bytes","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","p2p::hash","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",19,[[["self"],["h96"]],["option",["ordering"]]]],[11,"partial_cmp","","",15,[[["self"],["h520"]],["option",["ordering"]]]],[11,"partial_cmp","","",20,[[["self"],["h160"]],["option",["ordering"]]]],[11,"partial_cmp","","",11,[[["self"],["h32"]],["option",["ordering"]]]],[11,"partial_cmp","","",18,[[["self"],["h256"]],["option",["ordering"]]]],[11,"partial_cmp","","",17,[[["self"],["h512"]],["option",["ordering"]]]],[11,"partial_cmp","","",13,[[["self"],["h48"]],["option",["ordering"]]]],[11,"partial_cmp","","",16,[[["self"],["h264"]],["option",["ordering"]]]],[11,"from_str","","",18,[[["str"]],["result",["h256"]]]],[11,"from_str","","",13,[[["str"]],["result",["h48"]]]],[11,"from_str","","",16,[[["str"]],["result",["h264"]]]],[11,"from_str","","",11,[[["str"]],["result",["h32"]]]],[11,"from_str","","",19,[[["str"]],["result",["h96"]]]],[11,"from_str","p2p::bytes","",12,[[["str"]],["result",["bytes"]]]],[11,"from_str","p2p::hash","",15,[[["str"]],["result",["h520"]]]],[11,"from_str","","",20,[[["str"]],["result",["h160"]]]],[11,"from_str","","",17,[[["str"]],["result",["h512"]]]],[11,"deref_mut","","",20,N],[11,"deref_mut","","",18,N],[11,"deref_mut","","",13,N],[11,"deref_mut","","",11,N],[11,"deref_mut","","",16,N],[11,"deref_mut","","",15,N],[11,"deref_mut","p2p::bytes","",14,N],[11,"deref_mut","","",12,N],[11,"deref_mut","p2p::hash","",17,N],[11,"deref_mut","","",19,N],[11,"default","","",20,[[],["h160"]]],[11,"default","","",15,[[],["h520"]]],[11,"default","","",16,[[],["h264"]]],[11,"default","","",13,[[],["h48"]]],[11,"default","","",11,[[],["h32"]]],[11,"default","","",18,[[],["h256"]]],[11,"default","p2p::bytes","",12,[[],["bytes"]]],[11,"default","","",14,[[],["taggedbytes"]]],[11,"default","p2p::hash","",19,[[],["h96"]]],[11,"default","","",17,[[],["h512"]]],[11,"write","p2p::bytes","",12,N],[11,"flush","","",12,[[["self"]],["result",["error"]]]],[11,"hash","p2p::hash","",11,N],[11,"hash","","",13,N],[11,"hash","","",17,N],[11,"hash","","",15,N],[11,"hash","","",16,N],[11,"hash","p2p::bytes","",12,N],[11,"hash","p2p::hash","",19,N],[11,"hash","","",20,N],[11,"hash","","",18,N],[11,"as_mut","p2p::bytes","",12,N],[11,"as_mut","","",14,N],[11,"deref","p2p::hash","",17,N],[11,"deref","p2p::bytes","",14,N],[11,"deref","p2p::hash","",11,N],[11,"deref","","",20,N],[11,"deref","","",16,N],[11,"deref","","",19,N],[11,"deref","","",18,N],[11,"deref","","",15,N],[11,"deref","p2p::bytes","",12,N],[11,"deref","p2p::hash","",13,N],[11,"heap_size_of_children","","",15,[[["self"]],["usize"]]],[11,"heap_size_of_children","p2p::bytes","",12,[[["self"]],["usize"]]],[11,"heap_size_of_children","p2p::hash","",17,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",18,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",19,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",16,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",13,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",11,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",20,[[["self"]],["usize"]]],[11,"as_ref","p2p::bytes","",14,N],[11,"as_ref","p2p::hash","",17,[[["self"]],["h512"]]],[11,"as_ref","","",16,[[["self"]],["h264"]]],[11,"as_ref","","",20,[[["self"]],["h160"]]],[11,"as_ref","","",15,[[["self"]],["h520"]]],[11,"as_ref","","",13,[[["self"]],["h48"]]],[11,"as_ref","p2p::bytes","",12,N],[11,"as_ref","p2p::hash","",11,[[["self"]],["h32"]]],[11,"as_ref","","",18,[[["self"]],["h256"]]],[11,"as_ref","","",19,[[["self"]],["h96"]]],[11,"from","","",15,[[["str"]],["h520"]]],[11,"from","p2p::bytes","",12,N],[11,"from","p2p::hash","",17,N],[11,"from","","",17,[[["str"]],["h512"]]],[11,"from","p2p::bytes","",12,[[["vec",["u8"]]],["bytes"]]],[11,"from","p2p::hash","",16,[[["u8"]],["h264"]]],[11,"from","","",19,[[["u8"]],["h96"]]],[11,"from","","",18,[[["str"]],["h256"]]],[11,"from","","",11,N],[11,"from","","",19,N],[11,"from","","",11,[[["u8"]],["h32"]]],[11,"from","","",16,N],[11,"from","","",13,[[["u8"]],["h48"]]],[11,"from","","",17,[[["u8"]],["h512"]]],[11,"from","","",16,N],[11,"from","","",11,N],[11,"from","","",15,[[["u8"]],["h520"]]],[11,"from","","",13,N],[11,"from","","",15,N],[11,"from","","",18,N],[11,"from","","",19,N],[11,"from","","",11,[[["str"]],["h32"]]],[11,"from","","",19,[[["str"]],["h96"]]],[11,"from","p2p::bytes","",12,[[["str"]],["bytes"]]],[11,"from","p2p::hash","",13,N],[11,"from","","",18,[[["u8"]],["h256"]]],[11,"from","","",20,N],[11,"from","","",13,[[["str"]],["h48"]]],[11,"from","","",20,N],[11,"from","","",16,[[["str"]],["h264"]]],[11,"from","","",20,[[["u8"]],["h160"]]],[11,"from","","",15,N],[11,"from","","",20,[[["str"]],["h160"]]],[11,"from","","",17,N],[11,"from","","",18,N],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",20,[[["self"],["h160"]],["bool"]]],[11,"eq","","",16,[[["self"],["h264"]],["bool"]]],[11,"eq","","",17,[[["self"],["h512"]],["bool"]]],[11,"eq","p2p::bytes","",14,[[["self"],["taggedbytes"]],["bool"]]],[11,"ne","","",14,[[["self"],["taggedbytes"]],["bool"]]],[11,"eq","","",12,[[["self"],["bytes"]],["bool"]]],[11,"ne","","",12,[[["self"],["bytes"]],["bool"]]],[11,"eq","p2p::hash","",11,[[["self"],["h32"]],["bool"]]],[11,"eq","","",18,[[["self"],["h256"]],["bool"]]],[11,"eq","","",19,[[["self"],["h96"]],["bool"]]],[11,"eq","","",15,[[["self"],["h520"]],["bool"]]],[11,"eq","","",13,[[["self"],["h48"]],["bool"]]],[11,"from","p2p::bytes","",12,[[["message"]],["bytes"]]],[11,"serialize","p2p::hash","",17,N],[11,"serialized_size","","",17,[[["self"]],["usize"]]],[11,"serialize","","",13,N],[11,"serialized_size","","",13,[[["self"]],["usize"]]],[11,"serialize","p2p::bytes","",12,N],[11,"serialized_size","","",12,[[["self"]],["usize"]]],[11,"serialize","p2p::hash","",16,N],[11,"serialized_size","","",16,[[["self"]],["usize"]]],[11,"serialize","","",11,N],[11,"serialized_size","","",11,[[["self"]],["usize"]]],[11,"serialize","","",18,N],[11,"serialized_size","","",18,[[["self"]],["usize"]]],[11,"serialize","","",20,N],[11,"serialized_size","","",20,[[["self"]],["usize"]]],[11,"serialize","","",15,N],[11,"serialized_size","","",15,[[["self"]],["usize"]]],[11,"serialize","","",19,N],[11,"serialized_size","","",19,[[["self"]],["usize"]]],[11,"deserialize","","",15,[[["reader"]],["result",["h520","error"]]]],[11,"deserialize","","",13,[[["reader"]],["result",["h48","error"]]]],[11,"deserialize","","",18,[[["reader"]],["result",["h256","error"]]]],[11,"deserialize","","",19,[[["reader"]],["result",["h96","error"]]]],[11,"deserialize","","",20,[[["reader"]],["result",["h160","error"]]]],[11,"deserialize","p2p::bytes","",12,[[["reader"]],["result",["bytes","error"]]]],[11,"deserialize","p2p::hash","",16,[[["reader"]],["result",["h264","error"]]]],[11,"deserialize","","",11,[[["reader"]],["result",["h32","error"]]]],[11,"deserialize","","",17,[[["reader"]],["result",["h512","error"]]]],[11,"take","","",13,N],[11,"reversed","","",13,[[["self"]],["h48"]]],[11,"size","","",13,[[],["usize"]]],[11,"is_zero","","",13,[[["self"]],["bool"]]],[11,"take","","",19,N],[11,"reversed","","",19,[[["self"]],["h96"]]],[11,"size","","",19,[[],["usize"]]],[11,"is_zero","","",19,[[["self"]],["bool"]]],[11,"take","","",20,N],[11,"reversed","","",20,[[["self"]],["h160"]]],[11,"size","","",20,[[],["usize"]]],[11,"is_zero","","",20,[[["self"]],["bool"]]],[11,"from_reversed_str","","",18,[[["str"]],["h256"]]],[11,"to_reversed_str","","",18,[[["self"]],["string"]]],[11,"take","","",18,N],[11,"reversed","","",18,[[["self"]],["h256"]]],[11,"size","","",18,[[],["usize"]]],[11,"is_zero","","",18,[[["self"]],["bool"]]],[11,"take","","",16,N],[11,"reversed","","",16,[[["self"]],["h264"]]],[11,"size","","",16,[[],["usize"]]],[11,"is_zero","","",16,[[["self"]],["bool"]]],[11,"take","","",17,N],[11,"reversed","","",17,[[["self"]],["h512"]]],[11,"size","","",17,[[],["usize"]]],[11,"is_zero","","",17,[[["self"]],["bool"]]],[11,"take","","",15,N],[11,"reversed","","",15,[[["self"]],["h520"]]],[11,"size","","",15,[[],["usize"]]],[11,"is_zero","","",15,[[["self"]],["bool"]]],[11,"new","p2p::bytes","",12,[[],["bytes"]]],[11,"new_with_len","","",12,[[["usize"]],["bytes"]]],[11,"take","","",12,[[["self"]],["vec",["u8"]]]],[11,"len","","",12,[[["self"]],["usize"]]],[11,"append","","",12,N],[11,"split_off","","",12,[[["self"],["usize"]],["bytes"]]],[11,"new","","",14,[[["bytes"]],["taggedbytes"]]],[11,"into_raw","","",14,[[["self"]],["bytes"]]]],"paths":[[3,"Config"],[3,"NetConfig"],[3,"PeerInfo"],[4,"NodeTableError"],[4,"InternetProtocol"],[4,"Direction"],[3,"Context"],[3,"P2P"],[8,"InboundSyncConnection"],[8,"OutboundSyncConnection"],[8,"LocalSyncNode"],[3,"H32"],[3,"Bytes"],[3,"H48"],[3,"TaggedBytes"],[3,"H520"],[3,"H264"],[3,"H512"],[3,"H256"],[3,"H96"],[3,"H160"]]};
searchIndex["pbtc"]={"doc":"Parity bitcoin client.","items":[[17,"APP_INFO","pbtc","",N,N],[17,"PROTOCOL_VERSION","","",N,N],[17,"PROTOCOL_MINIMUM","","",N,N],[17,"USER_AGENT","","",N,N],[17,"REGTEST_USER_AGENT","","",N,N],[17,"LOG_INFO","","",N,N]],"paths":[]};
searchIndex["primitives"]={"doc":"","items":[[0,"bytes","primitives","Wrapper around `Vec<u8>`",N,N],[3,"Bytes","primitives::bytes","Wrapper around `Vec<u8>`",N,N],[3,"TaggedBytes","","Wrapper around `Vec<u8>` which represent associated type",N,N],[11,"default","","",0,[[],["bytes"]]],[11,"eq","","",0,[[["self"],["bytes"]],["bool"]]],[11,"ne","","",0,[[["self"],["bytes"]],["bool"]]],[11,"clone","","",0,[[["self"]],["bytes"]]],[11,"hash","","",0,N],[11,"new","","",0,[[],["self"]]],[11,"new_with_len","","",0,[[["usize"]],["self"]]],[11,"take","","",0,[[["self"]],["vec",["u8"]]]],[11,"len","","",0,[[["self"]],["usize"]]],[11,"append","","",0,[[["self"],["bytes"]]]],[11,"split_off","","",0,[[["self"],["usize"]],["bytes"]]],[11,"heap_size_of_children","","",0,[[["self"]],["usize"]]],[11,"from","","",0,N],[11,"from","","",0,[[["vec",["u8"]]],["self"]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"from_str","","",0,[[["str"]],["result"]]],[11,"write","","",0,N],[11,"flush","","",0,[[["self"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"as_ref","","",0,N],[11,"as_mut","","",0,N],[11,"default","","",1,[[],["taggedbytes"]]],[11,"eq","","",1,[[["self"],["taggedbytes"]],["bool"]]],[11,"ne","","",1,[[["self"],["taggedbytes"]],["bool"]]],[11,"clone","","",1,[[["self"]],["taggedbytes"]]],[11,"new","","",1,[[["bytes"]],["self"]]],[11,"into_raw","","",1,[[["self"]],["bytes"]]],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[0,"compact","primitives","Compact representation of `U256`",N,N],[3,"Compact","primitives::compact","Compact representation of `U256`",N,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["compact"]],["bool"]]],[11,"ne","","",2,[[["self"],["compact"]],["bool"]]],[11,"clone","","",2,[[["self"]],["compact"]]],[11,"from","","",2,[[["u32"]],["self"]]],[11,"from","","",2,[[["u256"]],["self"]]],[11,"new","","",2,[[["u32"]],["self"]]],[11,"max_value","","",2,[[],["self"]]],[11,"to_u256","","Computes the target [0, T] that a blockhash must land in to be valid Returns value in error, if there is an overflow or its negative value",2,[[["self"]],["result",["u256","u256"]]]],[11,"from_u256","","",2,[[["u256"]],["self"]]],[11,"to_f64","","",2,[[["self"]],["f64"]]],[0,"hash","primitives","Fixed-size hashes",N,N],[3,"H32","primitives::hash","",N,N],[3,"H48","","",N,N],[3,"H96","","",N,N],[3,"H160","","",N,N],[3,"H256","","",N,N],[3,"H264","","",N,N],[3,"H512","","",N,N],[3,"H520","","",N,N],[11,"default","","",3,[[],["self"]]],[11,"as_ref","","",3,[[["self"]],["h32"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"from","","",3,N],[11,"from","","",3,N],[11,"from","","",3,[[["str"]],["self"]]],[11,"from","","",3,[[["u8"]],["self"]]],[11,"from_str","","",3,[[["str"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"deref","","",3,N],[11,"deref_mut","","",3,N],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",3,[[["self"],["h"]]]],[11,"take","","",3,N],[11,"reversed","","",3,[[["self"]],["self"]]],[11,"size","","",3,[[],["usize"]]],[11,"is_zero","","",3,[[["self"]],["bool"]]],[11,"default","","",4,[[],["self"]]],[11,"as_ref","","",4,[[["self"]],["h48"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"from","","",4,N],[11,"from","","",4,N],[11,"from","","",4,[[["str"]],["self"]]],[11,"from","","",4,[[["u8"]],["self"]]],[11,"from_str","","",4,[[["str"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"deref","","",4,N],[11,"deref_mut","","",4,N],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"take","","",4,N],[11,"reversed","","",4,[[["self"]],["self"]]],[11,"size","","",4,[[],["usize"]]],[11,"is_zero","","",4,[[["self"]],["bool"]]],[11,"default","","",5,[[],["self"]]],[11,"as_ref","","",5,[[["self"]],["h96"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"from","","",5,N],[11,"from","","",5,N],[11,"from","","",5,[[["str"]],["self"]]],[11,"from","","",5,[[["u8"]],["self"]]],[11,"from_str","","",5,[[["str"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"deref","","",5,N],[11,"deref_mut","","",5,N],[11,"eq","","",5,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",5,[[["self"],["h"]]]],[11,"take","","",5,N],[11,"reversed","","",5,[[["self"]],["self"]]],[11,"size","","",5,[[],["usize"]]],[11,"is_zero","","",5,[[["self"]],["bool"]]],[11,"default","","",6,[[],["self"]]],[11,"as_ref","","",6,[[["self"]],["h160"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"from","","",6,N],[11,"from","","",6,N],[11,"from","","",6,[[["str"]],["self"]]],[11,"from","","",6,[[["u8"]],["self"]]],[11,"from_str","","",6,[[["str"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"deref","","",6,N],[11,"deref_mut","","",6,N],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",6,[[["self"],["h"]]]],[11,"take","","",6,N],[11,"reversed","","",6,[[["self"]],["self"]]],[11,"size","","",6,[[],["usize"]]],[11,"is_zero","","",6,[[["self"]],["bool"]]],[11,"default","","",7,[[],["self"]]],[11,"as_ref","","",7,[[["self"]],["h256"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"from","","",7,N],[11,"from","","",7,N],[11,"from","","",7,[[["str"]],["self"]]],[11,"from","","",7,[[["u8"]],["self"]]],[11,"from_str","","",7,[[["str"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"deref","","",7,N],[11,"deref_mut","","",7,N],[11,"eq","","",7,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",7,[[["self"],["h"]]]],[11,"take","","",7,N],[11,"reversed","","",7,[[["self"]],["self"]]],[11,"size","","",7,[[],["usize"]]],[11,"is_zero","","",7,[[["self"]],["bool"]]],[11,"default","","",8,[[],["self"]]],[11,"as_ref","","",8,[[["self"]],["h264"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"from","","",8,N],[11,"from","","",8,N],[11,"from","","",8,[[["str"]],["self"]]],[11,"from","","",8,[[["u8"]],["self"]]],[11,"from_str","","",8,[[["str"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"deref","","",8,N],[11,"deref_mut","","",8,N],[11,"eq","","",8,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",8,[[["self"],["h"]]]],[11,"take","","",8,N],[11,"reversed","","",8,[[["self"]],["self"]]],[11,"size","","",8,[[],["usize"]]],[11,"is_zero","","",8,[[["self"]],["bool"]]],[11,"default","","",9,[[],["self"]]],[11,"as_ref","","",9,[[["self"]],["h512"]]],[11,"clone","","",9,[[["self"]],["self"]]],[11,"from","","",9,N],[11,"from","","",9,N],[11,"from","","",9,[[["str"]],["self"]]],[11,"from","","",9,[[["u8"]],["self"]]],[11,"from_str","","",9,[[["str"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"deref","","",9,N],[11,"deref_mut","","",9,N],[11,"eq","","",9,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"take","","",9,N],[11,"reversed","","",9,[[["self"]],["self"]]],[11,"size","","",9,[[],["usize"]]],[11,"is_zero","","",9,[[["self"]],["bool"]]],[11,"default","","",10,[[],["self"]]],[11,"as_ref","","",10,[[["self"]],["h520"]]],[11,"clone","","",10,[[["self"]],["self"]]],[11,"from","","",10,N],[11,"from","","",10,N],[11,"from","","",10,[[["str"]],["self"]]],[11,"from","","",10,[[["u8"]],["self"]]],[11,"from_str","","",10,[[["str"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"deref","","",10,N],[11,"deref_mut","","",10,N],[11,"eq","","",10,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",10,[[["self"],["h"]]]],[11,"take","","",10,N],[11,"reversed","","",10,[[["self"]],["self"]]],[11,"size","","",10,[[],["usize"]]],[11,"is_zero","","",10,[[["self"]],["bool"]]],[11,"heap_size_of_children","","",3,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",4,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",5,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",6,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",7,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",8,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",9,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",10,[[["self"]],["usize"]]],[11,"from_reversed_str","","",7,[[["str"]],["self"]]],[11,"to_reversed_str","","",7,[[["self"]],["string"]]]],"paths":[[3,"Bytes"],[3,"TaggedBytes"],[3,"Compact"],[3,"H32"],[3,"H48"],[3,"H96"],[3,"H160"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"]]};
searchIndex["rpc"]={"doc":"","items":[[3,"MetaIoHandler","rpc","Request handler",N,N],[4,"Compatibility","","`IoHandler` json-rpc protocol compatibility",N,N],[13,"V1","","Compatible only with JSON-RPC 1.x",0,N],[13,"V2","","Compatible only with JSON-RPC 2.0",0,N],[13,"Both","","Compatible with both",0,N],[3,"Error","","Error object as defined in Spec",N,N],[12,"code","","Code",1,N],[12,"message","","Message",1,N],[12,"data","","Optional data",1,N],[3,"Remote","","Handle to an event loop, used to construct I/O objects, send messages, and otherwise interact indirectly with the event loop itself.",N,N],[3,"Server","","jsonrpc http server instance",N,N],[0,"v1","","",N,N],[3,"RawClient","rpc::v1","",N,N],[3,"RawClientCore","","",N,N],[3,"MinerClient","","",N,N],[3,"MinerClientCore","","",N,N],[3,"BlockChainClient","","",N,N],[3,"BlockChainClientCore","","",N,N],[3,"NetworkClient","","",N,N],[3,"NetworkClientCore","","",N,N],[0,"helpers","","",N,N],[0,"errors","rpc::v1::helpers","",N,N],[5,"unimplemented","rpc::v1::helpers::errors","",N,[[["option",["string"]]],["error"]]],[5,"invalid_params","","",N,[[["str"],["t"]],["error"]]],[5,"execution","","",N,[[["t"]],["error"]]],[5,"block_not_found","","",N,[[["t"]],["error"]]],[5,"block_at_height_not_found","","",N,[[["t"]],["error"]]],[5,"transaction_not_found","","",N,[[["t"]],["error"]]],[5,"transaction_output_not_found","","",N,[[["t"]],["error"]]],[5,"transaction_of_side_branch","","",N,[[["t"]],["error"]]],[5,"node_already_added","","",N,[[],["error"]]],[5,"node_not_added","","",N,[[],["error"]]],[5,"unknown","","",N,[[],["error"]]],[0,"impls","rpc::v1","",N,N],[3,"BlockChainClient","rpc::v1::impls","",N,N],[3,"BlockChainClientCore","","",N,N],[3,"MinerClient","","",N,N],[3,"MinerClientCore","","",N,N],[3,"RawClient","","",N,N],[3,"RawClientCore","","",N,N],[3,"NetworkClient","","",N,N],[3,"NetworkClientCore","","",N,N],[11,"new","rpc::v1","",2,[[["network"],["sharedstore"]],["self"]]],[11,"new","","",3,[[["t"]],["self"]]],[11,"best_block_hash","","",3,[[["self"]],["result",["h256","error"]]]],[11,"block_count","","",3,[[["self"]],["result",["u32","error"]]]],[11,"block_hash","","",3,[[["self"],["u32"]],["result",["h256","error"]]]],[11,"difficulty","","",3,[[["self"]],["result",["f64","error"]]]],[11,"block","","",3,[[["self"],["h256"],["trailing",["bool"]]],["result",["getblockresponse","error"]]]],[11,"transaction_out","","",3,[[["self"],["h256"],["u32"],["trailing",["bool"]]],["result",["gettxoutresponse","error"]]]],[11,"transaction_out_set_info","","",3,[[["self"]],["result",["gettxoutsetinforesponse","error"]]]],[11,"new","","",4,[[["localnoderef"]],["self"]]],[11,"new","","",5,[[["t"]],["self"]]],[11,"get_block_template","","",5,[[["self"],["blocktemplaterequest"]],["result",["blocktemplate","error"]]]],[11,"new","","",6,[[["localnoderef"]],["self"]]],[11,"do_create_raw_transaction","","",6,[[["vec",["transactioninput"]],["transactionoutputs"],["trailing",["u32"]]],["result",["globaltransaction","string"]]]],[11,"new","","",7,[[["t"]],["self"]]],[11,"send_raw_transaction","","",7,[[["self"],["rawtransaction"]],["result",["h256","error"]]]],[11,"create_raw_transaction","","",7,[[["self"],["vec",["transactioninput"]],["transactionoutputs"],["trailing",["u32"]]],["result",["rawtransaction","error"]]]],[11,"decode_raw_transaction","","",7,[[["self"],["rawtransaction"]],["result",["transaction","error"]]]],[11,"get_raw_transaction","","",7,[[["self"],["h256"],["trailing",["bool"]]],["result",["getrawtransactionresponse","error"]]]],[11,"add_node","","",8,[[["self"],["string"],["addnodeoperation"]],["result",["error"]]]],[11,"node_info","","",8,[[["self"],["bool"],["trailing",["string"]]],["result",["vec","error"]]]],[11,"connection_count","","",8,[[["self"]],["result",["usize","error"]]]],[11,"new","","",8,[[["t"]],["self"]]],[11,"new","","",9,[[["arc",["context"]]],["self"]]],[0,"traits","","",N,N],[8,"BlockChain","rpc::v1::traits","Parity-bitcoin blockchain data interface.",N,N],[10,"best_block_hash","","Get hash of best block. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getbestblockhash\", \"params\": [], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",10,[[["self"]],["result",["h256","error"]]]],[10,"block_count","","Get height of best block. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getblockcount\", \"params\": [], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",10,[[["self"]],["result",["u32","error"]]]],[10,"block_hash","","Get hash of block at given height. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getblockhash\", \"params\": [0], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",10,[[["self"],["u32"]],["result",["h256","error"]]]],[10,"difficulty","","Get proof-of-work difficulty as a multiple of the minimum difficulty @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getdifficulty\", \"params\": [], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",10,[[["self"]],["result",["f64","error"]]]],[10,"block","","Get information on given block. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getblock\", \"params\": [\"000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",10,[[["self"],["h256"],["trailing",["bool"]]],["result",["getblockresponse","error"]]]],[10,"transaction_out","","Get details about an unspent transaction output. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"gettxout\", \"params\": [\"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\", 0], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",10,[[["self"],["h256"],["u32"],["trailing",["bool"]]],["result",["gettxoutresponse","error"]]]],[10,"transaction_out_set_info","","Get statistics about the unspent transaction output set. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"gettxoutsetinfo\", \"params\": [], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",10,[[["self"]],["result",["gettxoutsetinforesponse","error"]]]],[11,"to_delegate","","Transform this into an `IoDelegate`, automatically wrapping the parameters.",10,[[["self"]],["iodelegate"]]],[8,"Miner","","Parity-bitcoin miner data interface.",N,N],[10,"get_block_template","","Get block template for mining. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getblocktemplate\", \"params\": [{\"capabilities\": [\"coinbasetxn\", \"workid\", \"coinbase/append\"]}], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",11,[[["self"],["blocktemplaterequest"]],["result",["blocktemplate","error"]]]],[11,"to_delegate","","Transform this into an `IoDelegate`, automatically wrapping the parameters.",11,[[["self"]],["iodelegate"]]],[8,"Raw","","Parity-bitcoin raw data interface.",N,N],[10,"send_raw_transaction","","Adds transaction to the memory pool && relays it to the peers. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"sendrawtransaction\", \"params\": [\"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000\"], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",12,[[["self"],["rawtransaction"]],["result",["h256","error"]]]],[10,"create_raw_transaction","","Create a transaction spending the given inputs and creating new outputs. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"createrawtransaction\", \"params\": [[{\"txid\":\"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\",\"vout\":0}],{\"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\":0.01}], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",12,[[["self"],["vec",["transactioninput"]],["transactionoutputs"],["trailing",["u32"]]],["result",["rawtransaction","error"]]]],[10,"decode_raw_transaction","","Return an object representing the serialized, hex-encoded transaction. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"decoderawtransaction\", \"params\": [\"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000\"], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",12,[[["self"],["rawtransaction"]],["result",["transaction","error"]]]],[10,"get_raw_transaction","","Return the raw transaction data. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getrawtransaction\", \"params\": [\"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",12,[[["self"],["h256"],["trailing",["bool"]]],["result",["getrawtransactionresponse","error"]]]],[11,"to_delegate","","Transform this into an `IoDelegate`, automatically wrapping the parameters.",12,[[["self"]],["iodelegate"]]],[8,"Network","","Parity-bitcoin network interface",N,N],[10,"add_node","","Add/remove/connect to the node @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"addnode\", \"params\": [\"127.0.0.1:8888\", \"add\"], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/ @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"addnode\", \"params\": [\"127.0.0.1:8888\", \"remove\"], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/ @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"addnode\", \"params\": [\"127.0.0.1:8888\", \"onetry\"], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",13,[[["self"],["string"],["addnodeoperation"]],["result",["error"]]]],[10,"node_info","","Query node(s) info @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"id\":\"1\", \"method\": \"getaddednodeinfo\", \"params\": [true] }' -H 'content-type: application/json' http://127.0.0.1:8332/ @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"id\":\"1\", \"method\": \"getaddednodeinfo\", \"params\": [true, \"192.168.0.201\"] }' -H 'content-type: application/json' http://127.0.0.1:8332/",13,[[["self"],["bool"],["trailing",["string"]]],["result",["vec","error"]]]],[10,"connection_count","","Query node(s) info @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"id\":\"1\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: application/json' http://127.0.0.1:8332/",13,[[["self"]],["result",["usize","error"]]]],[11,"to_delegate","","Transform this into an `IoDelegate`, automatically wrapping the parameters.",13,[[["self"]],["iodelegate"]]],[0,"types","rpc::v1","",N,N],[3,"BlockTemplate","rpc::v1::types","Block template as described in: https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki",N,N],[12,"version","","The preferred block version",14,N],[12,"rules","","Specific block rules that are to be enforced",14,N],[12,"vbavailable","","Set of pending, supported versionbit (BIP 9) softfork deployments Keys: named softfork rules Values: identifies the bit number as indicating acceptance and readiness for given key",14,N],[12,"vbrequired","","Bit mask of versionbits the server requires set in submissions",14,N],[12,"previousblockhash","","The hash of previous (best known) block",14,N],[12,"transactions","","Contents of non-coinbase transactions that should be included in the next block",14,N],[12,"coinbaseaux","","Data that should be included in the coinbase's scriptSig content Keys: ignored Values: value to be included in scriptSig",14,N],[12,"coinbasevalue","","Maximum allowable input to coinbase transaction, including the generation award and transaction fees (in Satoshis)",14,N],[12,"coinbasetxn","","information for coinbase transaction",14,N],[12,"target","","The hash target",14,N],[12,"mintime","","The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)",14,N],[12,"mutable","","List of ways the block template may be changed, e.g. 'time', 'transactions', 'prevblock'",14,N],[12,"noncerange","","A range of valid nonces (constant 00000000ffffffff)",14,N],[12,"sigoplimit","","Limit of sigops in blocks",14,N],[12,"sizelimit","","Limit of block size",14,N],[12,"weightlimit","","Limit of block weight",14,N],[12,"curtime","","Current timestamp in seconds since epoch (Jan 1 1970 GMT)",14,N],[12,"bits","","Compressed target of next block",14,N],[12,"height","","The height of the next block",14,N],[3,"BlockTemplateTransaction","","Transaction data as included in `BlockTemplate`",N,N],[12,"data","","Transaction data encoded in hexadecimal",15,N],[12,"txid","","Transaction id encoded in little-endian hexadecimal",15,N],[12,"hash","","Hash encoded in little-endian hexadecimal (including witness data)",15,N],[12,"depends","","Transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is",15,N],[12,"fee","","Difference in value between transaction inputs and outputs (in Satoshis). For coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy). If key is not present, fee is unknown and clients MUST NOT assume there isn't one",15,N],[12,"sigops","","Total SigOps cost, as counted for purposes of block limits. If key is not present, sigop cost is unknown and clients MUST NOT assume it is zero.",15,N],[12,"weight","","Total transaction weight, as counted for purposes of block limits.",15,N],[12,"required","","If provided and true, this transaction must be in the final block",15,N],[3,"BlockTemplateRequest","","Block template request parameters as described in: https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki",N,N],[12,"mode","","Request mode",16,N],[12,"capabilities","","Capabilities, supported by client",16,N],[12,"rules","","Softfork deployments, supported by client",16,N],[3,"Bytes","","Wrapper structure around vector of bytes.",N,N],[12,"0","","",17,N],[3,"VerboseBlock","","Verbose block information",N,N],[12,"hash","","Block hash",18,N],[12,"confirmations","","Number of confirmations. -1 if block is on the side chain",18,N],[12,"size","","Block size",18,N],[12,"strippedsize","","Block size, excluding witness data",18,N],[12,"weight","","Block weight",18,N],[12,"height","","Block height TODO: bitcoind always returns value, but we hold this value for main chain blocks only",18,N],[12,"version","","Block version",18,N],[12,"version_hex","","Block version as hex",18,N],[12,"merkleroot","","Merkle root of this block",18,N],[12,"tx","","Transactions ids",18,N],[12,"time","","Block time in seconds since epoch (Jan 1 1970 GMT)",18,N],[12,"mediantime","","Median block time in seconds since epoch (Jan 1 1970 GMT) TODO: bitcoind always returns value, but we can calculate this only if height(block) > 2",18,N],[12,"nonce","","Block nonce",18,N],[12,"bits","","Block nbits",18,N],[12,"difficulty","","Block difficulty",18,N],[12,"chainwork","","Expected number of hashes required to produce the chain up to this block (in hex)",18,N],[12,"previousblockhash","","Hash of previous block",18,N],[12,"nextblockhash","","Hash of next block",18,N],[3,"GetTxOutResponse","","gettxout response",N,N],[12,"bestblock","","Hash of the block this transaction output is included into. Why it's called 'best'? Who knows",19,N],[12,"confirmations","","Number of confirmations of this transaction",19,N],[12,"value","","Transaction value in BTC",19,N],[12,"script","","Script info",19,N],[12,"version","","This transaction version",19,N],[12,"coinbase","","Is this transactio a coinbase transaction?",19,N],[3,"GetTxOutSetInfoResponse","","",N,N],[3,"H160","","Hash serialization",N,N],[3,"H256","","Hash serialization",N,N],[3,"Transaction","","Transaction",N,N],[12,"hex","","Raw transaction",20,N],[12,"txid","","The transaction id (same as provided)",20,N],[12,"hash","","The transaction hash (differs from txid for witness transactions)",20,N],[12,"size","","The serialized transaction size",20,N],[12,"vsize","","The virtual transaction size (differs from size for witness transactions)",20,N],[12,"version","","The version",20,N],[12,"locktime","","The lock time",20,N],[12,"vin","","Transaction inputs",20,N],[12,"vout","","Transaction outputs",20,N],[12,"blockhash","","Hash of the block this transaction is included in",20,N],[12,"confirmations","","Number of confirmations of this transaction",20,N],[12,"time","","The transaction time in seconds since epoch (Jan 1 1970 GMT)",20,N],[12,"blocktime","","The block time in seconds since epoch (Jan 1 1970 GMT)",20,N],[3,"TransactionInput","","Transaction input",N,N],[12,"txid","","Previous transaction id",21,N],[12,"vout","","Previous transaction output index",21,N],[12,"sequence","","Sequence number",21,N],[3,"TransactionOutputWithAddress","","Transaction output of form \"address\": amount",N,N],[12,"address","","Receiver' address",22,N],[12,"amount","","Amount in BTC",22,N],[3,"TransactionOutputWithScriptData","","Trasaction output of form \"data\": serialized(output script data)",N,N],[12,"script_data","","Serialized script data",23,N],[3,"TransactionInputScript","","Transaction input script",N,N],[12,"asm","","Script code",24,N],[12,"hex","","Script hex",24,N],[3,"TransactionOutputScript","","Transaction output script",N,N],[12,"asm","","Script code",25,N],[12,"hex","","Script hex",25,N],[12,"req_sigs","","Number of required signatures",25,N],[12,"script_type","","Type of script",25,N],[12,"addresses","","Array of bitcoin addresses",25,N],[3,"SignedTransactionInput","","Signed transaction input",N,N],[12,"txid","","Previous transaction id",26,N],[12,"vout","","Previous transaction output index",26,N],[12,"script_sig","","Input script",26,N],[12,"sequence","","Sequence number",26,N],[12,"txinwitness","","Hex-encoded witness data (if any)",26,N],[3,"SignedTransactionOutput","","Signed transaction output",N,N],[12,"value","","Output value in BTC",27,N],[12,"n","","Output index",27,N],[12,"script","","Output script",27,N],[3,"TransactionOutputs","","Transaction outputs, which serializes/deserializes as KV-map",N,N],[12,"outputs","","Transaction outputs",28,N],[3,"U256","","Uint serialization.",N,N],[3,"NodeInfo","","",N,N],[12,"addednode","","",29,N],[12,"connected","","",29,N],[12,"addresses","","",29,N],[4,"BlockTemplateRequestMode","","Block template request mode",N,N],[13,"Template","","Work as described in BIP0022: https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki",30,N],[13,"Proposal","","Work as described in BIP0023: https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki",30,N],[4,"GetBlockResponse","","Response to getblock RPC request",N,N],[13,"Raw","","When asking for short response",31,N],[13,"Verbose","","When asking for verbose response",31,N],[4,"ScriptType","","",N,N],[13,"NonStandard","","",32,N],[13,"PubKey","","",32,N],[13,"PubKeyHash","","",32,N],[13,"ScriptHash","","",32,N],[13,"Multisig","","",32,N],[13,"NullData","","",32,N],[13,"WitnessScript","","",32,N],[13,"WitnessKey","","",32,N],[4,"TransactionOutput","","Transaction output",N,N],[13,"Address","","Of form address: amount",33,N],[13,"ScriptData","","Of form data: script_data_bytes",33,N],[4,"GetRawTransactionResponse","","Return value of `getrawtransaction` method",N,N],[13,"Raw","","Return value when asking for raw transaction",34,N],[13,"Verbose","","Return value when asking for verbose transaction",34,N],[4,"AddNodeOperation","","",N,N],[13,"Add","","",35,N],[13,"Remove","","",35,N],[13,"OneTry","","",35,N],[0,"address","","",N,N],[3,"AddressVisitor","rpc::v1::types::address","",N,N],[5,"serialize","","",N,[[["address"],["s"]],["result"]]],[5,"deserialize","","",N,[[["d"]],["result",["address"]]]],[0,"vec","","",N,N],[5,"serialize","rpc::v1::types::address::vec","",N,[[["vec"],["s"]],["result"]]],[5,"deserialize","","",N,[[["d"]],["result",["vec"]]]],[11,"default","rpc::v1::types::address","",36,[[],["addressvisitor"]]],[11,"expecting","","",36,[[["self"],["formatter"]],["result"]]],[11,"visit_str","","",36,[[["self"],["str"]],["result"]]],[11,"fmt","rpc::v1::types","",14,[[["self"],["formatter"]],["result"]]],[11,"default","","",14,[[],["blocktemplate"]]],[11,"eq","","",14,[[["self"],["blocktemplate"]],["bool"]]],[11,"ne","","",14,[[["self"],["blocktemplate"]],["bool"]]],[11,"clone","","",14,[[["self"]],["blocktemplate"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"default","","",15,[[],["blocktemplatetransaction"]]],[11,"eq","","",15,[[["self"],["blocktemplatetransaction"]],["bool"]]],[11,"ne","","",15,[[["self"],["blocktemplatetransaction"]],["bool"]]],[11,"clone","","",15,[[["self"]],["blocktemplatetransaction"]]],[11,"from","","",14,[[["blocktemplate"]],["self"]]],[11,"from","","",15,[[["indexedtransaction"]],["self"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["blocktemplaterequestmode"]],["bool"]]],[11,"clone","","",30,[[["self"]],["blocktemplaterequestmode"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"default","","",16,[[],["blocktemplaterequest"]]],[11,"eq","","",16,[[["self"],["blocktemplaterequest"]],["bool"]]],[11,"ne","","",16,[[["self"],["blocktemplaterequest"]],["bool"]]],[11,"clone","","",16,[[["self"]],["blocktemplaterequest"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["bytes"]],["bool"]]],[11,"ne","","",17,[[["self"],["bytes"]],["bool"]]],[11,"default","","",17,[[],["bytes"]]],[11,"hash","","",17,N],[11,"clone","","",17,[[["self"]],["bytes"]]],[11,"new","","Simple constructor.",17,[[["vec",["u8"]]],["bytes"]]],[11,"to_vec","","Convert back to vector",17,[[["self"]],["vec",["u8"]]]],[11,"from","","",17,[[["t"]],["self"]]],[11,"into","","",17,[[["self"]],["vec",["u8"]]]],[11,"serialize","","",17,[[["self"],["s"]],["result"]]],[11,"deserialize","","",17,[[["d"]],["result",["bytes"]]]],[11,"deref","","",17,N],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"default","","",18,[[],["verboseblock"]]],[11,"eq","","",18,[[["self"],["verboseblock"]],["bool"]]],[11,"ne","","",18,[[["self"],["verboseblock"]],["bool"]]],[11,"serialize","","",31,[[["self"],["s"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["gettxoutresponse"]],["bool"]]],[11,"ne","","",19,[[["self"],["gettxoutresponse"]],["bool"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"default","","",38,[[],["self"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",38,[[["t"]],["self"]]],[11,"from_str","","",38,[[["str"]],["result"]]],[11,"into","","",38,[[["self"]],["globalh256"]]],[11,"eq","","",38,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",38,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",38,[[["self"],["self"]],["ordering"]]],[11,"hash","","",38,[[["self"],["h"]]]],[11,"clone","","",38,[[["self"]],["self"]]],[11,"serialize","","",38,[[["self"],["s"]],["result"]]],[11,"deserialize","","",38,[[["d"]],["result",["h256"]]]],[11,"default","","",39,[[],["self"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",39,[[["t"]],["self"]]],[11,"from_str","","",39,[[["str"]],["result"]]],[11,"into","","",39,[[["self"]],["globalh160"]]],[11,"eq","","",39,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",39,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",39,[[["self"],["self"]],["ordering"]]],[11,"hash","","",39,[[["self"],["h"]]]],[11,"clone","","",39,[[["self"]],["self"]]],[11,"serialize","","",39,[[["self"],["s"]],["result"]]],[11,"deserialize","","",39,[[["d"]],["result",["h160"]]]],[11,"reversed","","",38,[[["self"]],["self"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"eq","","",32,[[["self"],["scripttype"]],["bool"]]],[11,"from","","",32,[[["globalscripttype"]],["self"]]],[11,"serialize","","",32,[[["self"],["s"]],["result"]]],[11,"deserialize","","",32,[[["d"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["transactioninput"]],["bool"]]],[11,"ne","","",21,[[["self"],["transactioninput"]],["bool"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["transactionoutputwithaddress"]],["bool"]]],[11,"ne","","",22,[[["self"],["transactionoutputwithaddress"]],["bool"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["transactionoutputwithscriptdata"]],["bool"]]],[11,"ne","","",23,[[["self"],["transactionoutputwithscriptdata"]],["bool"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"eq","","",33,[[["self"],["transactionoutput"]],["bool"]]],[11,"ne","","",33,[[["self"],["transactionoutput"]],["bool"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["transactionoutputs"]],["bool"]]],[11,"ne","","",28,[[["self"],["transactionoutputs"]],["bool"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["transactioninputscript"]],["bool"]]],[11,"ne","","",24,[[["self"],["transactioninputscript"]],["bool"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["transactionoutputscript"]],["bool"]]],[11,"ne","","",25,[[["self"],["transactionoutputscript"]],["bool"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["signedtransactioninput"]],["bool"]]],[11,"ne","","",26,[[["self"],["signedtransactioninput"]],["bool"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["signedtransactionoutput"]],["bool"]]],[11,"ne","","",27,[[["self"],["signedtransactionoutput"]],["bool"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["transaction"]],["bool"]]],[11,"ne","","",20,[[["self"],["transaction"]],["bool"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["getrawtransactionresponse"]],["bool"]]],[11,"ne","","",34,[[["self"],["getrawtransactionresponse"]],["bool"]]],[11,"serialize","","",34,[[["self"],["s"]],["result"]]],[11,"len","","",28,[[["self"]],["usize"]]],[11,"serialize","","",28,[[["self"],["s"]],["result"]]],[11,"deserialize","","",28,[[["d"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"default","","",40,[[],["u256"]]],[11,"clone","","",40,[[["self"]],["u256"]]],[11,"eq","","",40,[[["self"],["u256"]],["bool"]]],[11,"ne","","",40,[[["self"],["u256"]],["bool"]]],[11,"hash","","",40,N],[11,"from","","",40,[[["t"]],["self"]]],[11,"from_str","","",40,[[["str"]],["result"]]],[11,"into","","",40,[[["self"]],["globalu256"]]],[11,"serialize","","",40,[[["self"],["s"]],["result"]]],[11,"deserialize","","",40,[[["d"]],["result",["u256"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",35,[[["self"],["addnodeoperation"]],["bool"]]],[11,"deserialize","","",35,[[["d"]],["result"]]],[6,"RawBlock","","Hex-encoded block",N,N],[6,"RawTransaction","","Hex-encoded transaction",N,N],[8,"Raw","rpc::v1","Parity-bitcoin raw data interface.",N,N],[10,"send_raw_transaction","","Adds transaction to the memory pool && relays it to the peers. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"sendrawtransaction\", \"params\": [\"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000\"], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",12,[[["self"],["rawtransaction"]],["result",["h256","error"]]]],[10,"create_raw_transaction","","Create a transaction spending the given inputs and creating new outputs. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"createrawtransaction\", \"params\": [[{\"txid\":\"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\",\"vout\":0}],{\"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\":0.01}], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",12,[[["self"],["vec",["transactioninput"]],["transactionoutputs"],["trailing",["u32"]]],["result",["rawtransaction","error"]]]],[10,"decode_raw_transaction","","Return an object representing the serialized, hex-encoded transaction. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"decoderawtransaction\", \"params\": [\"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000\"], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",12,[[["self"],["rawtransaction"]],["result",["transaction","error"]]]],[10,"get_raw_transaction","","Return the raw transaction data. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getrawtransaction\", \"params\": [\"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",12,[[["self"],["h256"],["trailing",["bool"]]],["result",["getrawtransactionresponse","error"]]]],[11,"to_delegate","rpc::v1::traits","Transform this into an `IoDelegate`, automatically wrapping the parameters.",12,[[["self"]],["iodelegate"]]],[8,"Miner","rpc::v1","Parity-bitcoin miner data interface.",N,N],[10,"get_block_template","","Get block template for mining. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getblocktemplate\", \"params\": [{\"capabilities\": [\"coinbasetxn\", \"workid\", \"coinbase/append\"]}], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",11,[[["self"],["blocktemplaterequest"]],["result",["blocktemplate","error"]]]],[11,"to_delegate","rpc::v1::traits","Transform this into an `IoDelegate`, automatically wrapping the parameters.",11,[[["self"]],["iodelegate"]]],[8,"BlockChain","rpc::v1","Parity-bitcoin blockchain data interface.",N,N],[10,"best_block_hash","","Get hash of best block. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getbestblockhash\", \"params\": [], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",10,[[["self"]],["result",["h256","error"]]]],[10,"block_count","","Get height of best block. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getblockcount\", \"params\": [], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",10,[[["self"]],["result",["u32","error"]]]],[10,"block_hash","","Get hash of block at given height. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getblockhash\", \"params\": [0], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",10,[[["self"],["u32"]],["result",["h256","error"]]]],[10,"difficulty","","Get proof-of-work difficulty as a multiple of the minimum difficulty @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getdifficulty\", \"params\": [], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",10,[[["self"]],["result",["f64","error"]]]],[10,"block","","Get information on given block. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getblock\", \"params\": [\"000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",10,[[["self"],["h256"],["trailing",["bool"]]],["result",["getblockresponse","error"]]]],[10,"transaction_out","","Get details about an unspent transaction output. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"gettxout\", \"params\": [\"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\", 0], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",10,[[["self"],["h256"],["u32"],["trailing",["bool"]]],["result",["gettxoutresponse","error"]]]],[10,"transaction_out_set_info","","Get statistics about the unspent transaction output set. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"gettxoutsetinfo\", \"params\": [], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",10,[[["self"]],["result",["gettxoutsetinforesponse","error"]]]],[11,"to_delegate","rpc::v1::traits","Transform this into an `IoDelegate`, automatically wrapping the parameters.",10,[[["self"]],["iodelegate"]]],[8,"Network","rpc::v1","Parity-bitcoin network interface",N,N],[10,"add_node","","Add/remove/connect to the node @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"addnode\", \"params\": [\"127.0.0.1:8888\", \"add\"], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/ @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"addnode\", \"params\": [\"127.0.0.1:8888\", \"remove\"], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/ @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"addnode\", \"params\": [\"127.0.0.1:8888\", \"onetry\"], \"id\":1 }' -H 'content-type: application/json' http://127.0.0.1:8332/",13,[[["self"],["string"],["addnodeoperation"]],["result",["error"]]]],[10,"node_info","","Query node(s) info @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"id\":\"1\", \"method\": \"getaddednodeinfo\", \"params\": [true] }' -H 'content-type: application/json' http://127.0.0.1:8332/ @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"id\":\"1\", \"method\": \"getaddednodeinfo\", \"params\": [true, \"192.168.0.201\"] }' -H 'content-type: application/json' http://127.0.0.1:8332/",13,[[["self"],["bool"],["trailing",["string"]]],["result",["vec","error"]]]],[10,"connection_count","","Query node(s) info @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"id\":\"1\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: application/json' http://127.0.0.1:8332/",13,[[["self"]],["result",["usize","error"]]]],[11,"to_delegate","rpc::v1::traits","Transform this into an `IoDelegate`, automatically wrapping the parameters.",13,[[["self"]],["iodelegate"]]],[0,"rpc_server","rpc","",N,N],[5,"start_http","rpc::rpc_server","Start http server asynchronously and returns result with `Server` handle on success or an error.",N,[[["socketaddr"],["option",["vec"]],["option",["vec"]],["metaiohandler"]],["result",["server","error"]]]],[11,"with_compatibility","rpc","Creates new `MetaIoHandler` compatible with specified protocol version.",41,[[["compatibility"]],["metaiohandler",["noop"]]]],[11,"new","","Creates new `MetaIoHandler`",41,[[["compatibility"],["s"]],["metaiohandler"]]],[11,"with_middleware","","Creates new `MetaIoHandler` with specified middleware.",41,[[["s"]],["metaiohandler"]]],[11,"add_alias","","Adds an alias to a method.",41,N],[11,"add_method","","Adds new supported asynchronous method",41,N],[11,"add_notification","","Adds new supported notification",41,N],[11,"add_method_with_meta","","Adds new supported asynchronous method with metadata support.",41,N],[11,"add_notification_with_meta","","Adds new supported notification with metadata support.",41,N],[11,"extend_with","","Extend this `MetaIoHandler` with methods defined elsewhere.",41,N],[11,"handle_request_sync","","Handle given request synchronously - will block until response is available. If you have any asynchronous methods in your RPC it is much wiser to use `handle_request` instead and deal with asynchronous requests in a non-blocking fashion.",41,[[["self"],["str"],["t"]],["option",["string"]]]],[11,"handle_request","","Handle given request asynchronously.",41,[[["self"],["str"],["t"]],["map",["either"]]]],[11,"handle_rpc_request","","Handle deserialized RPC request.",41,N],[11,"handle_call","","Handle single call asynchronously.",41,[[["self"],["call"],["t"]],["either",["box","futureresult"]]]],[11,"clone","","",1,[[["self"]],["error"]]],[11,"clone","","",0,[[["self"]],["compatibility"]]],[11,"deserialize","","",1,[[["__d"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"default","","",41,[[],["metaiohandler",["noop"]]]],[11,"default","","",0,[[],["compatibility"]]],[11,"from","","",41,[[["iohandler"]],["metaiohandler",["noop"]]]],[11,"serialize","","",1,[[["self"],["__s"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"drop","","",42,N],[11,"clone","","",43,[[["self"]],["remote"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"execute","","",43,[[["self"],["f"]],["result",["executeerror"]]]],[11,"new","","Wraps given `ErrorCode`",1,[[["errorcode"]],["error"]]],[11,"parse_error","","Creates new `ParseError`",1,[[],["error"]]],[11,"invalid_request","","Creates new `InvalidRequest`",1,[[],["error"]]],[11,"method_not_found","","Creates new `MethodNotFound`",1,[[],["error"]]],[11,"invalid_params","","Creates new `InvalidParams`",1,[[["m"]],["error"]]],[11,"internal_error","","Creates new `InternalError`",1,[[],["error"]]],[11,"invalid_version","","Creates new `InvalidRequest` with invalid version description",1,[[],["error"]]],[11,"spawn","","Spawns a new future into the event loop this remote is associated with.",43,N],[11,"id","","Return the ID of the represented Core",43,[[["self"]],["coreid"]]],[11,"handle","","Attempts to \"promote\" this remote to a handle, if possible.",43,[[["self"]],["option",["handle"]]]],[11,"address","","Returns address of this server",42,[[["self"]],["socketaddr"]]],[11,"close","","Closes the server.",42,N],[11,"wait","","Will block, waiting for the server to finish.",42,N],[11,"to_delegate","rpc::v1::traits","Transform this into an `IoDelegate`, automatically wrapping the parameters.",10,[[["self"]],["iodelegate"]]],[11,"to_delegate","","Transform this into an `IoDelegate`, automatically wrapping the parameters.",11,[[["self"]],["iodelegate"]]],[11,"to_delegate","","Transform this into an `IoDelegate`, automatically wrapping the parameters.",12,[[["self"]],["iodelegate"]]],[11,"to_delegate","","Transform this into an `IoDelegate`, automatically wrapping the parameters.",13,[[["self"]],["iodelegate"]]]],"paths":[[4,"Compatibility"],[3,"Error"],[3,"BlockChainClientCore"],[3,"BlockChainClient"],[3,"MinerClientCore"],[3,"MinerClient"],[3,"RawClientCore"],[3,"RawClient"],[3,"NetworkClient"],[3,"NetworkClientCore"],[8,"BlockChain"],[8,"Miner"],[8,"Raw"],[8,"Network"],[3,"BlockTemplate"],[3,"BlockTemplateTransaction"],[3,"BlockTemplateRequest"],[3,"Bytes"],[3,"VerboseBlock"],[3,"GetTxOutResponse"],[3,"Transaction"],[3,"TransactionInput"],[3,"TransactionOutputWithAddress"],[3,"TransactionOutputWithScriptData"],[3,"TransactionInputScript"],[3,"TransactionOutputScript"],[3,"SignedTransactionInput"],[3,"SignedTransactionOutput"],[3,"TransactionOutputs"],[3,"NodeInfo"],[4,"BlockTemplateRequestMode"],[4,"GetBlockResponse"],[4,"ScriptType"],[4,"TransactionOutput"],[4,"GetRawTransactionResponse"],[4,"AddNodeOperation"],[3,"AddressVisitor"],[3,"GetTxOutSetInfoResponse"],[3,"H256"],[3,"H160"],[3,"U256"],[3,"MetaIoHandler"],[3,"Server"],[3,"Remote"]]};
searchIndex["script"]={"doc":"","items":[[0,"bytes","script","Wrapper around `Vec<u8>`",N,N],[3,"Bytes","script::bytes","Wrapper around `Vec<u8>`",N,N],[3,"TaggedBytes","","Wrapper around `Vec<u8>` which represent associated type",N,N],[0,"hash","script","Fixed-size hashes",N,N],[3,"H32","script::hash","",N,N],[3,"H48","","",N,N],[3,"H96","","",N,N],[3,"H160","","",N,N],[3,"H256","","",N,N],[3,"H264","","",N,N],[3,"H512","","",N,N],[3,"H520","","",N,N],[3,"Builder","script","Script builder",N,N],[3,"VerificationFlags","","Script interpreter verification flags",N,N],[12,"none","","",0,N],[12,"verify_p2sh","","Evaluate P2SH subscripts (softfork safe, BIP16).",0,N],[12,"verify_strictenc","","Passing a non-strict-DER signature or one with undefined hashtype to a checksig operation causes script failure. Evaluating a pubkey that is not (0x04 + 64 bytes) or (0x02 or 0x03 + 32 bytes) by checksig causes script failure. (softfork safe, but not used or intended as a consensus rule).",0,N],[12,"verify_dersig","","Passing a non-strict-DER signature to a checksig operation causes script failure (softfork safe, BIP62 rule 1)",0,N],[12,"verify_low_s","","Passing a non-strict-DER signature or one with S > order/2 to a checksig operation causes script failure (softfork safe, BIP62 rule 5).",0,N],[12,"verify_nulldummy","","verify dummy stack item consumed by CHECKMULTISIG is of zero-length (softfork safe, BIP62 rule 7).",0,N],[12,"verify_sigpushonly","","Using a non-push operator in the scriptSig causes script failure (softfork safe, BIP62 rule 2).",0,N],[12,"verify_minimaldata","","Require minimal encodings for all push operations (OP_0... OP_16, OP_1NEGATE where possible, direct pushes up to 75 bytes, OP_PUSHDATA up to 255 bytes, OP_PUSHDATA2 for anything larger). Evaluating any other push causes the script to fail (BIP62 rule 3). In addition, whenever a stack element is interpreted as a number, it must be of minimal length (BIP62 rule 4). (softfork safe)",0,N],[12,"verify_discourage_upgradable_nops","","Discourage use of NOPs reserved for upgrades (NOP1-10)",0,N],[12,"verify_cleanstack","","Require that only a single stack element remains after evaluation. This changes the success criterion from \"At least one stack element must remain, and when interpreted as a boolean, it must be true\" to \"Exactly one stack element must remain, and when interpreted as a boolean, it must be true\". (softfork safe, BIP62 rule 6) Note: CLEANSTACK should never be used without P2SH or WITNESS.",0,N],[12,"verify_locktime","","Verify CHECKLOCKTIMEVERIFY",0,N],[12,"verify_checksequence","","support CHECKSEQUENCEVERIFY opcode",0,N],[12,"verify_witness","","Support segregated witness",0,N],[12,"verify_discourage_upgradable_witness_program","","Making v1-v16 witness program non-standard",0,N],[12,"verify_concat","","Support OP_CAT opcode",0,N],[12,"verify_split","","Support OP_SPLIT opcode",0,N],[12,"verify_and","","Support OP_AND opcode",0,N],[12,"verify_or","","Support OP_OR opcode",0,N],[12,"verify_xor","","Support OP_XOR opcode",0,N],[12,"verify_div","","Support OP_DIV opcode",0,N],[12,"verify_mod","","Support OP_MOD opcode",0,N],[12,"verify_bin2num","","Support OP_BIN2NUM opcode",0,N],[12,"verify_num2bin","","Support OP_NUM2BIN opcode",0,N],[3,"Num","","Script numeric",N,N],[3,"Script","","Serialized script, used inside transaction inputs and outputs.",N,N],[3,"ScriptAddress","","Address from Script",N,N],[12,"kind","","The type of the address.",1,N],[12,"hash","","Public key hash.",1,N],[3,"TransactionInputSigner","","",N,N],[12,"version","","",2,N],[12,"inputs","","",2,N],[12,"outputs","","",2,N],[12,"lock_time","","",2,N],[3,"UnsignedTransactionInput","","",N,N],[12,"previous_output","","",3,N],[12,"sequence","","",3,N],[3,"Stack","","",N,N],[3,"NoopSignatureChecker","","",N,N],[3,"TransactionSignatureChecker","","",N,N],[12,"signer","","",4,N],[12,"input_index","","",4,N],[12,"input_amount","","",4,N],[4,"Error","","Interpreter errors",N,N],[13,"Unknown","","",5,N],[13,"EvalFalse","","",5,N],[13,"ReturnOpcode","","",5,N],[13,"ScriptSize","","",5,N],[13,"PushSize","","",5,N],[13,"OpCount","","",5,N],[13,"StackSize","","",5,N],[13,"NumberOverflow","","",5,N],[13,"NumberNotMinimallyEncoded","","",5,N],[13,"SigCount","","",5,N],[13,"PubkeyCount","","",5,N],[13,"Verify","","",5,N],[13,"EqualVerify","","",5,N],[13,"CheckSigVerify","","",5,N],[13,"NumEqualVerify","","",5,N],[13,"BadOpcode","","",5,N],[13,"DisabledOpcode","","",5,N],[13,"InvalidStackOperation","","",5,N],[13,"InvalidAltstackOperation","","",5,N],[13,"UnbalancedConditional","","",5,N],[13,"InvalidSplitRange","","",5,N],[13,"InvalidBitwiseOperation","","",5,N],[13,"DivisionByZero","","",5,N],[13,"ImpossibleEncoding","","",5,N],[13,"NegativeLocktime","","",5,N],[13,"UnsatisfiedLocktime","","",5,N],[13,"SignatureHashtype","","",5,N],[13,"SignatureDer","","",5,N],[13,"SignatureIllegalForkId","","",5,N],[13,"SignatureMustUseForkId","","",5,N],[13,"Minimaldata","","",5,N],[13,"SignaturePushOnly","","",5,N],[13,"SignatureHighS","","",5,N],[13,"SignatureNullDummy","","",5,N],[13,"PubkeyType","","",5,N],[13,"Cleanstack","","",5,N],[13,"DiscourageUpgradableNops","","",5,N],[13,"DiscourageUpgradableWitnessProgram","","",5,N],[13,"WitnessProgramWrongLength","","",5,N],[13,"WitnessProgramWitnessEmpty","","",5,N],[13,"WitnessProgramMismatch","","",5,N],[13,"WitnessMalleated","","",5,N],[13,"WitnessMalleatedP2SH","","",5,N],[13,"WitnessUnexpected","","",5,N],[13,"WitnessPubKeyType","","",5,N],[4,"Opcode","","Script opcodes.",N,N],[13,"OP_0","","",6,N],[13,"OP_PUSHBYTES_1","","",6,N],[13,"OP_PUSHBYTES_2","","",6,N],[13,"OP_PUSHBYTES_3","","",6,N],[13,"OP_PUSHBYTES_4","","",6,N],[13,"OP_PUSHBYTES_5","","",6,N],[13,"OP_PUSHBYTES_6","","",6,N],[13,"OP_PUSHBYTES_7","","",6,N],[13,"OP_PUSHBYTES_8","","",6,N],[13,"OP_PUSHBYTES_9","","",6,N],[13,"OP_PUSHBYTES_10","","",6,N],[13,"OP_PUSHBYTES_11","","",6,N],[13,"OP_PUSHBYTES_12","","",6,N],[13,"OP_PUSHBYTES_13","","",6,N],[13,"OP_PUSHBYTES_14","","",6,N],[13,"OP_PUSHBYTES_15","","",6,N],[13,"OP_PUSHBYTES_16","","",6,N],[13,"OP_PUSHBYTES_17","","",6,N],[13,"OP_PUSHBYTES_18","","",6,N],[13,"OP_PUSHBYTES_19","","",6,N],[13,"OP_PUSHBYTES_20","","",6,N],[13,"OP_PUSHBYTES_21","","",6,N],[13,"OP_PUSHBYTES_22","","",6,N],[13,"OP_PUSHBYTES_23","","",6,N],[13,"OP_PUSHBYTES_24","","",6,N],[13,"OP_PUSHBYTES_25","","",6,N],[13,"OP_PUSHBYTES_26","","",6,N],[13,"OP_PUSHBYTES_27","","",6,N],[13,"OP_PUSHBYTES_28","","",6,N],[13,"OP_PUSHBYTES_29","","",6,N],[13,"OP_PUSHBYTES_30","","",6,N],[13,"OP_PUSHBYTES_31","","",6,N],[13,"OP_PUSHBYTES_32","","",6,N],[13,"OP_PUSHBYTES_33","","",6,N],[13,"OP_PUSHBYTES_34","","",6,N],[13,"OP_PUSHBYTES_35","","",6,N],[13,"OP_PUSHBYTES_36","","",6,N],[13,"OP_PUSHBYTES_37","","",6,N],[13,"OP_PUSHBYTES_38","","",6,N],[13,"OP_PUSHBYTES_39","","",6,N],[13,"OP_PUSHBYTES_40","","",6,N],[13,"OP_PUSHBYTES_41","","",6,N],[13,"OP_PUSHBYTES_42","","",6,N],[13,"OP_PUSHBYTES_43","","",6,N],[13,"OP_PUSHBYTES_44","","",6,N],[13,"OP_PUSHBYTES_45","","",6,N],[13,"OP_PUSHBYTES_46","","",6,N],[13,"OP_PUSHBYTES_47","","",6,N],[13,"OP_PUSHBYTES_48","","",6,N],[13,"OP_PUSHBYTES_49","","",6,N],[13,"OP_PUSHBYTES_50","","",6,N],[13,"OP_PUSHBYTES_51","","",6,N],[13,"OP_PUSHBYTES_52","","",6,N],[13,"OP_PUSHBYTES_53","","",6,N],[13,"OP_PUSHBYTES_54","","",6,N],[13,"OP_PUSHBYTES_55","","",6,N],[13,"OP_PUSHBYTES_56","","",6,N],[13,"OP_PUSHBYTES_57","","",6,N],[13,"OP_PUSHBYTES_58","","",6,N],[13,"OP_PUSHBYTES_59","","",6,N],[13,"OP_PUSHBYTES_60","","",6,N],[13,"OP_PUSHBYTES_61","","",6,N],[13,"OP_PUSHBYTES_62","","",6,N],[13,"OP_PUSHBYTES_63","","",6,N],[13,"OP_PUSHBYTES_64","","",6,N],[13,"OP_PUSHBYTES_65","","",6,N],[13,"OP_PUSHBYTES_66","","",6,N],[13,"OP_PUSHBYTES_67","","",6,N],[13,"OP_PUSHBYTES_68","","",6,N],[13,"OP_PUSHBYTES_69","","",6,N],[13,"OP_PUSHBYTES_70","","",6,N],[13,"OP_PUSHBYTES_71","","",6,N],[13,"OP_PUSHBYTES_72","","",6,N],[13,"OP_PUSHBYTES_73","","",6,N],[13,"OP_PUSHBYTES_74","","",6,N],[13,"OP_PUSHBYTES_75","","",6,N],[13,"OP_PUSHDATA1","","",6,N],[13,"OP_PUSHDATA2","","",6,N],[13,"OP_PUSHDATA4","","",6,N],[13,"OP_1NEGATE","","",6,N],[13,"OP_RESERVED","","",6,N],[13,"OP_1","","",6,N],[13,"OP_2","","",6,N],[13,"OP_3","","",6,N],[13,"OP_4","","",6,N],[13,"OP_5","","",6,N],[13,"OP_6","","",6,N],[13,"OP_7","","",6,N],[13,"OP_8","","",6,N],[13,"OP_9","","",6,N],[13,"OP_10","","",6,N],[13,"OP_11","","",6,N],[13,"OP_12","","",6,N],[13,"OP_13","","",6,N],[13,"OP_14","","",6,N],[13,"OP_15","","",6,N],[13,"OP_16","","",6,N],[13,"OP_NOP","","",6,N],[13,"OP_VER","","",6,N],[13,"OP_IF","","",6,N],[13,"OP_NOTIF","","",6,N],[13,"OP_VERIF","","",6,N],[13,"OP_VERNOTIF","","",6,N],[13,"OP_ELSE","","",6,N],[13,"OP_ENDIF","","",6,N],[13,"OP_VERIFY","","",6,N],[13,"OP_RETURN","","",6,N],[13,"OP_TOALTSTACK","","",6,N],[13,"OP_FROMALTSTACK","","",6,N],[13,"OP_2DROP","","",6,N],[13,"OP_2DUP","","",6,N],[13,"OP_3DUP","","",6,N],[13,"OP_2OVER","","",6,N],[13,"OP_2ROT","","",6,N],[13,"OP_2SWAP","","",6,N],[13,"OP_IFDUP","","",6,N],[13,"OP_DEPTH","","",6,N],[13,"OP_DROP","","",6,N],[13,"OP_DUP","","",6,N],[13,"OP_NIP","","",6,N],[13,"OP_OVER","","",6,N],[13,"OP_PICK","","",6,N],[13,"OP_ROLL","","",6,N],[13,"OP_ROT","","",6,N],[13,"OP_SWAP","","",6,N],[13,"OP_TUCK","","",6,N],[13,"OP_CAT","","",6,N],[13,"OP_SUBSTR","","",6,N],[13,"OP_LEFT","","",6,N],[13,"OP_RIGHT","","",6,N],[13,"OP_SIZE","","",6,N],[13,"OP_INVERT","","",6,N],[13,"OP_AND","","",6,N],[13,"OP_OR","","",6,N],[13,"OP_XOR","","",6,N],[13,"OP_EQUAL","","",6,N],[13,"OP_EQUALVERIFY","","",6,N],[13,"OP_RESERVED1","","",6,N],[13,"OP_RESERVED2","","",6,N],[13,"OP_1ADD","","",6,N],[13,"OP_1SUB","","",6,N],[13,"OP_2MUL","","",6,N],[13,"OP_2DIV","","",6,N],[13,"OP_NEGATE","","",6,N],[13,"OP_ABS","","",6,N],[13,"OP_NOT","","",6,N],[13,"OP_0NOTEQUAL","","",6,N],[13,"OP_ADD","","",6,N],[13,"OP_SUB","","",6,N],[13,"OP_MUL","","",6,N],[13,"OP_DIV","","",6,N],[13,"OP_MOD","","",6,N],[13,"OP_LSHIFT","","",6,N],[13,"OP_RSHIFT","","",6,N],[13,"OP_BOOLAND","","",6,N],[13,"OP_BOOLOR","","",6,N],[13,"OP_NUMEQUAL","","",6,N],[13,"OP_NUMEQUALVERIFY","","",6,N],[13,"OP_NUMNOTEQUAL","","",6,N],[13,"OP_LESSTHAN","","",6,N],[13,"OP_GREATERTHAN","","",6,N],[13,"OP_LESSTHANOREQUAL","","",6,N],[13,"OP_GREATERTHANOREQUAL","","",6,N],[13,"OP_MIN","","",6,N],[13,"OP_MAX","","",6,N],[13,"OP_WITHIN","","",6,N],[13,"OP_RIPEMD160","","",6,N],[13,"OP_SHA1","","",6,N],[13,"OP_SHA256","","",6,N],[13,"OP_HASH160","","",6,N],[13,"OP_HASH256","","",6,N],[13,"OP_CODESEPARATOR","","",6,N],[13,"OP_CHECKSIG","","",6,N],[13,"OP_CHECKSIGVERIFY","","",6,N],[13,"OP_CHECKMULTISIG","","",6,N],[13,"OP_CHECKMULTISIGVERIFY","","",6,N],[13,"OP_NOP1","","",6,N],[13,"OP_CHECKLOCKTIMEVERIFY","","",6,N],[13,"OP_CHECKSEQUENCEVERIFY","","",6,N],[13,"OP_NOP4","","",6,N],[13,"OP_NOP5","","",6,N],[13,"OP_NOP6","","",6,N],[13,"OP_NOP7","","",6,N],[13,"OP_NOP8","","",6,N],[13,"OP_NOP9","","",6,N],[13,"OP_NOP10","","",6,N],[4,"ScriptType","","Classified script type",N,N],[13,"NonStandard","","",7,N],[13,"PubKey","","",7,N],[13,"PubKeyHash","","",7,N],[13,"ScriptHash","","",7,N],[13,"Multisig","","",7,N],[13,"NullData","","",7,N],[13,"WitnessScript","","",7,N],[13,"WitnessKey","","",7,N],[4,"SignatureVersion","","",N,N],[13,"Base","","",8,N],[13,"WitnessV0","","",8,N],[13,"ForkId","","",8,N],[5,"eval_script","","Evaluautes the script",N,[[["stack"],["script"],["verificationflags"],["signaturechecker"],["signatureversion"]],["result",["bool","error"]]]],[5,"verify_script","","Verifies script signature and pubkey",N,[[["script"],["script"],["scriptwitness"],["verificationflags"],["signaturechecker"],["signatureversion"]],["result",["error"]]]],[5,"is_witness_commitment_script","","Passed bytes array is a commitment script? https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#Commitment_structure",N,N],[11,"default","","",9,[[],["builder"]]],[11,"build_p2pkh","","Builds p2pkh script pubkey",9,[[["addresshash"]],["script"]]],[11,"build_p2sh","","Builds p2sh script pubkey",9,[[["addresshash"]],["script"]]],[11,"build_nulldata","","Builds op_return script",9,N],[11,"push_opcode","","Pushes opcode to the end of script",9,[[["self"],["opcode"]],["self"]]],[11,"push_bool","","Appends bool push operation to the end of script",9,[[["self"],["bool"]],["self"]]],[11,"push_num","","Appends num push operation to the end of script",9,[[["self"],["num"]],["self"]]],[11,"push_bytes","","Appends bytes push operation to the end od script",9,N],[11,"push_data","","Appends data push operation to the end of script",9,N],[11,"return_bytes","","Appends `OP_RETURN` operation to the end of script",9,N],[11,"push_invalid_opcode","","Pushes invalid opcode to the end of script",9,[[["self"]],["self"]]],[11,"into_script","","Builds final script",9,[[["self"]],["script"]]],[11,"into_bytes","","Builds final script bytes",9,[[["self"]],["bytes"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["error"]],["bool"]]],[11,"ne","","",5,[[["self"],["error"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["verificationflags"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["verificationflags"]],["bool"]]],[11,"ne","","",0,[[["self"],["verificationflags"]],["bool"]]],[11,"verify_p2sh","","",0,[[["self"],["bool"]],["self"]]],[11,"verify_strictenc","","",0,[[["self"],["bool"]],["self"]]],[11,"verify_locktime","","",0,[[["self"],["bool"]],["self"]]],[11,"verify_checksequence","","",0,[[["self"],["bool"]],["self"]]],[11,"verify_dersig","","",0,[[["self"],["bool"]],["self"]]],[11,"verify_witness","","",0,[[["self"],["bool"]],["self"]]],[11,"verify_nulldummy","","",0,[[["self"],["bool"]],["self"]]],[11,"verify_discourage_upgradable_witness_program","","",0,[[["self"],["bool"]],["self"]]],[11,"verify_concat","","",0,[[["self"],["bool"]],["self"]]],[11,"verify_split","","",0,[[["self"],["bool"]],["self"]]],[11,"verify_and","","",0,[[["self"],["bool"]],["self"]]],[11,"verify_or","","",0,[[["self"],["bool"]],["self"]]],[11,"verify_xor","","",0,[[["self"],["bool"]],["self"]]],[11,"verify_div","","",0,[[["self"],["bool"]],["self"]]],[11,"verify_mod","","",0,[[["self"],["bool"]],["self"]]],[11,"verify_bin2num","","",0,[[["self"],["bool"]],["self"]]],[11,"verify_num2bin","","",0,[[["self"],["bool"]],["self"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["num"]],["bool"]]],[11,"ne","","",10,[[["self"],["num"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["num"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["num"]],["bool"]]],[11,"le","","",10,[[["self"],["num"]],["bool"]]],[11,"gt","","",10,[[["self"],["num"]],["bool"]]],[11,"ge","","",10,[[["self"],["num"]],["bool"]]],[11,"cmp","","",10,[[["self"],["num"]],["ordering"]]],[11,"clone","","",10,[[["self"]],["num"]]],[11,"from","","",10,[[["bool"]],["self"]]],[11,"from","","",10,[[["u8"]],["self"]]],[11,"from","","",10,[[["u32"]],["self"]]],[11,"from","","",10,[[["usize"]],["self"]]],[11,"from","","",10,[[["i32"]],["self"]]],[11,"from","","",10,[[["i64"]],["self"]]],[11,"minimally_encode","","Reduce the data size to its minimal, and then try to convert it to a num.",10,N],[11,"from_slice","","",10,N],[11,"to_bytes","","",10,[[["self"]],["bytes"]]],[11,"is_negative","","",10,[[["self"]],["bool"]]],[11,"is_zero","","",10,[[["self"]],["bool"]]],[11,"abs","","",10,[[["self"]],["num"]]],[11,"bitand","","",10,N],[11,"add","","",10,N],[11,"sub","","",10,N],[11,"neg","","",10,N],[11,"div","","",10,N],[11,"rem","","",10,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["opcode"]],["bool"]]],[11,"clone","","",6,[[["self"]],["opcode"]]],[11,"partial_cmp","","",6,[[["self"],["opcode"]],["option",["ordering"]]]],[11,"cmp","","",6,[[["self"],["opcode"]],["ordering"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"from_u8","","",6,[[["u8"]],["option"]]],[11,"is_disabled","","",6,[[["self"],["verificationflags"]],["bool"]]],[11,"is_countable","","Returns true if opcode is countable",6,[[["self"]],["bool"]]],[11,"is_simple_push","","",6,[[["self"]],["bool"]]],[11,"is_push_value","","",6,[[["self"]],["bool"]]],[11,"is_within_op_n","","",6,[[["self"]],["bool"]]],[11,"decode_op_n","","",6,[[["self"]],["u8"]]],[11,"eq","","",7,[[["self"],["scripttype"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["scriptaddress"]],["bool"]]],[11,"ne","","",1,[[["self"],["scriptaddress"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new_p2pkh","","Creates P2PKH-type ScriptAddress",1,[[["addresshash"]],["self"]]],[11,"new_p2sh","","Creates P2SH-type ScriptAddress",1,[[["addresshash"]],["self"]]],[11,"eq","","",11,[[["self"],["script"]],["bool"]]],[11,"ne","","",11,[[["self"],["script"]],["bool"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"from","","",11,[[["str"]],["self"]]],[11,"from","","",11,[[["bytes"]],["self"]]],[11,"from","","",11,[[["vec",["u8"]]],["self"]]],[11,"from","script::bytes","",12,[[["script"]],["self"]]],[11,"new","script","Script constructor.",11,[[["bytes"]],["self"]]],[11,"to_bytes","","",11,[[["self"]],["bytes"]]],[11,"is_empty","","Is empty script",11,[[["self"]],["bool"]]],[11,"is_pay_to_public_key_hash","","Extra-fast test for pay-to-public-key-hash (P2PKH) scripts.",11,[[["self"]],["bool"]]],[11,"is_pay_to_public_key","","Extra-fast test for pay-to-public-key (P2PK) scripts.",11,[[["self"]],["bool"]]],[11,"is_pay_to_script_hash","","Extra-fast test for pay-to-script-hash (P2SH) scripts.",11,[[["self"]],["bool"]]],[11,"is_pay_to_witness_key_hash","","Extra-fast test for pay-to-witness-key-hash scripts.",11,[[["self"]],["bool"]]],[11,"parse_witness_program","","Parse witness program. Returns Some(witness program version, code) or None if not a witness program.",11,[[["self"]],["option"]]],[11,"is_pay_to_witness_script_hash","","Extra-fast test for pay-to-witness-script-hash scripts.",11,[[["self"]],["bool"]]],[11,"is_multisig_script","","Extra-fast test for multisig scripts.",11,[[["self"]],["bool"]]],[11,"is_null_data_script","","",11,[[["self"]],["bool"]]],[11,"subscript","","",11,[[["self"],["usize"]],["script"]]],[11,"find_and_delete","","",11,N],[11,"get_opcode","","",11,[[["self"],["usize"]],["result",["opcode","error"]]]],[11,"get_instruction","","",11,[[["self"],["usize"]],["result",["instruction","error"]]]],[11,"take","","",11,[[["self"],["usize"],["usize"]],["result",["error"]]]],[11,"without_separators","","Returns Script without OP_CODESEPARATOR opcodes",11,[[["self"]],["script"]]],[11,"is_push_only","","Returns true if script contains only push opcodes",11,[[["self"]],["bool"]]],[11,"script_type","","",11,[[["self"]],["scripttype"]]],[11,"iter","","",11,[[["self"]],["instructions"]]],[11,"opcodes","","",11,[[["self"]],["opcodes"]]],[11,"sigops_count","","",11,[[["self"],["bool"]],["usize"]]],[11,"num_signatures_required","","",11,[[["self"]],["u8"]]],[11,"extract_destinations","","",11,[[["self"]],["result",["vec","error"]]]],[11,"pay_to_script_hash_sigops","","",11,[[["self"],["script"]],["usize"]]],[11,"deref","","",11,N],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["signatureversion"]],["bool"]]],[11,"clone","","",8,[[["self"]],["signatureversion"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from","","",3,[[["transactioninput"]],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from","","",2,[[["transaction"]],["self"]]],[11,"signature_hash","","",2,[[["self"],["usize"],["u64"],["script"],["signatureversion"],["u32"]],["h256"]]],[11,"signed_input","","input_index - index of input to sign script_pubkey - script_pubkey of input's previous_output pubkey",2,[[["self"],["keypair"],["usize"],["u64"],["script"],["signatureversion"],["u32"]],["transactioninput"]]],[11,"signature_hash_original","","",2,[[["self"],["usize"],["script"],["u32"],["sighash"]],["h256"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"default","","",13,[[],["stack"]]],[11,"eq","","",13,[[["self"],["stack"]],["bool"]]],[11,"ne","","",13,[[["self"],["stack"]],["bool"]]],[11,"clone","","",13,[[["self"]],["stack"]]],[11,"from","","",13,[[["vec"]],["self"]]],[11,"deref","","",13,N],[11,"deref_mut","","",13,N],[11,"new","","",13,[[],["self"]]],[11,"require","","",13,[[["self"],["usize"]],["result",["error"]]]],[11,"last","","",13,[[["self"]],["result",["error"]]]],[11,"last_mut","","",13,[[["self"]],["result",["error"]]]],[11,"pop","","",13,[[["self"]],["result",["error"]]]],[11,"push","","",13,[[["self"],["t"]]]],[11,"top","","",13,[[["self"],["usize"]],["result",["error"]]]],[11,"remove","","",13,[[["self"],["usize"]],["result",["error"]]]],[11,"drop","","",13,[[["self"],["usize"]],["result",["error"]]]],[11,"dup","","",13,[[["self"],["usize"]],["result",["error"]]]],[11,"over","","",13,[[["self"],["usize"]],["result",["error"]]]],[11,"rot","","",13,[[["self"],["usize"]],["result",["error"]]]],[11,"swap","","",13,[[["self"],["usize"]],["result",["error"]]]],[11,"nip","","",13,[[["self"]],["result",["error"]]]],[11,"tuck","","",13,[[["self"]],["result",["error"]]]],[11,"check_signature","","",14,[[["self"],["signature"],["public"],["script"],["u32"],["signatureversion"]],["bool"]]],[11,"check_lock_time","","",14,[[["self"],["num"]],["bool"]]],[11,"check_sequence","","",14,[[["self"],["num"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"check_signature","","",4,[[["self"],["signature"],["public"],["script"],["u32"],["signatureversion"]],["bool"]]],[11,"check_lock_time","","",4,[[["self"],["num"]],["bool"]]],[11,"check_sequence","","",4,[[["self"],["num"]],["bool"]]],[6,"ScriptWitness","","",N,N],[8,"SignatureChecker","","Checks transaction signature",N,N],[10,"check_signature","","",15,[[["self"],["signature"],["public"],["script"],["u32"],["signatureversion"]],["bool"]]],[10,"check_lock_time","","",15,[[["self"],["num"]],["bool"]]],[10,"check_sequence","","",15,[[["self"],["num"]],["bool"]]],[11,"new","script::bytes","",12,[[],["bytes"]]],[11,"new_with_len","","",12,[[["usize"]],["bytes"]]],[11,"take","","",12,[[["self"]],["vec",["u8"]]]],[11,"len","","",12,[[["self"]],["usize"]]],[11,"append","","",12,N],[11,"split_off","","",12,[[["self"],["usize"]],["bytes"]]],[11,"clone","","",12,[[["self"]],["bytes"]]],[11,"clone","script::hash","",16,[[["self"]],["h32"]]],[11,"clone","","",17,[[["self"]],["h48"]]],[11,"clone","script::bytes","",18,[[["self"]],["taggedbytes"]]],[11,"clone","script::hash","",19,[[["self"]],["h520"]]],[11,"clone","","",20,[[["self"]],["h264"]]],[11,"clone","","",21,[[["self"]],["h512"]]],[11,"clone","","",22,[[["self"]],["h256"]]],[11,"clone","","",23,[[["self"]],["h96"]]],[11,"clone","","",24,[[["self"]],["h160"]]],[11,"fmt","script::bytes","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","script::hash","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",23,[[["self"],["h96"]],["option",["ordering"]]]],[11,"partial_cmp","","",19,[[["self"],["h520"]],["option",["ordering"]]]],[11,"partial_cmp","","",24,[[["self"],["h160"]],["option",["ordering"]]]],[11,"partial_cmp","","",16,[[["self"],["h32"]],["option",["ordering"]]]],[11,"partial_cmp","","",22,[[["self"],["h256"]],["option",["ordering"]]]],[11,"partial_cmp","","",21,[[["self"],["h512"]],["option",["ordering"]]]],[11,"partial_cmp","","",17,[[["self"],["h48"]],["option",["ordering"]]]],[11,"partial_cmp","","",20,[[["self"],["h264"]],["option",["ordering"]]]],[11,"from_str","","",22,[[["str"]],["result",["h256"]]]],[11,"from_str","","",17,[[["str"]],["result",["h48"]]]],[11,"from_str","","",20,[[["str"]],["result",["h264"]]]],[11,"from_str","","",16,[[["str"]],["result",["h32"]]]],[11,"from_str","","",23,[[["str"]],["result",["h96"]]]],[11,"from_str","script::bytes","",12,[[["str"]],["result",["bytes"]]]],[11,"from_str","script::hash","",19,[[["str"]],["result",["h520"]]]],[11,"from_str","","",24,[[["str"]],["result",["h160"]]]],[11,"from_str","","",21,[[["str"]],["result",["h512"]]]],[11,"deref_mut","","",24,N],[11,"deref_mut","","",22,N],[11,"deref_mut","","",17,N],[11,"deref_mut","","",16,N],[11,"deref_mut","","",20,N],[11,"deref_mut","","",19,N],[11,"deref_mut","script::bytes","",18,N],[11,"deref_mut","","",12,N],[11,"deref_mut","script::hash","",21,N],[11,"deref_mut","","",23,N],[11,"default","","",24,[[],["h160"]]],[11,"default","","",19,[[],["h520"]]],[11,"default","","",20,[[],["h264"]]],[11,"default","","",17,[[],["h48"]]],[11,"default","","",16,[[],["h32"]]],[11,"default","","",22,[[],["h256"]]],[11,"default","script::bytes","",12,[[],["bytes"]]],[11,"default","","",18,[[],["taggedbytes"]]],[11,"default","script::hash","",23,[[],["h96"]]],[11,"default","","",21,[[],["h512"]]],[11,"write","script::bytes","",12,N],[11,"flush","","",12,[[["self"]],["result",["error"]]]],[11,"hash","script::hash","",16,N],[11,"hash","","",17,N],[11,"hash","","",21,N],[11,"hash","","",19,N],[11,"hash","","",20,N],[11,"hash","script::bytes","",12,N],[11,"hash","script::hash","",23,N],[11,"hash","","",24,N],[11,"hash","","",22,N],[11,"as_mut","script::bytes","",12,N],[11,"as_mut","","",18,N],[11,"deref","script::hash","",21,N],[11,"deref","script::bytes","",18,N],[11,"deref","script::hash","",16,N],[11,"deref","","",24,N],[11,"deref","","",20,N],[11,"deref","","",23,N],[11,"deref","","",22,N],[11,"deref","","",19,N],[11,"deref","script::bytes","",12,N],[11,"deref","script::hash","",17,N],[11,"heap_size_of_children","","",19,[[["self"]],["usize"]]],[11,"heap_size_of_children","script::bytes","",12,[[["self"]],["usize"]]],[11,"heap_size_of_children","script::hash","",21,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",22,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",23,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",20,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",17,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",16,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",24,[[["self"]],["usize"]]],[11,"as_ref","script::bytes","",18,N],[11,"as_ref","script::hash","",21,[[["self"]],["h512"]]],[11,"as_ref","","",20,[[["self"]],["h264"]]],[11,"as_ref","","",24,[[["self"]],["h160"]]],[11,"as_ref","","",19,[[["self"]],["h520"]]],[11,"as_ref","","",17,[[["self"]],["h48"]]],[11,"as_ref","script::bytes","",12,N],[11,"as_ref","script::hash","",16,[[["self"]],["h32"]]],[11,"as_ref","","",22,[[["self"]],["h256"]]],[11,"as_ref","","",23,[[["self"]],["h96"]]],[11,"from","","",19,[[["str"]],["h520"]]],[11,"from","script::bytes","",12,N],[11,"from","script::hash","",21,N],[11,"from","","",21,[[["str"]],["h512"]]],[11,"from","script::bytes","",12,[[["vec",["u8"]]],["bytes"]]],[11,"from","script::hash","",20,[[["u8"]],["h264"]]],[11,"from","","",23,[[["u8"]],["h96"]]],[11,"from","","",22,[[["str"]],["h256"]]],[11,"from","","",16,N],[11,"from","","",23,N],[11,"from","","",16,[[["u8"]],["h32"]]],[11,"from","","",20,N],[11,"from","","",17,[[["u8"]],["h48"]]],[11,"from","","",21,[[["u8"]],["h512"]]],[11,"from","","",20,N],[11,"from","","",16,N],[11,"from","","",19,[[["u8"]],["h520"]]],[11,"from","","",17,N],[11,"from","","",19,N],[11,"from","","",22,N],[11,"from","","",23,N],[11,"from","","",16,[[["str"]],["h32"]]],[11,"from","","",23,[[["str"]],["h96"]]],[11,"from","script::bytes","",12,[[["str"]],["bytes"]]],[11,"from","script::hash","",17,N],[11,"from","","",22,[[["u8"]],["h256"]]],[11,"from","","",24,N],[11,"from","","",17,[[["str"]],["h48"]]],[11,"from","","",24,N],[11,"from","","",20,[[["str"]],["h264"]]],[11,"from","","",24,[[["u8"]],["h160"]]],[11,"from","","",19,N],[11,"from","","",24,[[["str"]],["h160"]]],[11,"from","","",21,N],[11,"from","","",22,N],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",24,[[["self"],["h160"]],["bool"]]],[11,"eq","","",20,[[["self"],["h264"]],["bool"]]],[11,"eq","","",21,[[["self"],["h512"]],["bool"]]],[11,"eq","script::bytes","",18,[[["self"],["taggedbytes"]],["bool"]]],[11,"ne","","",18,[[["self"],["taggedbytes"]],["bool"]]],[11,"eq","","",12,[[["self"],["bytes"]],["bool"]]],[11,"ne","","",12,[[["self"],["bytes"]],["bool"]]],[11,"eq","script::hash","",16,[[["self"],["h32"]],["bool"]]],[11,"eq","","",22,[[["self"],["h256"]],["bool"]]],[11,"eq","","",23,[[["self"],["h96"]],["bool"]]],[11,"eq","","",19,[[["self"],["h520"]],["bool"]]],[11,"eq","","",17,[[["self"],["h48"]],["bool"]]],[11,"serialize","","",21,N],[11,"serialized_size","","",21,[[["self"]],["usize"]]],[11,"serialize","","",17,N],[11,"serialized_size","","",17,[[["self"]],["usize"]]],[11,"serialize","script::bytes","",12,N],[11,"serialized_size","","",12,[[["self"]],["usize"]]],[11,"serialize","script::hash","",20,N],[11,"serialized_size","","",20,[[["self"]],["usize"]]],[11,"serialize","","",16,N],[11,"serialized_size","","",16,[[["self"]],["usize"]]],[11,"serialize","","",22,N],[11,"serialized_size","","",22,[[["self"]],["usize"]]],[11,"serialize","","",24,N],[11,"serialized_size","","",24,[[["self"]],["usize"]]],[11,"serialize","","",19,N],[11,"serialized_size","","",19,[[["self"]],["usize"]]],[11,"serialize","","",23,N],[11,"serialized_size","","",23,[[["self"]],["usize"]]],[11,"deserialize","","",19,[[["reader"]],["result",["h520","error"]]]],[11,"deserialize","","",17,[[["reader"]],["result",["h48","error"]]]],[11,"deserialize","","",22,[[["reader"]],["result",["h256","error"]]]],[11,"deserialize","","",23,[[["reader"]],["result",["h96","error"]]]],[11,"deserialize","","",24,[[["reader"]],["result",["h160","error"]]]],[11,"deserialize","script::bytes","",12,[[["reader"]],["result",["bytes","error"]]]],[11,"deserialize","script::hash","",20,[[["reader"]],["result",["h264","error"]]]],[11,"deserialize","","",16,[[["reader"]],["result",["h32","error"]]]],[11,"deserialize","","",21,[[["reader"]],["result",["h512","error"]]]],[11,"new","script::bytes","",18,[[["bytes"]],["taggedbytes"]]],[11,"into_raw","","",18,[[["self"]],["bytes"]]],[11,"take","script::hash","",16,N],[11,"reversed","","",16,[[["self"]],["h32"]]],[11,"size","","",16,[[],["usize"]]],[11,"is_zero","","",16,[[["self"]],["bool"]]],[11,"take","","",17,N],[11,"reversed","","",17,[[["self"]],["h48"]]],[11,"size","","",17,[[],["usize"]]],[11,"is_zero","","",17,[[["self"]],["bool"]]],[11,"take","","",23,N],[11,"reversed","","",23,[[["self"]],["h96"]]],[11,"size","","",23,[[],["usize"]]],[11,"is_zero","","",23,[[["self"]],["bool"]]],[11,"take","","",24,N],[11,"reversed","","",24,[[["self"]],["h160"]]],[11,"size","","",24,[[],["usize"]]],[11,"is_zero","","",24,[[["self"]],["bool"]]],[11,"from_reversed_str","","",22,[[["str"]],["h256"]]],[11,"to_reversed_str","","",22,[[["self"]],["string"]]],[11,"take","","",22,N],[11,"reversed","","",22,[[["self"]],["h256"]]],[11,"size","","",22,[[],["usize"]]],[11,"is_zero","","",22,[[["self"]],["bool"]]],[11,"take","","",20,N],[11,"reversed","","",20,[[["self"]],["h264"]]],[11,"size","","",20,[[],["usize"]]],[11,"is_zero","","",20,[[["self"]],["bool"]]],[11,"take","","",21,N],[11,"reversed","","",21,[[["self"]],["h512"]]],[11,"size","","",21,[[],["usize"]]],[11,"is_zero","","",21,[[["self"]],["bool"]]],[11,"take","","",19,N],[11,"reversed","","",19,[[["self"]],["h520"]]],[11,"size","","",19,[[],["usize"]]],[11,"is_zero","","",19,[[["self"]],["bool"]]]],"paths":[[3,"VerificationFlags"],[3,"ScriptAddress"],[3,"TransactionInputSigner"],[3,"UnsignedTransactionInput"],[3,"TransactionSignatureChecker"],[4,"Error"],[4,"Opcode"],[4,"ScriptType"],[4,"SignatureVersion"],[3,"Builder"],[3,"Num"],[3,"Script"],[3,"Bytes"],[3,"Stack"],[3,"NoopSignatureChecker"],[8,"SignatureChecker"],[3,"H32"],[3,"H48"],[3,"TaggedBytes"],[3,"H520"],[3,"H264"],[3,"H512"],[3,"H256"],[3,"H96"],[3,"H160"]]};
searchIndex["serialization"]={"doc":"","items":[[0,"hash","serialization","Fixed-size hashes",N,N],[3,"H32","serialization::hash","",N,N],[3,"H48","","",N,N],[3,"H96","","",N,N],[3,"H160","","",N,N],[3,"H256","","",N,N],[3,"H264","","",N,N],[3,"H512","","",N,N],[3,"H520","","",N,N],[0,"bytes","serialization","Wrapper around `Vec<u8>`",N,N],[3,"Bytes","serialization::bytes","Wrapper around `Vec<u8>`",N,N],[3,"TaggedBytes","","Wrapper around `Vec<u8>` which represent associated type",N,N],[0,"compact","serialization","Compact representation of `U256`",N,N],[3,"Compact","serialization::compact","Compact representation of `U256`",N,N],[3,"CompactInteger","serialization","A type of variable-length integer commonly used in the Bitcoin P2P protocol and Bitcoin serialized data structures.",N,N],[3,"List","","",N,N],[3,"Reader","","Bitcoin structures reader.",N,N],[3,"ReadIterator","","Should be used to iterate over structures of the same type",N,N],[3,"Stream","","Stream used for serialization of Bitcoin structures",N,N],[4,"Error","","",N,N],[13,"MalformedData","","",0,N],[13,"UnexpectedEnd","","",0,N],[13,"UnreadData","","",0,N],[5,"deserialize","","",N,[[["r"]],["result",["error"]]]],[5,"deserialize_iterator","","",N,[[["r"]],["readiterator"]]],[5,"serialize","","",N,[[["t"]],["bytes"]]],[5,"serialize_with_flags","","",N,[[["t"],["u32"]],["bytes"]]],[5,"serialize_list","","",N,N],[5,"serialized_list_size","","",N,N],[5,"serialized_list_size_with_flags","","",N,N],[11,"default","","",1,[[],["compactinteger"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["compactinteger"]]],[11,"eq","","",1,[[["self"],["compactinteger"]],["bool"]]],[11,"ne","","",1,[[["self"],["compactinteger"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",1,[[["u8"]],["self"]]],[11,"from","","",1,[[["u16"]],["self"]]],[11,"from","","",1,[[["u32"]],["self"]]],[11,"from","","",1,[[["usize"]],["self"]]],[11,"from","","",1,[[["u64"]],["self"]]],[11,"serialize","","",1,[[["self"],["stream"]]]],[11,"serialized_size","","",1,[[["self"]],["usize"]]],[11,"deserialize","","",1,[[["reader"]],["result",["readererror"]]]],[11,"serialize","serialization::hash","",2,[[["self"],["stream"]]]],[11,"serialized_size","","",2,[[["self"]],["usize"]]],[11,"deserialize","","",2,[[["reader"]],["result",["error"]]]],[11,"serialize","","",3,[[["self"],["stream"]]]],[11,"serialized_size","","",3,[[["self"]],["usize"]]],[11,"deserialize","","",3,[[["reader"]],["result",["error"]]]],[11,"serialize","","",4,[[["self"],["stream"]]]],[11,"serialized_size","","",4,[[["self"]],["usize"]]],[11,"deserialize","","",4,[[["reader"]],["result",["error"]]]],[11,"serialize","","",5,[[["self"],["stream"]]]],[11,"serialized_size","","",5,[[["self"]],["usize"]]],[11,"deserialize","","",5,[[["reader"]],["result",["error"]]]],[11,"serialize","","",6,[[["self"],["stream"]]]],[11,"serialized_size","","",6,[[["self"]],["usize"]]],[11,"deserialize","","",6,[[["reader"]],["result",["error"]]]],[11,"serialize","","",7,[[["self"],["stream"]]]],[11,"serialized_size","","",7,[[["self"]],["usize"]]],[11,"deserialize","","",7,[[["reader"]],["result",["error"]]]],[11,"serialize","","",8,[[["self"],["stream"]]]],[11,"serialized_size","","",8,[[["self"]],["usize"]]],[11,"deserialize","","",8,[[["reader"]],["result",["error"]]]],[11,"serialize","","",9,[[["self"],["stream"]]]],[11,"serialized_size","","",9,[[["self"]],["usize"]]],[11,"deserialize","","",9,[[["reader"]],["result",["error"]]]],[11,"serialize","serialization::bytes","",10,[[["self"],["stream"]]]],[11,"serialized_size","","",10,[[["self"]],["usize"]]],[11,"deserialize","","",10,[[["reader"]],["result",["error"]]]],[11,"serialize","serialization::compact","",11,[[["self"],["stream"]]]],[11,"deserialize","","",11,[[["reader"]],["result",["error"]]]],[11,"fmt","serialization","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["list"]]],[11,"from","","",12,[[["vec"]],["self"]]],[11,"into","","",12,[[["self"]],["vec"]]],[11,"serialize","","",12,[[["self"],["stream"]]]],[11,"deserialize","","",12,[[["reader"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"new","","Convenient way of creating for slice of bytes",13,N],[11,"read","","",13,N],[11,"from_read","","",13,[[["r"]],["self"]]],[11,"read","","",13,[[["self"]],["result",["error"]]]],[11,"read_with_proxy","","",13,[[["self"],["f"]],["result",["error"]]]],[11,"read_slice","","",13,N],[11,"read_list","","",13,[[["self"]],["result",["vec","error"]]]],[11,"read_list_max","","",13,[[["self"],["usize"]],["result",["vec","error"]]]],[11,"is_finished","","",13,[[["self"]],["bool"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"default","","",15,[[],["stream"]]],[11,"new","","New stream",15,[[],["self"]]],[11,"with_flags","","Create stream with given flags,",15,[[["u32"]],["self"]]],[11,"include_transaction_witness","","Are transactions written to this stream with witness data?",15,[[["self"]],["bool"]]],[11,"append","","Serializes the struct and appends it to the end of stream.",15,[[["self"],["t"]],["self"]]],[11,"append_slice","","Appends raw bytes to the end of the stream.",15,N],[11,"append_list","","Appends a list of serializable structs to the end of the stream.",15,N],[11,"out","","Full stream.",15,[[["self"]],["bytes"]]],[11,"write","","",15,N],[11,"flush","","",15,[[["self"]],["result",["error"]]]],[17,"SERIALIZE_TRANSACTION_WITNESS","","Do not serialize transaction witness data.",N,N],[8,"Deserializable","","",N,N],[10,"deserialize","","",16,[[["reader"]],["result",["error"]]]],[8,"Serializable","","",N,N],[10,"serialize","","Serialize the struct and appends it to the end of stream.",17,[[["self"],["stream"]]]],[11,"serialized_size","","Hint about the size of serialized struct.",17,[[["self"]],["usize"]]],[11,"serialized_size_with_flags","","Hint about the size of serialized struct with given flags.",17,[[["self"],["u32"]],["usize"]]],[11,"take","serialization::hash","",2,N],[11,"reversed","","",2,[[["self"]],["h32"]]],[11,"size","","",2,[[],["usize"]]],[11,"is_zero","","",2,[[["self"]],["bool"]]],[11,"clone","serialization::bytes","",10,[[["self"]],["bytes"]]],[11,"clone","serialization::hash","",2,[[["self"]],["h32"]]],[11,"clone","","",3,[[["self"]],["h48"]]],[11,"clone","serialization::bytes","",18,[[["self"]],["taggedbytes"]]],[11,"clone","serialization::hash","",9,[[["self"]],["h520"]]],[11,"clone","serialization::compact","",11,[[["self"]],["compact"]]],[11,"clone","serialization::hash","",7,[[["self"]],["h264"]]],[11,"clone","","",8,[[["self"]],["h512"]]],[11,"clone","","",6,[[["self"]],["h256"]]],[11,"clone","","",4,[[["self"]],["h96"]]],[11,"clone","","",5,[[["self"]],["h160"]]],[11,"fmt","serialization::bytes","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","serialization::compact","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","serialization::hash","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",4,[[["self"],["h96"]],["option",["ordering"]]]],[11,"partial_cmp","","",9,[[["self"],["h520"]],["option",["ordering"]]]],[11,"partial_cmp","","",5,[[["self"],["h160"]],["option",["ordering"]]]],[11,"partial_cmp","","",2,[[["self"],["h32"]],["option",["ordering"]]]],[11,"partial_cmp","","",6,[[["self"],["h256"]],["option",["ordering"]]]],[11,"partial_cmp","","",8,[[["self"],["h512"]],["option",["ordering"]]]],[11,"partial_cmp","","",3,[[["self"],["h48"]],["option",["ordering"]]]],[11,"partial_cmp","","",7,[[["self"],["h264"]],["option",["ordering"]]]],[11,"from_str","","",6,[[["str"]],["result",["h256"]]]],[11,"from_str","","",3,[[["str"]],["result",["h48"]]]],[11,"from_str","","",7,[[["str"]],["result",["h264"]]]],[11,"from_str","","",2,[[["str"]],["result",["h32"]]]],[11,"from_str","","",4,[[["str"]],["result",["h96"]]]],[11,"from_str","serialization::bytes","",10,[[["str"]],["result",["bytes"]]]],[11,"from_str","serialization::hash","",9,[[["str"]],["result",["h520"]]]],[11,"from_str","","",5,[[["str"]],["result",["h160"]]]],[11,"from_str","","",8,[[["str"]],["result",["h512"]]]],[11,"deref_mut","","",5,N],[11,"deref_mut","","",6,N],[11,"deref_mut","","",3,N],[11,"deref_mut","","",2,N],[11,"deref_mut","","",7,N],[11,"deref_mut","","",9,N],[11,"deref_mut","serialization::bytes","",18,N],[11,"deref_mut","","",10,N],[11,"deref_mut","serialization::hash","",8,N],[11,"deref_mut","","",4,N],[11,"default","","",5,[[],["h160"]]],[11,"default","","",9,[[],["h520"]]],[11,"default","","",7,[[],["h264"]]],[11,"default","","",3,[[],["h48"]]],[11,"default","","",2,[[],["h32"]]],[11,"default","","",6,[[],["h256"]]],[11,"default","serialization::bytes","",10,[[],["bytes"]]],[11,"default","","",18,[[],["taggedbytes"]]],[11,"default","serialization::hash","",4,[[],["h96"]]],[11,"default","","",8,[[],["h512"]]],[11,"write","serialization::bytes","",10,N],[11,"flush","","",10,[[["self"]],["result",["error"]]]],[11,"hash","serialization::hash","",2,N],[11,"hash","","",3,N],[11,"hash","","",8,N],[11,"hash","","",9,N],[11,"hash","","",7,N],[11,"hash","serialization::bytes","",10,N],[11,"hash","serialization::hash","",4,N],[11,"hash","","",5,N],[11,"hash","","",6,N],[11,"as_mut","serialization::bytes","",10,N],[11,"as_mut","","",18,N],[11,"deref","serialization::hash","",8,N],[11,"deref","serialization::bytes","",18,N],[11,"deref","serialization::hash","",2,N],[11,"deref","","",5,N],[11,"deref","","",7,N],[11,"deref","","",4,N],[11,"deref","","",6,N],[11,"deref","","",9,N],[11,"deref","serialization::bytes","",10,N],[11,"deref","serialization::hash","",3,N],[11,"heap_size_of_children","","",9,[[["self"]],["usize"]]],[11,"heap_size_of_children","serialization::bytes","",10,[[["self"]],["usize"]]],[11,"heap_size_of_children","serialization::hash","",8,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",6,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",4,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",7,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",3,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",2,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",5,[[["self"]],["usize"]]],[11,"as_ref","serialization::bytes","",18,N],[11,"as_ref","serialization::hash","",8,[[["self"]],["h512"]]],[11,"as_ref","","",7,[[["self"]],["h264"]]],[11,"as_ref","","",5,[[["self"]],["h160"]]],[11,"as_ref","","",9,[[["self"]],["h520"]]],[11,"as_ref","","",3,[[["self"]],["h48"]]],[11,"as_ref","serialization::bytes","",10,N],[11,"as_ref","serialization::hash","",2,[[["self"]],["h32"]]],[11,"as_ref","","",6,[[["self"]],["h256"]]],[11,"as_ref","","",4,[[["self"]],["h96"]]],[11,"from","","",9,[[["str"]],["h520"]]],[11,"from","serialization::bytes","",10,N],[11,"from","serialization::hash","",8,N],[11,"from","","",8,[[["str"]],["h512"]]],[11,"from","serialization::bytes","",10,[[["vec",["u8"]]],["bytes"]]],[11,"from","serialization::hash","",7,[[["u8"]],["h264"]]],[11,"from","","",4,[[["u8"]],["h96"]]],[11,"from","","",6,[[["str"]],["h256"]]],[11,"from","","",2,N],[11,"from","serialization::compact","",11,[[["u32"]],["compact"]]],[11,"from","serialization::hash","",4,N],[11,"from","serialization::compact","",11,[[["u256"]],["compact"]]],[11,"from","serialization::hash","",2,[[["u8"]],["h32"]]],[11,"from","","",7,N],[11,"from","","",3,[[["u8"]],["h48"]]],[11,"from","","",8,[[["u8"]],["h512"]]],[11,"from","","",7,N],[11,"from","","",2,N],[11,"from","","",9,[[["u8"]],["h520"]]],[11,"from","","",3,N],[11,"from","","",9,N],[11,"from","","",6,N],[11,"from","","",4,N],[11,"from","","",2,[[["str"]],["h32"]]],[11,"from","","",4,[[["str"]],["h96"]]],[11,"from","serialization::bytes","",10,[[["str"]],["bytes"]]],[11,"from","serialization::hash","",3,N],[11,"from","","",6,[[["u8"]],["h256"]]],[11,"from","","",5,N],[11,"from","","",3,[[["str"]],["h48"]]],[11,"from","","",5,N],[11,"from","","",7,[[["str"]],["h264"]]],[11,"from","","",5,[[["u8"]],["h160"]]],[11,"from","","",9,N],[11,"from","","",5,[[["str"]],["h160"]]],[11,"from","","",8,N],[11,"from","","",6,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",5,[[["self"],["h160"]],["bool"]]],[11,"eq","","",7,[[["self"],["h264"]],["bool"]]],[11,"eq","serialization::compact","",11,[[["self"],["compact"]],["bool"]]],[11,"ne","","",11,[[["self"],["compact"]],["bool"]]],[11,"eq","serialization::hash","",8,[[["self"],["h512"]],["bool"]]],[11,"eq","serialization::bytes","",18,[[["self"],["taggedbytes"]],["bool"]]],[11,"ne","","",18,[[["self"],["taggedbytes"]],["bool"]]],[11,"eq","","",10,[[["self"],["bytes"]],["bool"]]],[11,"ne","","",10,[[["self"],["bytes"]],["bool"]]],[11,"eq","serialization::hash","",2,[[["self"],["h32"]],["bool"]]],[11,"eq","","",6,[[["self"],["h256"]],["bool"]]],[11,"eq","","",4,[[["self"],["h96"]],["bool"]]],[11,"eq","","",9,[[["self"],["h520"]],["bool"]]],[11,"eq","","",3,[[["self"],["h48"]],["bool"]]],[11,"take","","",3,N],[11,"reversed","","",3,[[["self"]],["h48"]]],[11,"size","","",3,[[],["usize"]]],[11,"is_zero","","",3,[[["self"]],["bool"]]],[11,"take","","",4,N],[11,"reversed","","",4,[[["self"]],["h96"]]],[11,"size","","",4,[[],["usize"]]],[11,"is_zero","","",4,[[["self"]],["bool"]]],[11,"take","","",5,N],[11,"reversed","","",5,[[["self"]],["h160"]]],[11,"size","","",5,[[],["usize"]]],[11,"is_zero","","",5,[[["self"]],["bool"]]],[11,"from_reversed_str","","",6,[[["str"]],["h256"]]],[11,"to_reversed_str","","",6,[[["self"]],["string"]]],[11,"take","","",6,N],[11,"reversed","","",6,[[["self"]],["h256"]]],[11,"size","","",6,[[],["usize"]]],[11,"is_zero","","",6,[[["self"]],["bool"]]],[11,"take","","",7,N],[11,"reversed","","",7,[[["self"]],["h264"]]],[11,"size","","",7,[[],["usize"]]],[11,"is_zero","","",7,[[["self"]],["bool"]]],[11,"take","","",8,N],[11,"reversed","","",8,[[["self"]],["h512"]]],[11,"size","","",8,[[],["usize"]]],[11,"is_zero","","",8,[[["self"]],["bool"]]],[11,"take","","",9,N],[11,"reversed","","",9,[[["self"]],["h520"]]],[11,"size","","",9,[[],["usize"]]],[11,"is_zero","","",9,[[["self"]],["bool"]]],[11,"new","serialization::bytes","",10,[[],["bytes"]]],[11,"new_with_len","","",10,[[["usize"]],["bytes"]]],[11,"take","","",10,[[["self"]],["vec",["u8"]]]],[11,"len","","",10,[[["self"]],["usize"]]],[11,"append","","",10,N],[11,"split_off","","",10,[[["self"],["usize"]],["bytes"]]],[11,"new","","",18,[[["bytes"]],["taggedbytes"]]],[11,"into_raw","","",18,[[["self"]],["bytes"]]],[11,"new","serialization::compact","",11,[[["u32"]],["compact"]]],[11,"max_value","","",11,[[],["compact"]]],[11,"to_u256","","Computes the target [0, T] that a blockhash must land in to be valid Returns value in error, if there is an overflow or its negative value",11,[[["self"]],["result",["u256","u256"]]]],[11,"from_u256","","",11,[[["u256"]],["compact"]]],[11,"to_f64","","",11,[[["self"]],["f64"]]],[11,"serialized_size","serialization","Hint about the size of serialized struct.",17,[[["self"]],["usize"]]],[11,"serialized_size_with_flags","","Hint about the size of serialized struct with given flags.",17,[[["self"],["u32"]],["usize"]]]],"paths":[[4,"Error"],[3,"CompactInteger"],[3,"H32"],[3,"H48"],[3,"H96"],[3,"H160"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"],[3,"Bytes"],[3,"Compact"],[3,"List"],[3,"Reader"],[3,"ReadIterator"],[3,"Stream"],[8,"Deserializable"],[8,"Serializable"],[3,"TaggedBytes"]]};
searchIndex["sync"]={"doc":"","items":[[3,"VerificationParameters","sync","Verification parameters.",N,N],[12,"verification_level","","Blocks verification level.",0,N],[12,"verification_edge","","Blocks verification edge: all blocks before this are validated using verification_level. All blocks after this (inclusive) are validated using VerificationLevel::Full level.",0,N],[4,"Error","","Sync errors.",N,N],[13,"TooManyOrphanBlocks","","Too many orphan blocks.",1,N],[13,"Database","","Database error.",1,N],[13,"Verification","","Block verification error.",1,N],[5,"create_sync_blocks_writer","","Create blocks writer.",N,[[["sharedstore"],["consensusparams"],["verificationparameters"]],["blockswriter"]]],[5,"create_sync_peers","","Create synchronization peers",N,[[],["peersref"]]],[5,"create_local_sync_node","","Creates local sync node for given `db`",N,[[["consensusparams"],["sharedstore"],["peersref"],["verificationparameters"]],["localnoderef"]]],[5,"create_sync_connection_factory","","Create inbound synchronization connections factory for given local sync node.",N,[[["peersref"],["localnoderef"]],["localsyncnoderef"]]],[6,"LocalNodeRef","","Reference to local node",N,N],[6,"PeersRef","","Reference to peers",N,N],[8,"SyncListener","","Synchronization events listener",N,N],[10,"synchronization_state_switched","","Called when node switches to synchronization state",2,[[["self"],["bool"]]]],[10,"best_storage_block_inserted","","Called when new best storage block is inserted",2,[[["self"],["h256"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"VerificationParameters"],[4,"Error"],[8,"SyncListener"]]};
searchIndex["test_data"]={"doc":"Various chain-specific test dummies","items":[[5,"block1","test_data","",N,[[],["block"]]],[5,"genesis","","",N,[[],["block"]]],[5,"block_h0","","",N,[[],["block"]]],[5,"block_h1","","",N,[[],["block"]]],[5,"block_h2","","",N,[[],["block"]]],[5,"block_h3","","",N,[[],["block"]]],[5,"block_h170","","",N,[[],["block"]]],[5,"block_h169","","",N,[[],["block"]]],[5,"block_h9","","",N,[[],["block"]]],[5,"block_h221","","",N,[[],["block"]]],[5,"block_h182","","",N,[[],["block"]]],[5,"block_h181","","",N,[[],["block"]]],[0,"chain_builder","","",N,N],[3,"ChainBuilder","test_data::chain_builder","",N,N],[12,"transactions","","",0,N],[3,"TransactionBuilder","","",N,N],[12,"transaction","","",1,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["chainbuilder"]]],[11,"clone","","",0,[[["self"]],["chainbuilder"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["transactionbuilder"]]],[11,"clone","","",1,[[["self"]],["transactionbuilder"]]],[11,"new","","",0,[[],["chainbuilder"]]],[11,"at","","",0,[[["self"],["usize"]],["transaction"]]],[11,"hash","","",0,[[["self"],["usize"]],["h256"]]],[11,"size","","",0,[[["self"],["usize"]],["usize"]]],[11,"into","","",1,[[["self"]],["transaction"]]],[11,"into","","",1,[[["self"]],["indexedtransaction"]]],[11,"with_version","","",1,[[["i32"]],["transactionbuilder"]]],[11,"with_output","","",1,[[["u64"]],["transactionbuilder"]]],[11,"with_default_input","","",1,[[["u32"]],["transactionbuilder"]]],[11,"reset","","",1,[[["self"]],["transactionbuilder"]]],[11,"into_input","","",1,[[["self"],["u32"]],["transactionbuilder"]]],[11,"set_version","","",1,[[["self"],["i32"]],["transactionbuilder"]]],[11,"add_output","","",1,[[["self"],["u64"]],["transactionbuilder"]]],[11,"set_output","","",1,[[["self"],["u64"]],["transactionbuilder"]]],[11,"add_default_input","","",1,[[["self"],["u32"]],["transactionbuilder"]]],[11,"add_input","","",1,[[["self"],["transaction"],["u32"]],["transactionbuilder"]]],[11,"set_default_input","","",1,[[["self"],["u32"]],["transactionbuilder"]]],[11,"set_input","","",1,[[["self"],["transaction"],["u32"]],["transactionbuilder"]]],[11,"lock","","",1,[[["self"]],["self"]]],[11,"store","","",1,[[["self"],["chainbuilder"]],["self"]]],[11,"hash","","",1,[[["self"]],["h256"]]],[0,"block","test_data","Block builder",N,N],[3,"BlockHashBuilder","test_data::block","",N,N],[3,"BlockBuilder","","",N,N],[3,"BlockHeaderBuilder","","",N,N],[3,"TransactionBuilder","","",N,N],[3,"TransactionInputBuilder","","",N,N],[3,"TransactionOutputBuilder","","",N,N],[5,"block_builder","","",N,[[],["blockbuilder"]]],[5,"block_hash_builder","","",N,[[],["blockhashbuilder"]]],[5,"build_n_empty_blocks_from","","",N,[[["u32"],["u32"],["blockheader"]],["vec",["block"]]]],[5,"build_n_empty_blocks_from_genesis","","",N,[[["u32"],["u32"]],["vec",["block"]]]],[5,"build_n_empty_blocks","","",N,[[["u32"],["u32"]],["vec",["block"]]]],[17,"TIMESTAMP_COUNTER","","",N,N],[11,"new","","",2,[[],["self"]]],[11,"with_callback","","",2,[[["f"]],["self"]]],[11,"block","","",2,[[["self"]],["blockbuilder"]]],[11,"with_block","","",2,[[["self"],["block"]],["self"]]],[11,"build","","",2,N],[11,"invoke","","",2,[[["self"],["block"]],["self"]]],[11,"new","","",3,[[],["self"]]],[11,"with_callback","","",3,[[["f"]],["self"]]],[11,"with_header","","",3,[[["self"],["blockheader"]],["self"]]],[11,"with_transaction","","",3,[[["self"],["transaction"]],["self"]]],[11,"with_transactions","","",3,[[["self"],["i"]],["self"]]],[11,"with_raw","","",3,[[["self"],["str"]],["self"]]],[11,"header","","",3,[[["self"]],["blockheaderbuilder"]]],[11,"merkled_header","","",3,[[["self"]],["blockheaderbuilder"]]],[11,"transaction","","",3,[[["self"]],["transactionbuilder"]]],[11,"transaction_with_sigops","","",3,[[["self"],["usize"]],["transactionbuilder"]]],[11,"transaction_with_size","","",3,[[["self"],["usize"]],["transactionbuilder"]]],[11,"derived_transaction","","",3,[[["self"],["usize"],["u32"]],["transactionbuilder"]]],[11,"derived_transactions","","",3,[[["self"],["i"]],["transactionbuilder"]]],[11,"build","","",3,N],[11,"invoke","","",3,[[["self"],["blockheader"]],["self"]]],[11,"invoke","","",3,[[["self"],["transaction"]],["self"]]],[11,"with_callback","","",4,[[["f"]],["self"]]],[11,"parent","","",4,[[["self"],["h256"]],["self"]]],[11,"time","","",4,[[["self"],["u32"]],["self"]]],[11,"merkle_root","","",4,[[["self"],["h256"]],["self"]]],[11,"bits","","",4,[[["self"],["compact"]],["self"]]],[11,"nonce","","",4,[[["self"],["u32"]],["self"]]],[11,"build","","",4,N],[11,"lock_time","","",5,[[["self"],["u32"]],["self"]]],[11,"version","","",5,[[["self"],["i32"]],["self"]]],[11,"input","","",5,[[["self"]],["transactioninputbuilder"]]],[11,"input_with_size","","",5,[[["self"],["usize"]],["transactioninputbuilder"]]],[11,"coinbase","","",5,[[["self"]],["self"]]],[11,"output","","",5,[[["self"]],["transactionoutputbuilder"]]],[11,"build","","",5,N],[11,"invoke","","",5,[[["self"],["transactioninput"]],["self"]]],[11,"invoke","","",5,[[["self"],["transactionoutput"]],["self"]]],[11,"signature","","",6,[[["self"],["str"]],["self"]]],[11,"signature_bytes","","",6,[[["self"],["bytes"]],["self"]]],[11,"signature_with_sigops","","",6,[[["self"],["usize"]],["self"]]],[11,"signature_with_size","","",6,[[["self"],["usize"]],["self"]]],[11,"hash","","",6,[[["self"],["h256"]],["self"]]],[11,"index","","",6,[[["self"],["u32"]],["self"]]],[11,"coinbase","","",6,[[["self"]],["self"]]],[11,"build","","",6,N],[11,"value","","",7,[[["self"],["u64"]],["self"]]],[11,"script_pubkey","","",7,[[["self"],["str"]],["self"]]],[11,"script_pubkey_bytes","","",7,[[["self"],["bytes"]],["self"]]],[11,"script_pubkey_with_sigops","","",7,[[["self"],["usize"]],["self"]]],[11,"build","","",7,N],[0,"invoke","test_data","invoke helper",N,N],[3,"Identity","test_data::invoke","",N,N],[8,"Invoke","","",N,N],[16,"Result","","",8,N],[10,"invoke","","",8,N],[11,"invoke","","",9,[[["self"],["a"]],["a"]]]],"paths":[[3,"ChainBuilder"],[3,"TransactionBuilder"],[3,"BlockHashBuilder"],[3,"BlockBuilder"],[3,"BlockHeaderBuilder"],[3,"TransactionBuilder"],[3,"TransactionInputBuilder"],[3,"TransactionOutputBuilder"],[8,"Invoke"],[3,"Identity"]]};
searchIndex["verification"]={"doc":"Bitcoin consensus verification","items":[[0,"uint","verification::bigint","Big unsigned integer types.",N,N],[4,"FromDecStrErr","verification::bigint::uint","Conversion from decimal string error",N,N],[13,"InvalidCharacter","","Char not from range 0-9",0,N],[13,"InvalidLength","","Value does not fit into type",0,N],[8,"Uint","","Large, fixed-length unsigned integer type.",N,N],[10,"zero","","Returns new instance equalling zero.",1,[[],["self"]]],[10,"one","","Returns new instance equalling one.",1,[[],["self"]]],[10,"max_value","","Returns the largest value that can be represented by this integer type.",1,[[],["self"]]],[10,"from_dec_str","","Convert from a decimal string.",1,[[["str"]],["result",["fromdecstrerr"]]]],[10,"low_u32","","Conversion to u32",1,[[["self"]],["u32"]]],[10,"low_u64","","Conversion to u64",1,[[["self"]],["u64"]]],[10,"as_u32","","Conversion to u32 with overflow checking",1,[[["self"]],["u32"]]],[10,"as_u64","","Conversion to u64 with overflow checking",1,[[["self"]],["u64"]]],[10,"bits","","Return the least number of bits needed to represent the number",1,[[["self"]],["usize"]]],[10,"bit","","Return if specific bit is set",1,[[["self"],["usize"]],["bool"]]],[10,"byte","","Return single byte",1,[[["self"],["usize"]],["u8"]]],[10,"to_big_endian","","Convert to the sequence of bytes with a big endian",1,N],[10,"to_little_endian","","Convert to the sequence of bytes with a little endian",1,N],[10,"to_hex","","Convert to a non-zero-prefixed hex representation (not prefixed by `0x`). ",1,[[["self"]],["string"]]],[10,"exp10","","Create `Uint(10**n)`",1,[[["usize"]],["self"]]],[10,"pow","","Return eponentation `self**other`. Panic on overflow.",1,[[["self"],["self"]],["self"]]],[10,"overflowing_pow","","Return wrapped eponentation `self**other` and flag if there was an overflow",1,N],[10,"overflowing_add","","Add this `Uint` to other returning result and possible overflow",1,N],[10,"overflowing_sub","","Subtract another `Uint` from this returning result and possible overflow",1,N],[10,"overflowing_mul","","Multiple this `Uint` with other returning result and possible overflow",1,N],[10,"overflowing_div","","Divide this `Uint` by other returning result and possible overflow",1,N],[10,"overflowing_rem","","Returns reminder of division of this `Uint` by other and possible overflow",1,N],[10,"overflowing_neg","","Returns negation of this `Uint` and overflow (always true)",1,N],[10,"is_zero","","Returns",1,[[["self"]],["bool"]]],[3,"U512","","Little-endian large integer type",N,N],[12,"0","","",2,N],[3,"U256","","Little-endian large integer type",N,N],[12,"0","","",3,N],[3,"U128","","Little-endian large integer type",N,N],[12,"0","","",4,N],[0,"hash","verification","Fixed-size hashes",N,N],[3,"H32","verification::hash","",N,N],[3,"H48","","",N,N],[3,"H96","","",N,N],[3,"H160","","",N,N],[3,"H256","","",N,N],[3,"H264","","",N,N],[3,"H512","","",N,N],[3,"H520","","",N,N],[0,"compact","verification","Compact representation of `U256`",N,N],[3,"Compact","verification::compact","Compact representation of `U256`",N,N],[3,"CanonBlock","verification","Blocks whose parents are known to be in the chain",N,N],[3,"CanonHeader","","",N,N],[3,"CanonTransaction","","",N,N],[3,"BlockAcceptor","","Flexible verification of ordered block",N,N],[12,"finality","","",5,N],[12,"serialized_size","","",5,N],[12,"sigops","","",5,N],[12,"coinbase_claim","","",5,N],[12,"coinbase_script","","",5,N],[12,"witness","","",5,N],[3,"ChainAcceptor","","",N,N],[12,"block","","",6,N],[12,"header","","",6,N],[12,"transactions","","",6,N],[3,"HeaderAcceptor","","",N,N],[12,"version","","",7,N],[12,"work","","",7,N],[12,"median_timestamp","","",7,N],[3,"TransactionAcceptor","","",N,N],[12,"premature_witness","","",8,N],[12,"bip30","","",8,N],[12,"missing_inputs","","",8,N],[12,"maturity","","",8,N],[12,"overspent","","",8,N],[12,"double_spent","","",8,N],[12,"return_replay_protection","","",8,N],[12,"eval","","",8,N],[3,"MemoryPoolTransactionAcceptor","","",N,N],[12,"missing_inputs","","",9,N],[12,"maturity","","",9,N],[12,"overspent","","",9,N],[12,"sigops","","",9,N],[12,"double_spent","","",9,N],[12,"return_replay_protection","","",9,N],[12,"eval","","",9,N],[3,"BlockVerifier","","",N,N],[12,"empty","","",10,N],[12,"coinbase","","",10,N],[12,"serialized_size","","",10,N],[12,"extra_coinbases","","",10,N],[12,"transactions_uniqueness","","",10,N],[12,"sigops","","",10,N],[12,"merkle_root","","",10,N],[3,"ChainVerifier","","",N,N],[12,"block","","",11,N],[12,"header","","",11,N],[12,"transactions","","",11,N],[3,"HeaderVerifier","","",N,N],[12,"proof_of_work","","",12,N],[12,"timestamp","","",12,N],[3,"TransactionVerifier","","",N,N],[12,"empty","","",13,N],[12,"null_non_coinbase","","",13,N],[12,"oversized_coinbase","","",13,N],[3,"MemoryPoolTransactionVerifier","","",N,N],[12,"empty","","",14,N],[12,"null_non_coinbase","","",14,N],[12,"is_coinbase","","",14,N],[12,"size","","",14,N],[12,"premature_witness","","",14,N],[12,"sigops","","",14,N],[3,"BackwardsCompatibleChainVerifier","","",N,N],[3,"Deployments","","",N,N],[4,"Error","","All possible verification errors",N,N],[13,"Duplicate","","has an equal duplicate in the chain",15,N],[13,"DuplicatedTransactions","","Contains duplicated transactions",15,N],[13,"Empty","","No transactions in block",15,N],[13,"Pow","","Invalid proof-of-work (Block hash does not satisfy nBits)",15,N],[13,"FuturisticTimestamp","","Futuristic timestamp",15,N],[13,"Timestamp","","Invalid timestamp",15,N],[13,"Coinbase","","First transaction is not a coinbase transaction",15,N],[13,"Transaction","","One of the transactions is invalid (corresponding index and specific transaction error)",15,N],[13,"Difficulty","","nBits do not match difficulty rules",15,N],[12,"expected","verification::Error","",15,N],[12,"actual","","",15,N],[13,"MerkleRoot","verification","Invalid merkle root",15,N],[13,"CoinbaseOverspend","","Coinbase spends too much",15,N],[12,"expected_max","verification::Error","",15,N],[12,"actual","","",15,N],[13,"CoinbaseScript","verification","Coinbase has invalid script sig prefix (BIP90 -> BIP34)",15,N],[13,"MaximumSigops","","Maximum sigops operations exceeded - will not provide how much it was in total since it stops counting once `MAX_BLOCK_SIGOPS` is reached",15,N],[13,"MaximumSigopsCost","","Maximum sigops operations cost  exceeded",15,N],[13,"CoinbaseSignatureLength","","Coinbase signature is not in the range 2-100",15,N],[13,"Size","","Block size is invalid",15,N],[13,"Weight","","Block weight is invalid",15,N],[13,"NonFinalBlock","","Block transactions are not final.",15,N],[13,"OldVersionBlock","","Old version block.",15,N],[13,"TransactionFeeAndRewardOverflow","","Sum of the transaction fees in block + coinbase reward exceeds u64::max",15,N],[13,"TransactionFeesOverflow","","Sum of the transaction fees in block exceeds u64::max",15,N],[13,"ReferencedInputsSumOverflow","","Sum of all referenced outputs in block transactions resulted in the overflow",15,N],[13,"WitnessInvalidNonceSize","","SegWit: bad witess nonce size",15,N],[13,"WitnessMerkleCommitmentMismatch","","SegWit: witness merkle mismatch",15,N],[13,"UnexpectedWitness","","SegWit: unexpected witness",15,N],[13,"Database","","Database error",15,N],[4,"TransactionError","","Possible transactions verification errors",N,N],[13,"Empty","","Transaction has no inputs or no outputs",16,N],[13,"NullNonCoinbase","","Transaction is not coinbase transaction but has null inputs",16,N],[13,"CoinbaseSignatureLength","","Coinbase signature is not in the range 2-100",16,N],[13,"MaxSize","","Transaction size exceeds block size limit",16,N],[13,"MaxSigops","","Transaction has more sigops than it's allowed",16,N],[13,"MemoryPoolCoinbase","","Transaction is a part of memory pool, but is a coinbase",16,N],[13,"Input","","Not found corresponding output for transaction input",16,N],[13,"Maturity","","Referenced coinbase output for the transaction input is not mature enough",16,N],[13,"Signature","","Signature invalid for given input",16,N],[13,"UnknownReference","","Unknown previous transaction referenced",16,N],[13,"Overspend","","Spends more than claims",16,N],[13,"SignatureMallformed","","Signature script can't be properly parsed",16,N],[13,"Sigops","","Too many signature operations",16,N],[13,"SigopsP2SH","","Too many signature operations once p2sh operations included",16,N],[13,"MisplacedCoinbase","","Coinbase transaction is found at position that is not 0",16,N],[13,"UnspentTransactionWithTheSameHash","","Not fully spent transaction with the same hash already exists, bip30.",16,N],[13,"UsingSpentOutput","","Using output that is surely spent",16,N],[13,"ReturnReplayProtection","","Transaction, protected using BitcoinCash OP_RETURN replay protection (REQ-6-1).",16,N],[13,"PrematureWitness","","Transaction with witness is received before SegWit is activated.",16,N],[4,"VerificationLevel","","Blocks verification level.",N,N],[13,"Full","","Full verification.",17,N],[13,"Header","","Transaction scripts are not checked.",17,N],[13,"NoVerification","","No verification at all.",17,N],[5,"transaction_sigops","","Counts signature operations in given transaction bip16_active flag indicates if we should also count signature operations in previous transactions. If one of the previous transaction outputs is missing, we simply ignore that fact and just carry on counting",N,[[["transaction"],["transactionoutputprovider"],["bool"]],["usize"]]],[5,"median_timestamp","","Returns median timestamp, of given header ancestors. The header should be later expected to have higher timestamp than this median timestamp",N,[[["blockheader"],["blockheaderprovider"]],["u32"]]],[5,"median_timestamp_inclusive","","Returns median timestamp, of given header + its ancestors. The header should be later expected to have higher timestamp than this median timestamp",N,[[["h256"],["blockheaderprovider"]],["u32"]]],[5,"work_required","","Returns work required for given header",N,[[["h256"],["u32"],["u32"],["blockheaderprovider"],["consensusparams"]],["compact"]]],[5,"is_valid_proof_of_work","","Returns true if hash is lower or equal than target and target is lower or equal than current network maximum",N,[[["compact"],["compact"],["h256"]],["bool"]]],[5,"is_valid_proof_of_work_hash","","Returns true if hash is lower or equal than target represented by compact bits",N,[[["compact"],["h256"]],["bool"]]],[5,"block_reward_satoshi","","",N,[[["u32"]],["u64"]]],[0,"constants","","Consenus constants",N,N],[17,"BLOCK_MAX_FUTURE","verification::constants","",N,N],[17,"COINBASE_MATURITY","","",N,N],[17,"MIN_COINBASE_SIZE","","",N,N],[17,"MAX_COINBASE_SIZE","","",N,N],[17,"RETARGETING_FACTOR","","",N,N],[17,"TARGET_SPACING_SECONDS","","",N,N],[17,"DOUBLE_SPACING_SECONDS","","",N,N],[17,"TARGET_TIMESPAN_SECONDS","","",N,N],[17,"MIN_TIMESPAN","","",N,N],[17,"MAX_TIMESPAN","","",N,N],[17,"RETARGETING_INTERVAL","","",N,N],[11,"clone","verification","",18,[[["self"]],["canonblock"]]],[11,"new","","",18,[[["indexedblock"]],["self"]]],[11,"hash","","",18,[[["self"]],["h256"]]],[11,"raw","","",18,[[["self"]],["indexedblock"]]],[11,"header","","",18,[[["self"]],["canonheader"]]],[11,"transactions","","",18,[[["self"]],["vec",["canontransaction"]]]],[11,"deref","","",18,N],[11,"clone","","",19,[[["self"]],["canonheader"]]],[11,"new","","",19,[[["indexedblockheader"]],["self"]]],[11,"deref","","",19,N],[11,"clone","","",20,[[["self"]],["canontransaction"]]],[11,"new","","",20,[[["indexedtransaction"]],["self"]]],[11,"deref","","",20,N],[11,"default","","",21,[[],["deployments"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"new","","",21,[[],["self"]]],[11,"csv","","Returns true if csv deployment is active",21,[[["self"],["u32"],["blockheaderprovider"],["consensusparams"]],["bool"]]],[11,"segwit","","Returns true if SegWit deployment is active",21,[[["self"],["u32"],["blockheaderprovider"],["consensusparams"]],["bool"]]],[11,"as_ref","","",21,[[["self"]],["deployments"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["error"]],["bool"]]],[11,"ne","","",15,[[["self"],["error"]],["bool"]]],[11,"from","","",15,[[["dberror"]],["self"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["transactionerror"]],["bool"]]],[11,"ne","","",16,[[["self"],["transactionerror"]],["bool"]]],[11,"new","","",10,[[["indexedblock"]],["self"]]],[11,"check","","",10,[[["self"]],["result",["error"]]]],[11,"new","","",11,[[["indexedblock"],["network"],["u32"]],["self"]]],[11,"check","","",11,[[["self"]],["result",["error"]]]],[11,"new","","",12,[[["indexedblockheader"],["network"],["u32"]],["self"]]],[11,"check","","",12,[[["self"]],["result",["error"]]]],[11,"new","","",13,[[["indexedtransaction"]],["self"]]],[11,"check","","",13,[[["self"]],["result",["transactionerror"]]]],[11,"new","","",14,[[["indexedtransaction"],["consensusparams"],["blockdeployments"]],["self"]]],[11,"check","","",14,[[["self"]],["result",["transactionerror"]]]],[11,"new","","",5,[[["transactionoutputprovider"],["consensusparams"],["canonblock"],["u32"],["u32"],["blockdeployments"],["blockheaderprovider"]],["self"]]],[11,"check","","",5,[[["self"]],["result",["error"]]]],[11,"new","","",6,[[["store"],["consensusparams"],["verificationlevel"],["canonblock"],["u32"],["u32"],["blockdeployments"]],["self"]]],[11,"check","","",6,[[["self"]],["result",["error"]]]],[11,"new","","",7,[[["blockheaderprovider"],["consensusparams"],["canonheader"],["u32"],["d"]],["self"]]],[11,"check","","",7,[[["self"]],["result",["error"]]]],[11,"new","","",8,[[["transactionmetaprovider"],["duplextransactionoutputprovider"],["consensusparams"],["canontransaction"],["verificationlevel"],["h256"],["u32"],["u32"],["u32"],["usize"],["blockdeployments"]],["self"]]],[11,"check","","",8,[[["self"]],["result",["transactionerror"]]]],[11,"new","","",9,[[["transactionmetaprovider"],["duplextransactionoutputprovider"],["consensusparams"],["canontransaction"],["u32"],["u32"],["u32"],["blockdeployments"]],["self"]]],[11,"check","","",9,[[["self"]],["result",["transactionerror"]]]],[11,"new","","",22,[[["sharedstore"],["consensusparams"]],["self"]]],[11,"verify_block_header","","",22,[[["self"],["blockheaderprovider"],["h256"],["blockheader"]],["result",["error"]]]],[11,"verify_mempool_transaction","","",22,[[["self"],["blockheaderprovider"],["t"],["u32"],["u32"],["transaction"]],["result",["transactionerror"]]]],[11,"verify","","",22,[[["self"],["verificationlevel"],["indexedblock"]],["result",["error"]]]],[8,"Verify","","Interface for block verification",N,N],[10,"verify","","",23,[[["self"],["verificationlevel"],["indexedblock"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["verificationlevel"]]],[11,"eq","","",17,[[["self"],["verificationlevel"]],["bool"]]],[11,"clone","verification::hash","",24,[[["self"]],["h32"]]],[11,"clone","","",25,[[["self"]],["h48"]]],[11,"clone","","",26,[[["self"]],["h520"]]],[11,"clone","verification::compact","",27,[[["self"]],["compact"]]],[11,"clone","verification::hash","",28,[[["self"]],["h264"]]],[11,"clone","","",29,[[["self"]],["h512"]]],[11,"clone","","",30,[[["self"]],["h256"]]],[11,"clone","","",31,[[["self"]],["h96"]]],[11,"clone","","",32,[[["self"]],["h160"]]],[11,"fmt","verification::compact","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","verification::hash","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",31,[[["self"],["h96"]],["option",["ordering"]]]],[11,"partial_cmp","","",26,[[["self"],["h520"]],["option",["ordering"]]]],[11,"partial_cmp","","",32,[[["self"],["h160"]],["option",["ordering"]]]],[11,"partial_cmp","","",24,[[["self"],["h32"]],["option",["ordering"]]]],[11,"partial_cmp","","",30,[[["self"],["h256"]],["option",["ordering"]]]],[11,"partial_cmp","","",29,[[["self"],["h512"]],["option",["ordering"]]]],[11,"partial_cmp","","",25,[[["self"],["h48"]],["option",["ordering"]]]],[11,"partial_cmp","","",28,[[["self"],["h264"]],["option",["ordering"]]]],[11,"from_str","","",30,[[["str"]],["result",["h256"]]]],[11,"from_str","","",25,[[["str"]],["result",["h48"]]]],[11,"from_str","","",28,[[["str"]],["result",["h264"]]]],[11,"from_str","","",24,[[["str"]],["result",["h32"]]]],[11,"from_str","","",31,[[["str"]],["result",["h96"]]]],[11,"from_str","","",26,[[["str"]],["result",["h520"]]]],[11,"from_str","","",32,[[["str"]],["result",["h160"]]]],[11,"from_str","","",29,[[["str"]],["result",["h512"]]]],[11,"deref_mut","","",32,N],[11,"deref_mut","","",30,N],[11,"deref_mut","","",25,N],[11,"deref_mut","","",24,N],[11,"deref_mut","","",28,N],[11,"deref_mut","","",26,N],[11,"deref_mut","","",29,N],[11,"deref_mut","","",31,N],[11,"default","","",32,[[],["h160"]]],[11,"default","","",26,[[],["h520"]]],[11,"default","","",28,[[],["h264"]]],[11,"default","","",25,[[],["h48"]]],[11,"default","","",24,[[],["h32"]]],[11,"default","","",30,[[],["h256"]]],[11,"default","","",31,[[],["h96"]]],[11,"default","","",29,[[],["h512"]]],[11,"hash","","",24,N],[11,"hash","","",25,N],[11,"hash","","",29,N],[11,"hash","","",26,N],[11,"hash","","",28,N],[11,"hash","","",31,N],[11,"hash","","",32,N],[11,"hash","","",30,N],[11,"deref","","",29,N],[11,"deref","","",24,N],[11,"deref","","",32,N],[11,"deref","","",28,N],[11,"deref","","",31,N],[11,"deref","","",30,N],[11,"deref","","",26,N],[11,"deref","","",25,N],[11,"heap_size_of_children","","",26,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",29,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",30,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",31,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",28,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",25,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",24,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",32,[[["self"]],["usize"]]],[11,"as_ref","","",29,[[["self"]],["h512"]]],[11,"as_ref","","",28,[[["self"]],["h264"]]],[11,"as_ref","","",32,[[["self"]],["h160"]]],[11,"as_ref","","",26,[[["self"]],["h520"]]],[11,"as_ref","","",25,[[["self"]],["h48"]]],[11,"as_ref","","",24,[[["self"]],["h32"]]],[11,"as_ref","","",30,[[["self"]],["h256"]]],[11,"as_ref","","",31,[[["self"]],["h96"]]],[11,"from","","",26,[[["str"]],["h520"]]],[11,"from","","",29,N],[11,"from","","",29,[[["str"]],["h512"]]],[11,"from","","",28,[[["u8"]],["h264"]]],[11,"from","","",31,[[["u8"]],["h96"]]],[11,"from","","",30,[[["str"]],["h256"]]],[11,"from","","",24,N],[11,"from","verification::compact","",27,[[["u32"]],["compact"]]],[11,"from","verification::hash","",31,N],[11,"from","verification::compact","",27,[[["u256"]],["compact"]]],[11,"from","verification::hash","",24,[[["u8"]],["h32"]]],[11,"from","","",28,N],[11,"from","","",25,[[["u8"]],["h48"]]],[11,"from","","",29,[[["u8"]],["h512"]]],[11,"from","","",28,N],[11,"from","","",24,N],[11,"from","","",26,[[["u8"]],["h520"]]],[11,"from","","",25,N],[11,"from","verification::bigint::uint","",3,[[["compact"]],["u256"]]],[11,"from","verification::hash","",26,N],[11,"from","","",30,N],[11,"from","","",31,N],[11,"from","","",24,[[["str"]],["h32"]]],[11,"from","","",31,[[["str"]],["h96"]]],[11,"from","","",25,N],[11,"from","","",30,[[["u8"]],["h256"]]],[11,"from","","",32,N],[11,"from","","",25,[[["str"]],["h48"]]],[11,"from","","",32,N],[11,"from","","",28,[[["str"]],["h264"]]],[11,"from","","",32,[[["u8"]],["h160"]]],[11,"from","","",26,N],[11,"from","","",32,[[["str"]],["h160"]]],[11,"from","","",29,N],[11,"from","","",30,N],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",32,[[["self"],["h160"]],["bool"]]],[11,"eq","","",28,[[["self"],["h264"]],["bool"]]],[11,"eq","verification::compact","",27,[[["self"],["compact"]],["bool"]]],[11,"ne","","",27,[[["self"],["compact"]],["bool"]]],[11,"eq","verification::hash","",29,[[["self"],["h512"]],["bool"]]],[11,"eq","","",24,[[["self"],["h32"]],["bool"]]],[11,"eq","","",30,[[["self"],["h256"]],["bool"]]],[11,"eq","","",31,[[["self"],["h96"]],["bool"]]],[11,"eq","","",26,[[["self"],["h520"]],["bool"]]],[11,"eq","","",25,[[["self"],["h48"]],["bool"]]],[11,"add","verification::bigint::uint","",2,[[["self"],["u512"]],["u512"]]],[11,"add","","",3,[[["self"],["u256"]],["u256"]]],[11,"add","","",4,[[["self"],["u128"]],["u128"]]],[11,"clone","","",3,[[["self"]],["u256"]]],[11,"clone","","",2,[[["self"]],["u512"]]],[11,"clone","","",4,[[["self"]],["u128"]]],[11,"bitand","","",2,[[["self"],["u512"]],["u512"]]],[11,"bitand","","",3,[[["self"],["u256"]],["u256"]]],[11,"bitand","","",4,[[["self"],["u128"]],["u128"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",4,[[["self"],["u128"]],["option",["ordering"]]]],[11,"partial_cmp","","",2,[[["self"],["u512"]],["option",["ordering"]]]],[11,"partial_cmp","","",3,[[["self"],["u256"]],["option",["ordering"]]]],[11,"sub","","",2,[[["self"],["u512"]],["u512"]]],[11,"sub","","",4,[[["self"],["u128"]],["u128"]]],[11,"sub","","",3,[[["self"],["u256"]],["u256"]]],[11,"cmp","","",2,[[["self"],["u512"]],["ordering"]]],[11,"cmp","","",4,[[["self"],["u128"]],["ordering"]]],[11,"cmp","","",3,[[["self"],["u256"]],["ordering"]]],[11,"bitor","","",2,[[["self"],["u512"]],["u512"]]],[11,"bitor","","",3,[[["self"],["u256"]],["u256"]]],[11,"bitor","","",4,[[["self"],["u128"]],["u128"]]],[11,"from_str","","",3,[[["str"]],["result",["u256"]]]],[11,"from_str","","",4,[[["str"]],["result",["u128"]]]],[11,"from_str","","",2,[[["str"]],["result",["u512"]]]],[11,"shr","","",4,[[["self"],["usize"]],["u128"]]],[11,"shr","","",2,[[["self"],["usize"]],["u512"]]],[11,"shr","","",3,[[["self"],["usize"]],["u256"]]],[11,"default","","",4,[[],["u128"]]],[11,"default","","",3,[[],["u256"]]],[11,"default","","",2,[[],["u512"]]],[11,"rem","","",4,[[["self"],["u128"]],["u128"]]],[11,"rem","","",2,[[["self"],["u512"]],["u512"]]],[11,"rem","","",3,[[["self"],["u256"]],["u256"]]],[11,"from_dec_str","","",4,[[["str"]],["result",["u128","fromdecstrerr"]]]],[11,"low_u32","","",4,[[["self"]],["u32"]]],[11,"low_u64","","",4,[[["self"]],["u64"]]],[11,"as_u32","","Conversion to u32 with overflow checking",4,[[["self"]],["u32"]]],[11,"as_u64","","Conversion to u64 with overflow checking",4,[[["self"]],["u64"]]],[11,"is_zero","","",4,[[["self"]],["bool"]]],[11,"bits","","Return the least number of bits needed to represent the number",4,[[["self"]],["usize"]]],[11,"bit","","",4,[[["self"],["usize"]],["bool"]]],[11,"byte","","",4,[[["self"],["usize"]],["u8"]]],[11,"to_big_endian","","",4,N],[11,"to_little_endian","","",4,N],[11,"to_hex","","",4,[[["self"]],["string"]]],[11,"exp10","","",4,[[["usize"]],["u128"]]],[11,"zero","","",4,[[],["u128"]]],[11,"one","","",4,[[],["u128"]]],[11,"max_value","","",4,[[],["u128"]]],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",4,[[["self"],["u128"]],["u128"]]],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",4,N],[11,"overflowing_add","","Optimized instructions",4,N],[11,"overflowing_sub","","",4,N],[11,"overflowing_mul","","",4,N],[11,"overflowing_div","","",4,N],[11,"overflowing_rem","","",4,N],[11,"overflowing_neg","","",4,N],[11,"from_dec_str","","",3,[[["str"]],["result",["u256","fromdecstrerr"]]]],[11,"low_u32","","",3,[[["self"]],["u32"]]],[11,"low_u64","","",3,[[["self"]],["u64"]]],[11,"as_u32","","Conversion to u32 with overflow checking",3,[[["self"]],["u32"]]],[11,"as_u64","","Conversion to u64 with overflow checking",3,[[["self"]],["u64"]]],[11,"is_zero","","",3,[[["self"]],["bool"]]],[11,"bits","","Return the least number of bits needed to represent the number",3,[[["self"]],["usize"]]],[11,"bit","","",3,[[["self"],["usize"]],["bool"]]],[11,"byte","","",3,[[["self"],["usize"]],["u8"]]],[11,"to_big_endian","","",3,N],[11,"to_little_endian","","",3,N],[11,"to_hex","","",3,[[["self"]],["string"]]],[11,"exp10","","",3,[[["usize"]],["u256"]]],[11,"zero","","",3,[[],["u256"]]],[11,"one","","",3,[[],["u256"]]],[11,"max_value","","",3,[[],["u256"]]],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",3,[[["self"],["u256"]],["u256"]]],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",3,N],[11,"overflowing_add","","Optimized instructions",3,N],[11,"overflowing_sub","","",3,N],[11,"overflowing_mul","","",3,N],[11,"overflowing_div","","",3,N],[11,"overflowing_rem","","",3,N],[11,"overflowing_neg","","",3,N],[11,"from_dec_str","","",2,[[["str"]],["result",["u512","fromdecstrerr"]]]],[11,"low_u32","","",2,[[["self"]],["u32"]]],[11,"low_u64","","",2,[[["self"]],["u64"]]],[11,"as_u32","","Conversion to u32 with overflow checking",2,[[["self"]],["u32"]]],[11,"as_u64","","Conversion to u64 with overflow checking",2,[[["self"]],["u64"]]],[11,"is_zero","","",2,[[["self"]],["bool"]]],[11,"bits","","Return the least number of bits needed to represent the number",2,[[["self"]],["usize"]]],[11,"bit","","",2,[[["self"],["usize"]],["bool"]]],[11,"byte","","",2,[[["self"],["usize"]],["u8"]]],[11,"to_big_endian","","",2,N],[11,"to_little_endian","","",2,N],[11,"to_hex","","",2,[[["self"]],["string"]]],[11,"exp10","","",2,[[["usize"]],["u512"]]],[11,"zero","","",2,[[],["u512"]]],[11,"one","","",2,[[],["u512"]]],[11,"max_value","","",2,[[],["u512"]]],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",2,[[["self"],["u512"]],["u512"]]],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",2,N],[11,"overflowing_add","","Optimized instructions",2,N],[11,"overflowing_sub","","",2,N],[11,"overflowing_mul","","",2,N],[11,"overflowing_div","","",2,N],[11,"overflowing_rem","","",2,N],[11,"overflowing_neg","","",2,N],[11,"hash","","",4,N],[11,"hash","","",3,N],[11,"hash","","",2,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"mul","","",4,[[["self"],["u128"]],["u128"]]],[11,"mul","","",2,[[["self"],["u512"]],["u512"]]],[11,"mul","","",3,[[["self"],["u256"]],["u256"]]],[11,"bitxor","","",3,[[["self"],["u256"]],["u256"]]],[11,"bitxor","","",4,[[["self"],["u128"]],["u128"]]],[11,"bitxor","","",2,[[["self"],["u512"]],["u512"]]],[11,"heap_size_of_children","","",4,[[["self"]],["usize"]]],[11,"heap_size_of_children","","",3,[[["self"]],["usize"]]],[11,"from","","",2,[[["i32"]],["u512"]]],[11,"from","","",3,[[["u128"]],["u256"]]],[11,"from","","",4,[[["u512"]],["u128"]]],[11,"from","","",3,[[["u64"]],["u256"]]],[11,"from","","",2,[[["str"]],["u512"]]],[11,"from","","",4,[[["i16"]],["u128"]]],[11,"from","","",2,[[["u16"]],["u512"]]],[11,"from","","",2,[[["usize"]],["u512"]]],[11,"from","","",2,[[["i16"]],["u512"]]],[11,"from","","",2,[[["u64"]],["u512"]]],[11,"from","","",4,[[["usize"]],["u128"]]],[11,"from","","",3,[[["i64"]],["u256"]]],[11,"from","","",4,[[["i8"]],["u128"]]],[11,"from","","",2,[[["u256"]],["u512"]]],[11,"from","","",2,[[["i8"]],["u512"]]],[11,"from","","",2,[[["i64"]],["u512"]]],[11,"from","","",3,N],[11,"from","","",4,N],[11,"from","","",3,[[["u512"]],["u256"]]],[11,"from","","",3,[[["u16"]],["u256"]]],[11,"from","","",3,[[["isize"]],["u256"]]],[11,"from","","",2,[[["isize"]],["u512"]]],[11,"from","","",4,[[["u256"]],["u128"]]],[11,"from","","",3,[[["u8"]],["u256"]]],[11,"from","","",4,[[["str"]],["u128"]]],[11,"from","","",4,[[["i32"]],["u128"]]],[11,"from","","",3,[[["u512"]],["u256"]]],[11,"from","","",2,[[["u8"]],["u512"]]],[11,"from","","",2,[[["u128"]],["u512"]]],[11,"from","","",3,[[["str"]],["u256"]]],[11,"from","","",3,[[["i32"]],["u256"]]],[11,"from","","",4,[[["u32"]],["u128"]]],[11,"from","","",3,[[["usize"]],["u256"]]],[11,"from","","",2,N],[11,"from","","",3,[[["i16"]],["u256"]]],[11,"from","","",4,[[["u64"]],["u128"]]],[11,"from","","",2,[[["u256"]],["u512"]]],[11,"from","","",2,[[["u32"]],["u512"]]],[11,"from","","",4,[[["u8"]],["u128"]]],[11,"from","","",3,[[["i8"]],["u256"]]],[11,"from","","",4,[[["i64"]],["u128"]]],[11,"from","","",4,[[["isize"]],["u128"]]],[11,"from","","",4,[[["u16"]],["u128"]]],[11,"from","","",3,[[["u32"]],["u256"]]],[11,"div","","",4,[[["self"],["u128"]],["u128"]]],[11,"div","","",2,[[["self"],["u512"]],["u512"]]],[11,"div","","",3,[[["self"],["u256"]],["u256"]]],[11,"shl","","",4,[[["self"],["usize"]],["u128"]]],[11,"shl","","",3,[[["self"],["usize"]],["u256"]]],[11,"shl","","",2,[[["self"],["usize"]],["u512"]]],[11,"not","","",3,[[["self"]],["u256"]]],[11,"not","","",2,[[["self"]],["u512"]]],[11,"not","","",4,[[["self"]],["u128"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",3,[[["self"],["u256"]],["bool"]]],[11,"ne","","",3,[[["self"],["u256"]],["bool"]]],[11,"eq","","",2,[[["self"],["u512"]],["bool"]]],[11,"ne","","",2,[[["self"],["u512"]],["bool"]]],[11,"eq","","",0,[[["self"],["fromdecstrerr"]],["bool"]]],[11,"eq","","",4,[[["self"],["u128"]],["bool"]]],[11,"ne","","",4,[[["self"],["u128"]],["bool"]]],[11,"serialize","verification::hash","",29,N],[11,"serialized_size","","",29,[[["self"]],["usize"]]],[11,"serialize","verification::compact","",27,N],[11,"serialize","verification::hash","",25,N],[11,"serialized_size","","",25,[[["self"]],["usize"]]],[11,"serialize","","",28,N],[11,"serialized_size","","",28,[[["self"]],["usize"]]],[11,"serialize","","",24,N],[11,"serialized_size","","",24,[[["self"]],["usize"]]],[11,"serialize","","",30,N],[11,"serialized_size","","",30,[[["self"]],["usize"]]],[11,"serialize","","",32,N],[11,"serialized_size","","",32,[[["self"]],["usize"]]],[11,"serialize","","",26,N],[11,"serialized_size","","",26,[[["self"]],["usize"]]],[11,"serialize","","",31,N],[11,"serialized_size","","",31,[[["self"]],["usize"]]],[11,"deserialize","","",26,[[["reader"]],["result",["h520","error"]]]],[11,"deserialize","","",25,[[["reader"]],["result",["h48","error"]]]],[11,"deserialize","","",30,[[["reader"]],["result",["h256","error"]]]],[11,"deserialize","","",31,[[["reader"]],["result",["h96","error"]]]],[11,"deserialize","","",32,[[["reader"]],["result",["h160","error"]]]],[11,"deserialize","","",28,[[["reader"]],["result",["h264","error"]]]],[11,"deserialize","","",24,[[["reader"]],["result",["h32","error"]]]],[11,"deserialize","verification::compact","",27,[[["reader"]],["result",["compact","error"]]]],[11,"deserialize","verification::hash","",29,[[["reader"]],["result",["h512","error"]]]],[11,"full_mul","verification::bigint::uint","Multiplies two 256-bit integers to produce full 512-bit integer No overflow possible",3,[[["self"],["u256"]],["u512"]]],[11,"take","verification::hash","",24,N],[11,"reversed","","",24,[[["self"]],["h32"]]],[11,"size","","",24,[[],["usize"]]],[11,"is_zero","","",24,[[["self"]],["bool"]]],[11,"take","","",25,N],[11,"reversed","","",25,[[["self"]],["h48"]]],[11,"size","","",25,[[],["usize"]]],[11,"is_zero","","",25,[[["self"]],["bool"]]],[11,"take","","",31,N],[11,"reversed","","",31,[[["self"]],["h96"]]],[11,"size","","",31,[[],["usize"]]],[11,"is_zero","","",31,[[["self"]],["bool"]]],[11,"take","","",32,N],[11,"reversed","","",32,[[["self"]],["h160"]]],[11,"size","","",32,[[],["usize"]]],[11,"is_zero","","",32,[[["self"]],["bool"]]],[11,"from_reversed_str","","",30,[[["str"]],["h256"]]],[11,"to_reversed_str","","",30,[[["self"]],["string"]]],[11,"take","","",30,N],[11,"reversed","","",30,[[["self"]],["h256"]]],[11,"size","","",30,[[],["usize"]]],[11,"is_zero","","",30,[[["self"]],["bool"]]],[11,"take","","",28,N],[11,"reversed","","",28,[[["self"]],["h264"]]],[11,"size","","",28,[[],["usize"]]],[11,"is_zero","","",28,[[["self"]],["bool"]]],[11,"take","","",29,N],[11,"reversed","","",29,[[["self"]],["h512"]]],[11,"size","","",29,[[],["usize"]]],[11,"is_zero","","",29,[[["self"]],["bool"]]],[11,"take","","",26,N],[11,"reversed","","",26,[[["self"]],["h520"]]],[11,"size","","",26,[[],["usize"]]],[11,"is_zero","","",26,[[["self"]],["bool"]]],[11,"new","verification::compact","",27,[[["u32"]],["compact"]]],[11,"max_value","","",27,[[],["compact"]]],[11,"to_u256","","Computes the target [0, T] that a blockhash must land in to be valid Returns value in error, if there is an overflow or its negative value",27,[[["self"]],["result",["u256","u256"]]]],[11,"from_u256","","",27,[[["u256"]],["compact"]]],[11,"to_f64","","",27,[[["self"]],["f64"]]]],"paths":[[4,"FromDecStrErr"],[8,"Uint"],[3,"U512"],[3,"U256"],[3,"U128"],[3,"BlockAcceptor"],[3,"ChainAcceptor"],[3,"HeaderAcceptor"],[3,"TransactionAcceptor"],[3,"MemoryPoolTransactionAcceptor"],[3,"BlockVerifier"],[3,"ChainVerifier"],[3,"HeaderVerifier"],[3,"TransactionVerifier"],[3,"MemoryPoolTransactionVerifier"],[4,"Error"],[4,"TransactionError"],[4,"VerificationLevel"],[3,"CanonBlock"],[3,"CanonHeader"],[3,"CanonTransaction"],[3,"Deployments"],[3,"BackwardsCompatibleChainVerifier"],[8,"Verify"],[3,"H32"],[3,"H48"],[3,"H520"],[3,"Compact"],[3,"H264"],[3,"H512"],[3,"H256"],[3,"H96"],[3,"H160"]]};
initSearch(searchIndex);
